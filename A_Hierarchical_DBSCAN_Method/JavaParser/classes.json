{
    "FlightPKImpl": {
        "methods": [
            "getId",
            "setId",
            "getFlightSegmentId",
            "setFlightSegmentId",
            "ibmGetPartition",
            "hashCode",
            "equals",
            "toString"
        ],
        "method_calls": [
            {
                "method_name": "hashCode",
                "class_name": "flightSegmentId"
            },
            {
                "method_name": "hashCode",
                "class_name": "id"
            },
            {
                "method_name": "getClass",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getClass",
                "class_name": "obj"
            },
            {
                "method_name": "equals",
                "class_name": "flightSegmentId"
            },
            {
                "method_name": "equals",
                "class_name": "id"
            }
        ],
        "words": [
            "FlightPKImpl",
            "getId",
            "setId",
            "getFlightSegmentId",
            "setFlightSegmentId",
            "ibmGetPartition",
            "hashCode",
            "equals",
            "toString",
            "serialVersionUID",
            "id",
            "flightSegmentId",
            "prime",
            "result",
            "other",
            "flightSegmentId",
            "id",
            "id",
            "flightSegmentId",
            "obj"
        ]
    },
    "CustomerAddressImpl": {
        "methods": [
            "getStreetAddress1",
            "setStreetAddress1",
            "getStreetAddress2",
            "setStreetAddress2",
            "getCity",
            "setCity",
            "getStateProvince",
            "setStateProvince",
            "getCountry",
            "setCountry",
            "getPostalCode",
            "setPostalCode",
            "toString",
            "equals"
        ],
        "method_calls": [
            {
                "method_name": "getClass",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getClass",
                "class_name": "obj"
            },
            {
                "method_name": "equals",
                "class_name": "city"
            },
            {
                "method_name": "equals",
                "class_name": "country"
            },
            {
                "method_name": "equals",
                "class_name": "postalCode"
            },
            {
                "method_name": "equals",
                "class_name": "stateProvince"
            },
            {
                "method_name": "equals",
                "class_name": "streetAddress1"
            },
            {
                "method_name": "equals",
                "class_name": "streetAddress2"
            }
        ],
        "words": [
            "CustomerAddressImpl",
            "getStreetAddress1",
            "setStreetAddress1",
            "getStreetAddress2",
            "setStreetAddress2",
            "getCity",
            "setCity",
            "getStateProvince",
            "setStateProvince",
            "getCountry",
            "setCountry",
            "getPostalCode",
            "setPostalCode",
            "toString",
            "equals",
            "serialVersionUID",
            "streetAddress1",
            "streetAddress2",
            "city",
            "stateProvince",
            "country",
            "postalCode",
            "other",
            "streetAddress1",
            "streetAddress2",
            "city",
            "stateProvince",
            "country",
            "postalCode",
            "streetAddress1",
            "streetAddress2",
            "city",
            "stateProvince",
            "country",
            "postalCode",
            "obj"
        ]
    },
    "BigDecimalConverter": {
        "methods": [
            "encode",
            "decode"
        ],
        "method_calls": [
            {
                "method_name": "toString",
                "class_name": "value"
            },
            {
                "method_name": "toString",
                "class_name": "fromDBObject"
            }
        ],
        "words": [
            "BigDecimalConverter",
            "encode",
            "decode",
            "value",
            "optionalExtraInfo",
            "targetClass",
            "fromDBObject",
            "optionalExtraInfo"
        ]
    },
    "CustomerService": {
        "methods": [
            "createCustomer",
            "createAddress",
            "updateCustomer",
            "getCustomer",
            "getCustomerByUsername",
            "validateCustomer",
            "getCustomerByUsernameAndPassword",
            "validateSession",
            "getSession",
            "removeSession",
            "createSession",
            "createSession",
            "invalidateSession",
            "count",
            "countSessions"
        ],
        "method_calls": [
            {
                "method_name": "getCustomer",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setPassword",
                "class_name": "c"
            },
            {
                "method_name": "getCustomer",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getPassword",
                "class_name": "customerToValidate"
            },
            {
                "method_name": "equals",
                "class_name": "password"
            },
            {
                "method_name": "getCustomer",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getPassword",
                "class_name": "c"
            },
            {
                "method_name": "equals",
                "class_name": "c.getPassword()"
            },
            {
                "method_name": "getSession",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getTimeoutTime",
                "class_name": "cSession"
            },
            {
                "method_name": "before",
                "class_name": "cSession.getTimeoutTime()"
            },
            {
                "method_name": "removeSession",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "generate",
                "class_name": "keyGenerator"
            },
            {
                "method_name": "toString",
                "class_name": "keyGenerator.generate()"
            },
            {
                "method_name": "getInstance",
                "class_name": "Calendar"
            },
            {
                "method_name": "setTime",
                "class_name": "c"
            },
            {
                "method_name": "add",
                "class_name": "c"
            },
            {
                "method_name": "getTime",
                "class_name": "c"
            },
            {
                "method_name": "createSession",
                "class_name": "Optional.empty"
            }
        ],
        "words": [
            "CustomerService",
            "createCustomer",
            "createAddress",
            "updateCustomer",
            "getCustomer",
            "getCustomerByUsername",
            "validateCustomer",
            "getCustomerByUsernameAndPassword",
            "validateSession",
            "getSession",
            "removeSession",
            "createSession",
            "createSession",
            "invalidateSession",
            "count",
            "countSessions",
            "DAYS_TO_ALLOW_SESSION",
            "keyGenerator",
            "c",
            "validatedCustomer",
            "customerToValidate",
            "c",
            "cSession",
            "now",
            "sessionId",
            "now",
            "c",
            "expiration",
            "username",
            "password",
            "status",
            "total_miles",
            "miles_ytd",
            "phoneNumber",
            "phoneNumberType",
            "address",
            "streetAddress1",
            "streetAddress2",
            "city",
            "stateProvince",
            "country",
            "postalCode",
            "customer",
            "username",
            "username",
            "username",
            "password",
            "username",
            "password",
            "sessionid",
            "sessionid",
            "session",
            "customerId",
            "sessionId",
            "customerId",
            "creation",
            "expiration",
            "sessionid",
            "Should",
            "we",
            "also",
            "set",
            "the",
            "password",
            "to",
            "null?"
        ]
    },
    "TripLegInfo": {
        "methods": [
            "isHasMoreOptions",
            "setHasMoreOptions",
            "getNumPages",
            "setNumPages",
            "getPageSize",
            "setPageSize",
            "getCurrentPage",
            "setCurrentPage",
            "getFlightsOptions",
            "setFlightsOptions"
        ],
        "method_calls": [{
            "method_name": "add",
            "class_name": "flightInfoOptions"
        }],
        "words": [
            "TripLegInfo",
            "isHasMoreOptions",
            "setHasMoreOptions",
            "getNumPages",
            "setNumPages",
            "getPageSize",
            "setPageSize",
            "getCurrentPage",
            "setCurrentPage",
            "getFlightsOptions",
            "setFlightsOptions",
            "DEFAULT_PAGE_SIZE",
            "hasMoreOptions",
            "numPages",
            "pageSize",
            "currentPage",
            "flightsOptions",
            "flightInfoOptions",
            "info",
            "hasMoreOptions",
            "numPages",
            "pageSize",
            "currentPage",
            "flightsOptions"
        ]
    },
    "MorphiaConstants": {
        "methods": [],
        "method_calls": [],
        "words": [
            "MorphiaConstants",
            "JNDI_NAME",
            "KEY",
            "KEY_DESCRIPTION",
            "HOSTNAME",
            "PORT",
            "DATABASE"
        ]
    },
    "Customer": {
        "methods": [
            "getCustomerId",
            "getUsername",
            "setUsername",
            "getPassword",
            "setPassword",
            "getStatus",
            "setStatus",
            "getTotal_miles",
            "getMiles_ytd",
            "getPhoneNumber",
            "setPhoneNumber",
            "getPhoneNumberType",
            "setPhoneNumberType",
            "getAddress",
            "setAddress"
        ],
        "method_calls": [],
        "words": [
            "Customer",
            "getCustomerId",
            "getUsername",
            "setUsername",
            "getPassword",
            "setPassword",
            "getStatus",
            "setStatus",
            "getTotal_miles",
            "getMiles_ytd",
            "getPhoneNumber",
            "setPhoneNumber",
            "getPhoneNumberType",
            "setPhoneNumberType",
            "getAddress",
            "setAddress",
            "username",
            "password",
            "status",
            "phoneNumber",
            "phoneNumberType",
            "address"
        ]
    },
    "Flight": {
        "methods": [
            "getFlightId",
            "setFlightId",
            "getFlightSegmentId",
            "getFlightSegment",
            "setFlightSegment",
            "getScheduledDepartureTime",
            "getScheduledArrivalTime",
            "getFirstClassBaseCost",
            "getEconomyClassBaseCost",
            "getNumFirstClassSeats",
            "getNumEconomyClassSeats",
            "getAirplaneTypeId"
        ],
        "method_calls": [],
        "words": [
            "Flight",
            "getFlightId",
            "setFlightId",
            "getFlightSegmentId",
            "getFlightSegment",
            "setFlightSegment",
            "getScheduledDepartureTime",
            "getScheduledArrivalTime",
            "getFirstClassBaseCost",
            "getEconomyClassBaseCost",
            "getNumFirstClassSeats",
            "getNumEconomyClassSeats",
            "getAirplaneTypeId",
            "id",
            "flightSegment"
        ]
    },
    "LoaderREST": {
        "methods": [
            "queryLoader",
            "loadDB"
        ],
        "method_calls": [
            {
                "method_name": "queryLoader",
                "class_name": "loader"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(response)"
            },
            {
                "method_name": "loadDB",
                "class_name": "loader"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(response)"
            }
        ],
        "words": [
            "LoaderREST",
            "queryLoader",
            "loadDB",
            "loader",
            "response",
            "response",
            "numCustomers",
            "private",
            "static",
            "Logger",
            "logger",
            "=",
            "Logger.getLogger(LoaderREST.class.getName());"
        ]
    },
    "BookingService": {
        "methods": [
            "bookFlight",
            "getBooking",
            "getBookingsByUser",
            "cancelBooking",
            "count"
        ],
        "method_calls": [],
        "words": [
            "BookingService",
            "bookFlight",
            "getBooking",
            "getBookingsByUser",
            "cancelBooking",
            "count",
            "customerId",
            "flightSegmentId",
            "FlightId",
            "user",
            "id",
            "user",
            "user",
            "id",
            "String",
            "bookFlight(String",
            "customerId,",
            "FlightPK",
            "flightId);",
            "String",
            "bookFlight(String",
            "customerId,",
            "String",
            "flightId);"
        ]
    },
    "JtlTotals": {
        "methods": [
            "add",
            "getFlightToCount",
            "addTime",
            "getMillisMap",
            "addReturnCode",
            "setThreadMap",
            "addTimestamp",
            "incrementFailures",
            "addToFlight",
            "addFlightRetCount",
            "incrementOneWayCount",
            "incrementFiles",
            "getFilesCount",
            "getCount",
            "getThreadMap",
            "getAverageResponseTime",
            "getMaxResponseTime",
            "getMinResponseTime",
            "getFailures",
            "get90thPrecentile",
            "getReturnCodeCounts",
            "getElapsedTimeInSeconds",
            "getRequestsPerSecond",
            "getFlightToSum",
            "getEmptyToFlightCount",
            "getAverageToFlights",
            "getFlightRetCount",
            "getOneWayCount",
            "setResponseTimeStepping",
            "getResponseTimeStepping",
            "cntByTimeString",
            "cntByTime"
        ],
        "method_calls": [
            {
                "method_name": "getReturnCodeCounts",
                "class_name": "totals"
            },
            {
                "method_name": "putAll",
                "class_name": "rcMap"
            },
            {
                "method_name": "getMillisMap",
                "class_name": "totals"
            },
            {
                "method_name": "putAll",
                "class_name": "millisMap"
            },
            {
                "method_name": "getThreadMap",
                "class_name": "totals"
            },
            {
                "method_name": "putAll",
                "class_name": "threadMap"
            },
            {
                "method_name": "getOneWayCount",
                "class_name": "totals"
            },
            {
                "method_name": "getFlightRetCount",
                "class_name": "totals"
            },
            {
                "method_name": "getEmptyToFlightCount",
                "class_name": "totals"
            },
            {
                "method_name": "getFlightToSum",
                "class_name": "totals"
            },
            {
                "method_name": "getFlightToCount",
                "class_name": "totals"
            },
            {
                "method_name": "getFailures",
                "class_name": "totals"
            },
            {
                "method_name": "getCount",
                "class_name": "totals"
            },
            {
                "method_name": "max",
                "class_name": "Math"
            },
            {
                "method_name": "min",
                "class_name": "Math"
            },
            {
                "method_name": "add",
                "class_name": "timeList"
            },
            {
                "method_name": "get",
                "class_name": "millisMap"
            },
            {
                "method_name": "intValue",
                "class_name": "count"
            },
            {
                "method_name": "put",
                "class_name": "millisMap"
            },
            {
                "method_name": "get",
                "class_name": "rcMap"
            },
            {
                "method_name": "intValue",
                "class_name": "rc_count"
            },
            {
                "method_name": "put",
                "class_name": "rcMap"
            },
            {
                "method_name": "max",
                "class_name": "Math"
            },
            {
                "method_name": "min",
                "class_name": "Math"
            },
            {
                "method_name": "isEmpty",
                "class_name": "timeList"
            },
            {
                "method_name": "size",
                "class_name": "timeList"
            },
            {
                "method_name": "round",
                "class_name": "Math"
            },
            {
                "method_name": "sort",
                "class_name": "Collections"
            },
            {
                "method_name": "size",
                "class_name": "timeList"
            },
            {
                "method_name": "get",
                "class_name": "timeList"
            },
            {
                "method_name": "round",
                "class_name": "Math"
            },
            {
                "method_name": "getElapsedTimeInSeconds",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "round",
                "class_name": "Math"
            },
            {
                "method_name": "entrySet",
                "class_name": "millisMap"
            },
            {
                "method_name": "iterator",
                "class_name": "millisMap.entrySet()"
            },
            {
                "method_name": "next",
                "class_name": "iter"
            },
            {
                "method_name": "getKey",
                "class_name": "millisEntry"
            },
            {
                "method_name": "getValue",
                "class_name": "millisEntry"
            },
            {
                "method_name": "intValue",
                "class_name": "bucket"
            },
            {
                "method_name": "intValue",
                "class_name": "bucket"
            },
            {
                "method_name": "format",
                "class_name": "df"
            },
            {
                "method_name": "format",
                "class_name": "df"
            },
            {
                "method_name": "add",
                "class_name": "millisStr"
            },
            {
                "method_name": "hasNext",
                "class_name": "iter"
            },
            {
                "method_name": "toString",
                "class_name": "millisStr"
            },
            {
                "method_name": "entrySet",
                "class_name": "millisMap"
            },
            {
                "method_name": "iterator",
                "class_name": "millisMap.entrySet()"
            },
            {
                "method_name": "next",
                "class_name": "iter"
            },
            {
                "method_name": "getKey",
                "class_name": "millisEntry"
            },
            {
                "method_name": "getValue",
                "class_name": "millisEntry"
            },
            {
                "method_name": "intValue",
                "class_name": "bucket"
            },
            {
                "method_name": "intValue",
                "class_name": "bucket"
            },
            {
                "method_name": "format",
                "class_name": "df"
            },
            {
                "method_name": "format",
                "class_name": "df"
            },
            {
                "method_name": "put",
                "class_name": "millisStr"
            },
            {
                "method_name": "hasNext",
                "class_name": "iter"
            }
        ],
        "words": [
            "JtlTotals",
            "add",
            "getFlightToCount",
            "addTime",
            "getMillisMap",
            "addReturnCode",
            "setThreadMap",
            "addTimestamp",
            "incrementFailures",
            "addToFlight",
            "addFlightRetCount",
            "incrementOneWayCount",
            "incrementFiles",
            "getFilesCount",
            "getCount",
            "getThreadMap",
            "getAverageResponseTime",
            "getMaxResponseTime",
            "getMinResponseTime",
            "getFailures",
            "get90thPrecentile",
            "getReturnCodeCounts",
            "getElapsedTimeInSeconds",
            "getRequestsPerSecond",
            "getFlightToSum",
            "getEmptyToFlightCount",
            "getAverageToFlights",
            "getFlightRetCount",
            "getOneWayCount",
            "setResponseTimeStepping",
            "getResponseTimeStepping",
            "cntByTimeString",
            "cntByTime",
            "DECIMAL_PATTERN",
            "MILLIS_PER_SECOND",
            "millisPerBucket",
            "files",
            "request_count",
            "time_sum",
            "time_max",
            "time_min",
            "failures",
            "timestamp_start",
            "timestamp_end",
            "rcMap",
            "millisMap",
            "threadMap",
            "timeList",
            "flight_to_sum",
            "flight_to_count",
            "flight_to_empty_count",
            "flight_ret_count",
            "one_way_count",
            "bucket",
            "count",
            "rc_count",
            "target",
            "secondsElaspsed",
            "df",
            "millisStr",
            "iter",
            "millisEntry",
            "bucket",
            "bucketCount",
            "minMillis",
            "maxMillis",
            "df",
            "millisStr",
            "iter",
            "millisEntry",
            "bucket",
            "bucketCount",
            "minMillis",
            "maxMillis",
            "totals",
            "time",
            "rc",
            "threadMap",
            "timestamp",
            "count",
            "count",
            "milliseconds",
            "key",
            "rc,",
            "value",
            "count",
            "key",
            "bucket",
            "Integer,",
            "value",
            "count",
            "in",
            "case",
            ".jtl",
            "file",
            "doesn't",
            "exist,",
            "request_count",
            "could",
            "be",
            "0",
            "adding",
            "this",
            "condition",
            "to",
            "avoid",
            "\"divide",
            "by",
            "zero\"",
            "runtime",
            "exception"
        ]
    },
    "MultipleChartResults": {
        "methods": [
            "getMultipleChartTitle",
            "setMultipleChartTitle",
            "getMultipleChartYAxisLabel",
            "setMultipleChartYAxisLabel",
            "getResults",
            "setResults",
            "getCharStrings",
            "setCharStrings"
        ],
        "method_calls": [],
        "words": [
            "MultipleChartResults",
            "getMultipleChartTitle",
            "setMultipleChartTitle",
            "getMultipleChartYAxisLabel",
            "setMultipleChartYAxisLabel",
            "getResults",
            "setResults",
            "getCharStrings",
            "setCharStrings",
            "multipleChartTitle",
            "multipleChartYAxisLabel",
            "results",
            "charStrings",
            "multipleChartTitle",
            "multipleChartYAxisLabel",
            "results",
            "charStrings"
        ]
    },
    "BookingInfo": {
        "methods": [
            "getBookingId",
            "setBookingId",
            "getFlightId",
            "setFlightId",
            "getCustomerId",
            "setCustomerId",
            "getDateOfBooking",
            "setDateOfBooking",
            "getPkey"
        ],
        "method_calls": [
            {
                "method_name": "getBookingId",
                "class_name": "booking"
            },
            {
                "method_name": "getFlightId",
                "class_name": "booking"
            },
            {
                "method_name": "getCustomerId",
                "class_name": "booking"
            },
            {
                "method_name": "getDateOfBooking",
                "class_name": "booking"
            }
        ],
        "words": [
            "BookingInfo",
            "getBookingId",
            "setBookingId",
            "getFlightId",
            "setFlightId",
            "getCustomerId",
            "setCustomerId",
            "getDateOfBooking",
            "setDateOfBooking",
            "getPkey",
            "bookingId",
            "flightId",
            "customerId",
            "dateOfBooking",
            "pkey",
            "booking",
            "bookingId",
            "flightId",
            "customerId",
            "dateOfBooking"
        ]
    },
    "OverallResults": {
        "methods": [
            "getAllInputList",
            "setAllInputList",
            "getAllTimeList",
            "setAllTimeList",
            "getOverallScale_max",
            "setOverallScale_max",
            "getScale_max",
            "setScale_max"
        ],
        "method_calls": [],
        "words": [
            "OverallResults",
            "getAllInputList",
            "setAllInputList",
            "getAllTimeList",
            "setAllTimeList",
            "getOverallScale_max",
            "setOverallScale_max",
            "getScale_max",
            "setScale_max",
            "allInputList",
            "allTimeList",
            "scale_max",
            "overallScale_max",
            "allInputList",
            "allTimeList",
            "overallScale_max",
            "scale_max"
        ]
    },
    "FlightPKInfo": {
        "methods": [
            "getId",
            "setId",
            "getFlightSegmentId",
            "setFlightSegmentId"
        ],
        "method_calls": [],
        "words": [
            "FlightPKInfo",
            "getId",
            "setId",
            "getFlightSegmentId",
            "setFlightSegmentId",
            "id",
            "flightSegmentId",
            "flightSegmentId",
            "id",
            "id",
            "flightSegmentId"
        ]
    },
    "ReportGenerator": {
        "methods": [
            "main",
            "process",
            "generateMulitpleLinesChart",
            "getCombinedResultsList",
            "generateHtmlfile",
            "addCpuStats",
            "reorderTestcases",
            "getTotals",
            "parseNmonDirectory"
        ],
        "method_calls": [
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "isDirectory",
                "class_name": "new File(searchingLocation)"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "currentTimeMillis",
                "class_name": "System"
            },
            {
                "method_name": "process",
                "class_name": "generator"
            },
            {
                "method_name": "currentTimeMillis",
                "class_name": "System"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "currentTimeMillis",
                "class_name": "System"
            },
            {
                "method_name": "setFileName",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "setMultipleChartTitle",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "setMultipleYAxisLabel",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "processDirectory",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "getAllInputList",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "processData",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "getAllTimeList",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "scaleDown",
                "class_name": "ResultParserHelper"
            },
            {
                "method_name": "generateChartStrings",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "add",
                "class_name": "list"
            },
            {
                "method_name": "put",
                "class_name": "charMap"
            },
            {
                "method_name": "generateMulitpleLinesChart",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getCharStrings",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "put",
                "class_name": "charMap"
            },
            {
                "method_name": "getAllInputList",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "getStatistics",
                "class_name": "StatResult"
            },
            {
                "method_name": "put",
                "class_name": "input"
            },
            {
                "method_name": "getAllTimeList",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "isEmpty",
                "class_name": "jmeterParser.getAllTimeList()"
            },
            {
                "method_name": "getTestDate",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "getAllTimeList",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "get",
                "class_name": "jmeterParser.getAllTimeList()"
            },
            {
                "method_name": "put",
                "class_name": "input"
            },
            {
                "method_name": "getTestDate",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "getAllTimeList",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "size",
                "class_name": "jmeterParser.getAllTimeList()"
            },
            {
                "method_name": "getAllTimeList",
                "class_name": "jmeterParser"
            },
            {
                "method_name": "get",
                "class_name": "jmeterParser.getAllTimeList()"
            },
            {
                "method_name": "put",
                "class_name": "input"
            },
            {
                "method_name": "put",
                "class_name": "input"
            },
            {
                "method_name": "currentTimeMillis",
                "class_name": "System"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "currentTimeMillis",
                "class_name": "System"
            },
            {
                "method_name": "processResultsDirectory",
                "class_name": "jtlParser"
            },
            {
                "method_name": "getResults",
                "class_name": "jtlParser"
            },
            {
                "method_name": "put",
                "class_name": "input"
            },
            {
                "method_name": "getResultsByUrl",
                "class_name": "jtlParser"
            },
            {
                "method_name": "reorderTestcases",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "put",
                "class_name": "input"
            },
            {
                "method_name": "getResultsByUrl",
                "class_name": "jtlParser"
            },
            {
                "method_name": "getTotals",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "put",
                "class_name": "input"
            },
            {
                "method_name": "getResultsByUrl",
                "class_name": "jtlParser"
            },
            {
                "method_name": "getTotals",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "put",
                "class_name": "input"
            },
            {
                "method_name": "getResultsByUrl",
                "class_name": "jtlParser"
            },
            {
                "method_name": "getTotals",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "put",
                "class_name": "input"
            },
            {
                "method_name": "currentTimeMillis",
                "class_name": "System"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "getConfiguration",
                "class_name": "Messages"
            },
            {
                "method_name": "getList",
                "class_name": "Messages.getConfiguration()"
            },
            {
                "method_name": "currentTimeMillis",
                "class_name": "System"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "equalsIgnoreCase",
                "class_name": "enabled"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "equalsIgnoreCase",
                "class_name": "relativePath"
            },
            {
                "method_name": "parseNmonDirectory",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "addCpuStats",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "size",
                "class_name": "nmonParsers"
            },
            {
                "method_name": "put",
                "class_name": "input"
            },
            {
                "method_name": "currentTimeMillis",
                "class_name": "System"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "size",
                "class_name": "charMap"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "currentTimeMillis",
                "class_name": "System"
            },
            {
                "method_name": "generateHtmlfile",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "currentTimeMillis",
                "class_name": "System"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "getProperty",
                "class_name": "System"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "getResults",
                "class_name": "parser"
            },
            {
                "method_name": "size",
                "class_name": "parser.getResults()"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "getResults",
                "class_name": "parser"
            },
            {
                "method_name": "size",
                "class_name": "results"
            },
            {
                "method_name": "getMultipleChartTitle",
                "class_name": "parser"
            },
            {
                "method_name": "getMultipleYAxisLabel",
                "class_name": "parser"
            },
            {
                "method_name": "subList",
                "class_name": "results"
            },
            {
                "method_name": "generateMultipleLinesCharString",
                "class_name": "parser"
            },
            {
                "method_name": "getMultipleChartTitle",
                "class_name": "parser"
            },
            {
                "method_name": "getMultipleYAxisLabel",
                "class_name": "parser"
            },
            {
                "method_name": "getResults",
                "class_name": "parser"
            },
            {
                "method_name": "generateMultipleLinesCharString",
                "class_name": "parser"
            },
            {
                "method_name": "getMultipleChartResults",
                "class_name": "parser"
            },
            {
                "method_name": "getResults",
                "class_name": "parser.getMultipleChartResults()"
            },
            {
                "method_name": "iterator",
                "class_name": "parser.getMultipleChartResults().getResults()"
            },
            {
                "method_name": "next",
                "class_name": "itr"
            },
            {
                "method_name": "getInputList",
                "class_name": "itr.next()"
            },
            {
                "method_name": "get",
                "class_name": "curList"
            },
            {
                "method_name": "doubleValue",
                "class_name": "curList.get(j)"
            },
            {
                "method_name": "remove",
                "class_name": "curList"
            },
            {
                "method_name": "size",
                "class_name": "curList"
            },
            {
                "method_name": "addAll",
                "class_name": "resultList"
            },
            {
                "method_name": "hasNext",
                "class_name": "itr"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "setProperty",
                "class_name": "ve"
            },
            {
                "method_name": "getName",
                "class_name": "ClasspathResourceLoader.class"
            },
            {
                "method_name": "setProperty",
                "class_name": "ve"
            },
            {
                "method_name": "init",
                "class_name": "ve"
            },
            {
                "method_name": "getTemplate",
                "class_name": "ve"
            },
            {
                "method_name": "getKey",
                "class_name": "entry"
            },
            {
                "method_name": "getValue",
                "class_name": "entry"
            },
            {
                "method_name": "put",
                "class_name": "context"
            },
            {
                "method_name": "entrySet",
                "class_name": "input"
            },
            {
                "method_name": "put",
                "class_name": "context"
            },
            {
                "method_name": "put",
                "class_name": "context"
            },
            {
                "method_name": "put",
                "class_name": "context"
            },
            {
                "method_name": "getProperty",
                "class_name": "System"
            },
            {
                "method_name": "merge",
                "class_name": "template"
            },
            {
                "method_name": "flush",
                "class_name": "file"
            },
            {
                "method_name": "close",
                "class_name": "file"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "getCombinedResultsList",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getStatistics",
                "class_name": "StatResult"
            },
            {
                "method_name": "getMultipleChartResults",
                "class_name": "parser"
            },
            {
                "method_name": "getResults",
                "class_name": "parser.getMultipleChartResults()"
            },
            {
                "method_name": "size",
                "class_name": "parser.getMultipleChartResults().getResults()"
            },
            {
                "method_name": "setNumberOfResults",
                "class_name": "cpuStats"
            },
            {
                "method_name": "put",
                "class_name": "toAdd"
            },
            {
                "method_name": "keySet",
                "class_name": "totalUrlMap"
            },
            {
                "method_name": "iterator",
                "class_name": "totalUrlMap.keySet()"
            },
            {
                "method_name": "next",
                "class_name": "keys"
            },
            {
                "method_name": "toLowerCase",
                "class_name": "urls[i"
            },
            {
                "method_name": "toLowerCase",
                "class_name": "key"
            },
            {
                "method_name": "contains",
                "class_name": "key.toLowerCase()"
            },
            {
                "method_name": "get",
                "class_name": "totalUrlMap"
            },
            {
                "method_name": "put",
                "class_name": "newMap"
            },
            {
                "method_name": "hasNext",
                "class_name": "keys"
            },
            {
                "method_name": "keySet",
                "class_name": "totalUrlMap"
            },
            {
                "method_name": "iterator",
                "class_name": "totalUrlMap.keySet()"
            },
            {
                "method_name": "next",
                "class_name": "keys"
            },
            {
                "method_name": "toLowerCase",
                "class_name": "urls[i"
            },
            {
                "method_name": "toLowerCase",
                "class_name": "key"
            },
            {
                "method_name": "contains",
                "class_name": "key.toLowerCase()"
            },
            {
                "method_name": "get",
                "class_name": "totalUrlMap"
            },
            {
                "method_name": "put",
                "class_name": "newMap"
            },
            {
                "method_name": "hasNext",
                "class_name": "keys"
            },
            {
                "method_name": "keySet",
                "class_name": "totalUrlMap"
            },
            {
                "method_name": "iterator",
                "class_name": "totalUrlMap.keySet()"
            },
            {
                "method_name": "next",
                "class_name": "keys"
            },
            {
                "method_name": "toLowerCase",
                "class_name": "url"
            },
            {
                "method_name": "toLowerCase",
                "class_name": "key"
            },
            {
                "method_name": "contains",
                "class_name": "key.toLowerCase()"
            },
            {
                "method_name": "get",
                "class_name": "totalUrlMap"
            },
            {
                "method_name": "add",
                "class_name": "urlTotals"
            },
            {
                "method_name": "get",
                "class_name": "totalUrlMap"
            },
            {
                "method_name": "hasNext",
                "class_name": "keys"
            },
            {
                "method_name": "isDirectory",
                "class_name": "new File(directory)"
            },
            {
                "method_name": "setFileName",
                "class_name": "parser"
            },
            {
                "method_name": "setMultipleChartTitle",
                "class_name": "parser"
            },
            {
                "method_name": "processDirectory",
                "class_name": "parser"
            },
            {
                "method_name": "generateMulitpleLinesChart",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getCharStrings",
                "class_name": "parser"
            },
            {
                "method_name": "put",
                "class_name": "charMap"
            }
        ],
        "words": [
            "ReportGenerator",
            "main",
            "process",
            "generateMulitpleLinesChart",
            "getCombinedResultsList",
            "generateHtmlfile",
            "addCpuStats",
            "reorderTestcases",
            "getTotals",
            "parseNmonDirectory",
            "max_lines",
            "RESULTS_FILE",
            "searchingLocation",
            "jmeterFileName",
            "nmonFileName",
            "BOOK_FLIGHT",
            "CANCEL_BOOKING",
            "LOGIN",
            "LOGOUT",
            "LIST_BOOKINGS",
            "QUERY_FLIGHT",
            "UPDATE_CUSTOMER",
            "VIEW_PROFILE",
            "charMap",
            "generator",
            "start",
            "stop",
            "start",
            "stop",
            "overallChartTitle",
            "throughputChartTitle",
            "yAxisLabel",
            "input",
            "jmeterParser",
            "url",
            "list",
            "jmeterStats",
            "jtlParser",
            "urls",
            "nmonParsers",
            "cpuList",
            "enabled",
            "directory",
            "chartTitle",
            "label",
            "fileName",
            "relativePath",
            "nmon",
            "i",
            "results",
            "size",
            "endLocation",
            "i",
            "itr",
            "resultList",
            "curList",
            "j",
            "ve",
            "template",
            "context",
            "entry",
            "file",
            "cpuStats",
            "newMap",
            "keys",
            "key",
            "i",
            "key",
            "found",
            "i",
            "urlTotals",
            "keys",
            "key",
            "parser",
            "args",
            "parser",
            "parser",
            "e",
            "input",
            "parser",
            "label",
            "toAdd",
            "totalUrlMap",
            "urls",
            "url",
            "totalUrlMap",
            "directory",
            "fileName",
            "chartTitle",
            "private",
            "void",
            "generateHtmlfile(Map<String,",
            "Object>",
            "input)",
            "{",
            "try{",
            "Configuration",
            "cfg",
            "=",
            "new",
            "Configuration();",
            "ClassTemplateLoader",
            "ctl",
            "=",
            "new",
            "ClassTemplateLoader(getClass(),",
            "\"/templates\");",
            "cfg.setTemplateLoader(ctl);",
            "Template",
            "template",
            "=",
            "cfg.getTemplate(\"acmeair-report.ftl\");",
            "Writer",
            "file",
            "=",
            "new",
            "FileWriter(new",
            "File(searchingLocation\n\t\t\t\t\t+",
            "System.getProperty(\"file.separator\")",
            "+",
            "RESULTS_FILE));",
            "template.process(input,",
            "file);",
            "file.flush();",
            "file.close();",
            "}catch(Exception",
            "e){",
            "e.printStackTrace();",
            "}",
            "}",
            "always",
            "call",
            "it",
            "before",
            "call",
            "generating",
            "multiple",
            "chart",
            "string",
            "trim",
            "trailing",
            "idle",
            "times",
            "from",
            "each",
            "of",
            "the",
            "individual",
            "results,",
            "then",
            "combine",
            "the",
            "results",
            "together",
            "to",
            "get",
            "the",
            "final",
            "tallies.",
            "*",
            "*",
            "Re-orders",
            "a",
            "given",
            "map",
            "to",
            "using",
            "an",
            "array",
            "of",
            "Strings.",
            "*",
            "Any",
            "remaining",
            "items",
            "in",
            "the",
            "map",
            "that",
            "was",
            "passed",
            "in",
            "will",
            "be",
            "appended",
            "to",
            "the",
            "end",
            "of",
            "*",
            "the",
            "map",
            "to",
            "be",
            "returned.",
            "*",
            "@param",
            "totalUrlMap",
            "the",
            "map",
            "to",
            "be",
            "re-ordered.",
            "*",
            "@param",
            "urls",
            "An",
            "array",
            "of",
            "Strings",
            "with",
            "the",
            "desired",
            "order",
            "for",
            "the",
            "map",
            "keys.",
            "*",
            "@return",
            "A",
            "LinkedHashMap",
            "with",
            "the",
            "keys",
            "in",
            "the",
            "order",
            "requested.",
            "*",
            "@see",
            "LinkedHashMap",
            "loop",
            "2nd",
            "time",
            "to",
            "get",
            "the",
            "remaining",
            "items",
            "*",
            "*",
            "Searches",
            "the",
            "map",
            "for",
            "the",
            "given",
            "jmeter",
            "testcase",
            "url",
            "key.",
            "*",
            "The",
            "passed",
            "in",
            "string",
            "is",
            "expected",
            "to",
            "contain",
            "all",
            "or",
            "part",
            "of",
            "the",
            "desired",
            "key.",
            "*",
            "for",
            "example",
            "\"QueryFlight\"",
            "could",
            "match",
            "both",
            "\"Mobile",
            "QueryFlight\"",
            "and",
            "\"Desktop",
            "QueryFlight\"",
            "or",
            "just",
            "\"QueryFlight\".",
            "*",
            "If",
            "multiple",
            "results",
            "are",
            "found,",
            "their",
            "totals",
            "are",
            "added",
            "togehter",
            "in",
            "the",
            "JtlTotals",
            "Object",
            "returned.",
            "*",
            "*",
            "@param",
            "url",
            "String,",
            "jMeter",
            "Testcase",
            "URL",
            "string",
            "to",
            "search",
            "for.",
            "*",
            "@param",
            "totalUrlMap",
            "Map",
            "containing",
            "Strings",
            "and",
            "JtlTotals",
            "results.",
            "*",
            "@return",
            "JtlTotals",
            "object.",
            "*",
            "@see",
            "JtlTotals",
            "*",
            "*",
            "Sets",
            "up",
            "a",
            "new",
            "NmonParser",
            "Object",
            "for",
            "parsing",
            "a",
            "given",
            "directory.",
            "*",
            "@param",
            "directory",
            "directory",
            "to",
            "search",
            "for",
            "nmon",
            "files.",
            "*",
            "@param",
            "chartTitle",
            "Name",
            "of",
            "the",
            "title",
            "for",
            "the",
            "chart",
            "to",
            "be",
            "generated.",
            "*",
            "@return",
            "NmonParser",
            "object"
        ]
    },
    "FlightsREST": {
        "methods": [
            "getTripFlights",
            "browseFlights"
        ],
        "method_calls": [
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getService",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "getFlightByAirportsAndDepartureDate",
                "class_name": "flightService"
            },
            {
                "method_name": "setFlightsOptions",
                "class_name": "toInfo"
            },
            {
                "method_name": "add",
                "class_name": "legs"
            },
            {
                "method_name": "setCurrentPage",
                "class_name": "toInfo"
            },
            {
                "method_name": "setHasMoreOptions",
                "class_name": "toInfo"
            },
            {
                "method_name": "setNumPages",
                "class_name": "toInfo"
            },
            {
                "method_name": "setPageSize",
                "class_name": "toInfo"
            },
            {
                "method_name": "setTripLegs",
                "class_name": "options"
            },
            {
                "method_name": "getFlightByAirportsAndDepartureDate",
                "class_name": "flightService"
            },
            {
                "method_name": "setFlightsOptions",
                "class_name": "retInfo"
            },
            {
                "method_name": "add",
                "class_name": "legs"
            },
            {
                "method_name": "setCurrentPage",
                "class_name": "retInfo"
            },
            {
                "method_name": "setHasMoreOptions",
                "class_name": "retInfo"
            },
            {
                "method_name": "setNumPages",
                "class_name": "retInfo"
            },
            {
                "method_name": "setPageSize",
                "class_name": "retInfo"
            },
            {
                "method_name": "setTripLegs",
                "class_name": "options"
            },
            {
                "method_name": "setTripFlights",
                "class_name": "options"
            },
            {
                "method_name": "getFlightByAirports",
                "class_name": "flightService"
            },
            {
                "method_name": "setFlightsOptions",
                "class_name": "toInfo"
            },
            {
                "method_name": "add",
                "class_name": "legs"
            },
            {
                "method_name": "setCurrentPage",
                "class_name": "toInfo"
            },
            {
                "method_name": "setHasMoreOptions",
                "class_name": "toInfo"
            },
            {
                "method_name": "setNumPages",
                "class_name": "toInfo"
            },
            {
                "method_name": "setPageSize",
                "class_name": "toInfo"
            },
            {
                "method_name": "setTripLegs",
                "class_name": "options"
            },
            {
                "method_name": "getFlightByAirports",
                "class_name": "flightService"
            },
            {
                "method_name": "setFlightsOptions",
                "class_name": "retInfo"
            },
            {
                "method_name": "add",
                "class_name": "legs"
            },
            {
                "method_name": "setCurrentPage",
                "class_name": "retInfo"
            },
            {
                "method_name": "setHasMoreOptions",
                "class_name": "retInfo"
            },
            {
                "method_name": "setNumPages",
                "class_name": "retInfo"
            },
            {
                "method_name": "setPageSize",
                "class_name": "retInfo"
            },
            {
                "method_name": "setTripLegs",
                "class_name": "options"
            },
            {
                "method_name": "setTripFlights",
                "class_name": "options"
            }
        ],
        "words": [
            "FlightsREST",
            "getTripFlights",
            "browseFlights",
            "flightService",
            "options",
            "legs",
            "toInfo",
            "toFlights",
            "retInfo",
            "retFlights",
            "options",
            "legs",
            "toInfo",
            "toFlights",
            "retInfo",
            "retFlights",
            "fromAirport",
            "toAirport",
            "fromDate",
            "returnDate",
            "oneWay",
            "fromAirport",
            "toAirport",
            "oneWay",
            "TODO:",
            "Consider",
            "a",
            "pure",
            "GET",
            "implementation",
            "of",
            "this",
            "service,",
            "but",
            "maybe",
            "not",
            "much",
            "value",
            "due",
            "to",
            "infrequent",
            "similar",
            "searches"
        ]
    },
    "BookingServiceImpl": {
        "methods": [
            "initialization",
            "bookFlight",
            "bookFlight",
            "getBooking",
            "cancelBooking",
            "getBookingsByUser",
            "count"
        ],
        "method_calls": [
            {
                "method_name": "getName",
                "class_name": "BookingService.class"
            },
            {
                "method_name": "getLogger",
                "class_name": "Logger"
            },
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getService",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getService",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "getMessage",
                "class_name": "e"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "getSessionManager",
                "class_name": "WXSSessionManager"
            },
            {
                "method_name": "getObjectGrid",
                "class_name": "WXSSessionManager.getSessionManager()"
            },
            {
                "method_name": "getSessionManager",
                "class_name": "WXSSessionManager"
            },
            {
                "method_name": "getMapSuffix",
                "class_name": "WXSSessionManager.getSessionManager()"
            },
            {
                "method_name": "getId",
                "class_name": "flightId"
            },
            {
                "method_name": "getFlightSegmentId",
                "class_name": "flightId"
            },
            {
                "method_name": "getFlightByFlightId",
                "class_name": "flightService"
            },
            {
                "method_name": "getCustomerByUsername",
                "class_name": "customerService"
            },
            {
                "method_name": "generate",
                "class_name": "keyGenerator"
            },
            {
                "method_name": "toString",
                "class_name": "keyGenerator.generate()"
            },
            {
                "method_name": "getPkey",
                "class_name": "newBooking"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "get",
                "class_name": "bookingMap"
            },
            {
                "method_name": "contains",
                "class_name": "bookingsByUser"
            },
            {
                "method_name": "add",
                "class_name": "bookingsByUser"
            },
            {
                "method_name": "upsert",
                "class_name": "bookingMap"
            },
            {
                "method_name": "isLoggable",
                "class_name": "logger"
            },
            {
                "method_name": "finer",
                "class_name": "logger"
            },
            {
                "method_name": "bookFlight",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getId",
                "class_name": "bookFlight(customerId, new FlightPKImpl(flightSegmentId, id))"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "get",
                "class_name": "bookingMap"
            },
            {
                "method_name": "getPkey",
                "class_name": "b"
            },
            {
                "method_name": "getId",
                "class_name": "b.getPkey()"
            },
            {
                "method_name": "equals",
                "class_name": "b.getPkey().getId()"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "get",
                "class_name": "bookingMap"
            },
            {
                "method_name": "getPkey",
                "class_name": "b"
            },
            {
                "method_name": "getId",
                "class_name": "b.getPkey()"
            },
            {
                "method_name": "equals",
                "class_name": "b.getPkey().getId()"
            },
            {
                "method_name": "add",
                "class_name": "newBookings"
            },
            {
                "method_name": "upsert",
                "class_name": "bookingMap"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "isTransactionActive",
                "class_name": "session"
            },
            {
                "method_name": "begin",
                "class_name": "session"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "get",
                "class_name": "bookingMap"
            },
            {
                "method_name": "add",
                "class_name": "bookingsList"
            },
            {
                "method_name": "commit",
                "class_name": "session"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "getIndex",
                "class_name": "objectMap"
            },
            {
                "method_name": "findAll",
                "class_name": "mapIndex"
            },
            {
                "method_name": "next",
                "class_name": "keyIterator"
            },
            {
                "method_name": "hasNext",
                "class_name": "keyIterator"
            }
        ],
        "words": [
            "BookingServiceImpl",
            "initialization",
            "bookFlight",
            "bookFlight",
            "getBooking",
            "cancelBooking",
            "getBookingsByUser",
            "count",
            "logger",
            "BOOKING_MAP_NAME",
            "BASE_BOOKING_MAP_NAME",
            "og",
            "keyGenerator",
            "flightService",
            "customerService",
            "f",
            "c",
            "newBooking",
            "key",
            "session",
            "bookingMap",
            "bookingsByUser",
            "session",
            "bookingMap",
            "bookingsByUser",
            "b",
            "session",
            "bookingMap",
            "bookingsByUser",
            "found",
            "newBookings",
            "b",
            "session",
            "startedTran",
            "bookingMap",
            "bookingsByUser",
            "bookingsList",
            "b",
            "session",
            "objectMap",
            "mapIndex",
            "keyIterator",
            "result",
            "e",
            "e",
            "customerId",
            "flightId",
            "customerId",
            "flightSegmentId",
            "id",
            "e",
            "user",
            "id",
            "e",
            "user",
            "id",
            "e",
            "user",
            "e",
            "e",
            "e",
            "We",
            "still",
            "delegate",
            "to",
            "the",
            "flight",
            "and",
            "customer",
            "service",
            "for",
            "the",
            "map",
            "access",
            "than",
            "getting",
            "the",
            "map",
            "instance",
            "directly",
            "Session",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "Session",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "return",
            "(Booking)bookingMap.get(new",
            "BookingPK(user,",
            "id));",
            "Session",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "Session",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "int",
            "partitions",
            "=",
            "og.getMap(BOOKING_MAP_NAME).getPartitionManager().getNumOfPartitions();\n\t\t\tLong",
            "result",
            "=",
            "0L;\n\t\t\tObjectQuery",
            "query",
            "=",
            "og.getSession().createObjectQuery(\"SELECT",
            "COUNT",
            "(",
            "o",
            ")",
            "FROM",
            "\"",
            "+",
            "BOOKING_MAP_NAME",
            "+",
            "\"",
            "o",
            "\");\n\t\t\tfor(int",
            "i",
            "=",
            "0;",
            "i<partitions;i++){\n\t\t\t\tquery.setPartition(i);\n\t\t\t\tresult",
            "+=",
            "(Long)",
            "query.getSingleResult();\n\t\t\t}"
        ]
    },
    "BookingReceiptInfo": {
        "methods": [
            "getDepartBookingId",
            "setDepartBookingId",
            "getReturnBookingId",
            "setReturnBookingId",
            "isOneWay",
            "setOneWay",
            "toString"
        ],
        "method_calls": [],
        "words": [
            "BookingReceiptInfo",
            "getDepartBookingId",
            "setDepartBookingId",
            "getReturnBookingId",
            "setReturnBookingId",
            "isOneWay",
            "setOneWay",
            "toString",
            "departBookingId",
            "returnBookingId",
            "oneWay",
            "departBookingId",
            "returnBookingId",
            "oneWay",
            "departBookingId",
            "returnBookingId",
            "oneWay"
        ]
    },
    "ResultParserHelper": {
        "methods": [
            "getColor",
            "scaleDown",
            "scaleInputsData"
        ],
        "method_calls": [
            {
                "method_name": "size",
                "class_name": "testList"
            },
            {
                "method_name": "size",
                "class_name": "testList"
            },
            {
                "method_name": "pow",
                "class_name": "java.lang.Math"
            },
            {
                "method_name": "get",
                "class_name": "testList"
            },
            {
                "method_name": "add",
                "class_name": "newList"
            },
            {
                "method_name": "get",
                "class_name": "testList"
            },
            {
                "method_name": "add",
                "class_name": "newList"
            },
            {
                "method_name": "get",
                "class_name": "testList"
            },
            {
                "method_name": "add",
                "class_name": "newList"
            },
            {
                "method_name": "size",
                "class_name": "inputList"
            },
            {
                "method_name": "get",
                "class_name": "inputList"
            },
            {
                "method_name": "size",
                "class_name": "inputList"
            }
        ],
        "words": [
            "ResultParserHelper",
            "getColor",
            "scaleDown",
            "scaleInputsData",
            "colors",
            "listLastItemIndex",
            "a",
            "newList",
            "m",
            "inputs",
            "i",
            "i",
            "testList",
            "scaleDownFactor",
            "inputList",
            "scale_factor"
        ]
    },
    "AirportCodeMappingImpl": {
        "methods": [
            "getAirportCode",
            "setAirportCode",
            "getAirportName",
            "setAirportName"
        ],
        "method_calls": [],
        "words": [
            "AirportCodeMappingImpl",
            "getAirportCode",
            "setAirportCode",
            "getAirportName",
            "setAirportName",
            "serialVersionUID",
            "_id",
            "airportName",
            "airportCode",
            "airportName",
            "airportCode",
            "airportName"
        ]
    },
    "NmonParser": {
        "methods": [
            "processFile",
            "getFileName",
            "setFileName",
            "processLine"
        ],
        "method_calls": [
            {
                "method_name": "setMultipleYAxisLabel",
                "class_name": "super"
            },
            {
                "method_name": "getPath",
                "class_name": "file"
            },
            {
                "method_name": "getData",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getInputList",
                "class_name": "result"
            },
            {
                "method_name": "scaleDown",
                "class_name": "ResultParserHelper"
            },
            {
                "method_name": "processData",
                "class_name": "super"
            },
            {
                "method_name": "getTitle",
                "class_name": "result"
            },
            {
                "method_name": "setTitle",
                "class_name": "individualResults"
            },
            {
                "method_name": "getInputList",
                "class_name": "result"
            },
            {
                "method_name": "scaleDown",
                "class_name": "ResultParserHelper"
            },
            {
                "method_name": "setInputList",
                "class_name": "individualResults"
            },
            {
                "method_name": "getTimeList",
                "class_name": "result"
            },
            {
                "method_name": "scaleDown",
                "class_name": "ResultParserHelper"
            },
            {
                "method_name": "setTimeList",
                "class_name": "individualResults"
            },
            {
                "method_name": "getMultipleChartResults",
                "class_name": "super"
            },
            {
                "method_name": "getResults",
                "class_name": "super.getMultipleChartResults()"
            },
            {
                "method_name": "add",
                "class_name": "super.getMultipleChartResults().getResults()"
            },
            {
                "method_name": "startsWith",
                "class_name": "strLine"
            },
            {
                "method_name": "split",
                "class_name": "strLine"
            },
            {
                "method_name": "trim",
                "class_name": "tokens[2"
            },
            {
                "method_name": "setTitle",
                "class_name": "results"
            },
            {
                "method_name": "indexOf",
                "class_name": "strLine"
            },
            {
                "method_name": "split",
                "class_name": "strLine"
            },
            {
                "method_name": "trim",
                "class_name": "tokens[2"
            },
            {
                "method_name": "getTimeList",
                "class_name": "results"
            },
            {
                "method_name": "add",
                "class_name": "results.getTimeList()"
            },
            {
                "method_name": "indexOf",
                "class_name": "strLine"
            },
            {
                "method_name": "indexOf",
                "class_name": "strLine"
            },
            {
                "method_name": "split",
                "class_name": "strLine"
            },
            {
                "method_name": "trim",
                "class_name": "tokens[2"
            },
            {
                "method_name": "trim",
                "class_name": "tokens[3"
            },
            {
                "method_name": "parseDouble",
                "class_name": "Double"
            },
            {
                "method_name": "parseDouble",
                "class_name": "Double"
            },
            {
                "method_name": "getInputList",
                "class_name": "results"
            },
            {
                "method_name": "add",
                "class_name": "results.getInputList()"
            }
        ],
        "words": [
            "NmonParser",
            "processFile",
            "getFileName",
            "setFileName",
            "processLine",
            "nmonFileName",
            "result",
            "individualResults",
            "tokens",
            "tokens",
            "tokens",
            "user",
            "sys",
            "userDouble",
            "sysDouble",
            "file",
            "fileName",
            "results",
            "strLine",
            "default",
            "label"
        ]
    },
    "CustomerLoader": {
        "methods": ["loadCustomers"],
        "method_calls": [
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getService",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "createAddress",
                "class_name": "customerService"
            },
            {
                "method_name": "createCustomer",
                "class_name": "customerService"
            }
        ],
        "words": [
            "CustomerLoader",
            "loadCustomers",
            "customerService",
            "address",
            "ii",
            "numCustomers"
        ]
    },
    "FlightServiceImpl": {
        "methods": [
            "initialization",
            "countFlights",
            "countAirports",
            "countFlightSegments",
            "getFlight",
            "getFlightSegment",
            "getFlightBySegment",
            "areDatesSameWithNoTime",
            "getDateWithNoTime",
            "storeAirportMapping",
            "createAirportCodeMapping",
            "createNewFlight",
            "storeFlightSegment",
            "storeFlightSegment"
        ],
        "method_calls": [
            {
                "method_name": "getName",
                "class_name": "BookingService.class"
            },
            {
                "method_name": "getLogger",
                "class_name": "Logger"
            },
            {
                "method_name": "getMessage",
                "class_name": "e"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "getSessionManager",
                "class_name": "WXSSessionManager"
            },
            {
                "method_name": "getObjectGrid",
                "class_name": "WXSSessionManager.getSessionManager()"
            },
            {
                "method_name": "getSessionManager",
                "class_name": "WXSSessionManager"
            },
            {
                "method_name": "getMapSuffix",
                "class_name": "WXSSessionManager.getSessionManager()"
            },
            {
                "method_name": "getSessionManager",
                "class_name": "WXSSessionManager"
            },
            {
                "method_name": "getMapSuffix",
                "class_name": "WXSSessionManager.getSessionManager()"
            },
            {
                "method_name": "getSessionManager",
                "class_name": "WXSSessionManager"
            },
            {
                "method_name": "getMapSuffix",
                "class_name": "WXSSessionManager.getSessionManager()"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "getIndex",
                "class_name": "objectMap"
            },
            {
                "method_name": "findAll",
                "class_name": "mapIndex"
            },
            {
                "method_name": "next",
                "class_name": "keyIterator"
            },
            {
                "method_name": "hasNext",
                "class_name": "keyIterator"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "getIndex",
                "class_name": "objectMap"
            },
            {
                "method_name": "findAll",
                "class_name": "mapIndex"
            },
            {
                "method_name": "next",
                "class_name": "keyIterator"
            },
            {
                "method_name": "hasNext",
                "class_name": "keyIterator"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "getIndex",
                "class_name": "objectMap"
            },
            {
                "method_name": "findAll",
                "class_name": "mapIndex"
            },
            {
                "method_name": "next",
                "class_name": "keyIterator"
            },
            {
                "method_name": "hasNext",
                "class_name": "keyIterator"
            },
            {
                "method_name": "isLoggable",
                "class_name": "logger"
            },
            {
                "method_name": "finer",
                "class_name": "logger"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "get",
                "class_name": "flightMap"
            },
            {
                "method_name": "getFlightId",
                "class_name": "flight"
            },
            {
                "method_name": "equals",
                "class_name": "flight.getFlightId()"
            },
            {
                "method_name": "warning",
                "class_name": "logger"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "get",
                "class_name": "flightSegmentMap"
            },
            {
                "method_name": "getDestPort",
                "class_name": "fs"
            },
            {
                "method_name": "equals",
                "class_name": "fs.getDestPort()"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "isTransactionActive",
                "class_name": "session"
            },
            {
                "method_name": "begin",
                "class_name": "session"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "getFlightName",
                "class_name": "segment"
            },
            {
                "method_name": "get",
                "class_name": "flightMap"
            },
            {
                "method_name": "setFlightSegment",
                "class_name": "f"
            },
            {
                "method_name": "add",
                "class_name": "flights"
            },
            {
                "method_name": "getScheduledDepartureTime",
                "class_name": "f"
            },
            {
                "method_name": "areDatesSameWithNoTime",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setFlightSegment",
                "class_name": "f"
            },
            {
                "method_name": "add",
                "class_name": "flights"
            },
            {
                "method_name": "commit",
                "class_name": "session"
            },
            {
                "method_name": "getDateWithNoTime",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getDateWithNoTime",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "equals",
                "class_name": "getDateWithNoTime(d1)"
            },
            {
                "method_name": "getInstance",
                "class_name": "Calendar"
            },
            {
                "method_name": "setTime",
                "class_name": "c"
            },
            {
                "method_name": "set",
                "class_name": "c"
            },
            {
                "method_name": "set",
                "class_name": "c"
            },
            {
                "method_name": "set",
                "class_name": "c"
            },
            {
                "method_name": "set",
                "class_name": "c"
            },
            {
                "method_name": "getTime",
                "class_name": "c"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "getAirportCode",
                "class_name": "mapping"
            },
            {
                "method_name": "upsert",
                "class_name": "airportCodeMappingMap"
            },
            {
                "method_name": "generate",
                "class_name": "keyGenerator"
            },
            {
                "method_name": "toString",
                "class_name": "keyGenerator.generate()"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "get",
                "class_name": "flightMap"
            },
            {
                "method_name": "contains",
                "class_name": "flightsBySegment"
            },
            {
                "method_name": "add",
                "class_name": "flightsBySegment"
            },
            {
                "method_name": "upsert",
                "class_name": "flightMap"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "getOriginPort",
                "class_name": "flightSeg"
            },
            {
                "method_name": "get",
                "class_name": "flightSegmentMap"
            },
            {
                "method_name": "contains",
                "class_name": "segmentsByOrigPort"
            },
            {
                "method_name": "add",
                "class_name": "segmentsByOrigPort"
            },
            {
                "method_name": "getOriginPort",
                "class_name": "flightSeg"
            },
            {
                "method_name": "upsert",
                "class_name": "flightSegmentMap"
            },
            {
                "method_name": "storeFlightSegment",
                "class_name": "Optional.empty"
            }
        ],
        "words": [
            "FlightServiceImpl",
            "initialization",
            "countFlights",
            "countAirports",
            "countFlightSegments",
            "getFlight",
            "getFlightSegment",
            "getFlightBySegment",
            "areDatesSameWithNoTime",
            "getDateWithNoTime",
            "storeAirportMapping",
            "createAirportCodeMapping",
            "createNewFlight",
            "storeFlightSegment",
            "storeFlightSegment",
            "FLIGHT_MAP_NAME",
            "FLIGHT_SEGMENT_MAP_NAME",
            "AIRPORT_CODE_MAPPING_MAP_NAME",
            "BASE_FLIGHT_MAP_NAME",
            "BASE_FLIGHT_SEGMENT_MAP_NAME",
            "BASE_AIRPORT_CODE_MAPPING_MAP_NAME",
            "logger",
            "og",
            "keyGenerator",
            "session",
            "objectMap",
            "mapIndex",
            "keyIterator",
            "result",
            "session",
            "objectMap",
            "mapIndex",
            "keyIterator",
            "result",
            "session",
            "objectMap",
            "mapIndex",
            "keyIterator",
            "result",
            "session",
            "flightMap",
            "flightsBySegment",
            "flight",
            "session",
            "segment",
            "flightSegmentMap",
            "segmentsByOrigPort",
            "fs",
            "flights",
            "session",
            "startedTran",
            "flightMap",
            "flightsBySegment",
            "f",
            "f",
            "c",
            "session",
            "airportCodeMappingMap",
            "acm",
            "id",
            "flight",
            "session",
            "flightMap",
            "flightsBySegment",
            "session",
            "flightSegmentMap",
            "segmentsByOrigPort",
            "flightSeg",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "flightId",
            "flightSegmentId",
            "e",
            "fromAirport",
            "toAirport",
            "e",
            "segment",
            "deptDate",
            "d1",
            "d2",
            "date",
            "e",
            "mapping",
            "airportCode",
            "airportName",
            "e",
            "flightSegmentId",
            "scheduledDepartureTime",
            "scheduledArrivalTime",
            "firstClassBaseCost",
            "economyClassBaseCost",
            "numFirstClassSeats",
            "numEconomyClassSeats",
            "airplaneTypeId",
            "e",
            "flightSeg",
            "flightName",
            "origPort",
            "destPort",
            "miles",
            "int",
            "partitions",
            "=",
            "og.getMap(FLIGHT_MAP_NAME).getPartitionManager().getNumOfPartitions();\n\t\t\tLong",
            "result",
            "=",
            "0L;\n\t\t\tObjectQuery",
            "query",
            "=",
            "og.getSession().createObjectQuery(\"SELECT",
            "COUNT",
            "(",
            "o",
            ")",
            "FROM",
            "\"",
            "+",
            "FLIGHT_MAP_NAME",
            "+",
            "\"",
            "o",
            "\");\n\t\t\tfor(int",
            "i",
            "=",
            "0;",
            "i<partitions;i++){\n\t\t\t\tquery.setPartition(i);\n\t\t\t\tresult",
            "+=",
            "(Long)",
            "query.getSingleResult();\n\t\t\t}",
            "int",
            "partitions",
            "=",
            "og.getMap(FLIGHT_SEGMENT_MAP_NAME).getPartitionManager().getNumOfPartitions();\n\t\t\tLong",
            "result",
            "=",
            "0L;\n\t\t\tObjectQuery",
            "query",
            "=",
            "og.getSession().createObjectQuery(\"SELECT",
            "COUNT",
            "(",
            "o",
            ")",
            "FROM",
            "\"",
            "+",
            "FLIGHT_SEGMENT_MAP_NAME",
            "+",
            "\"",
            "o",
            "\");\n\t\t\tfor(int",
            "i",
            "=",
            "0;",
            "i<partitions;i++){\n\t\t\t\tquery.setPartition(i);\n\t\t\t\tresult",
            "+=",
            "(Long)",
            "query.getSingleResult();\n\t\t\t}",
            "public",
            "Flight",
            "getFlightByFlightKey(FlightPK",
            "key)",
            "{\n\t\ttry",
            "{\n\t\t\tFlight",
            "flight;\n\t\t\tflight",
            "=",
            "flightPKtoFlightCache.get(key);\n\t\t\tif",
            "(flight",
            "==",
            "null)",
            "{\n\t\t\t\tSession",
            "session",
            "=",
            "sessionManager.getObjectGridSession();\n\t\t\t\tSession",
            "session",
            "=",
            "og.getSession();\n\t\t\t\tObjectMap",
            "flightMap",
            "=",
            "session.getMap(FLIGHT_MAP_NAME);\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tHashSet<Flight>",
            "flightsBySegment",
            "=",
            "(HashSet<Flight>)flightMap.get(key.getFlightSegmentId());\n\t\t\t\tfor",
            "(Flight",
            "f",
            ":",
            "flightsBySegment)",
            "{\n\t\t\t\t\tif",
            "(f.getPkey().getId().equals(key.getId()))",
            "{\n\t\t\t\t\t\tflightPKtoFlightCache.putIfAbsent(key,",
            "f);\n\t\t\t\t\t\tflight",
            "=",
            "f;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn",
            "flight;\n\t\t}",
            "catch",
            "(Exception",
            "e)",
            "{\n\t\t\tthrow",
            "new",
            "RuntimeException(e);\n\t\t}\n\t}",
            "Session",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "boolean",
            "startedTran",
            "=",
            "false;",
            "if",
            "(startedTran)",
            "session.commit();",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "if",
            "(!session.isTransactionActive())",
            "{\n\t\t\tstartedTran",
            "=",
            "true;\n\t\t\tsession.begin();\n\t\t}",
            "put",
            "a",
            "sentinel",
            "value",
            "of",
            "a",
            "non-populated",
            "flightsegment",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "Session",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "flightMap.insert(flight.getPkey(),",
            "flight);",
            "Session",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "return",
            "flight;",
            "Session",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "TODO:",
            "Consider",
            "moving",
            "this",
            "to",
            "a",
            "ArrayList",
            "-",
            "List",
            "??"
        ]
    },
    "TransactionService": {
        "methods": ["prepareForTransaction"],
        "method_calls": [],
        "words": [
            "TransactionService",
            "prepareForTransaction"
        ]
    },
    "BookingPKInfo": {
        "methods": [
            "getId",
            "setId",
            "getCustomerId",
            "setCustomerId"
        ],
        "method_calls": [],
        "words": [
            "BookingPKInfo",
            "getId",
            "setId",
            "getCustomerId",
            "setCustomerId",
            "id",
            "customerId",
            "customerId",
            "id",
            "id",
            "customerId"
        ]
    },
    "TripFlightOptions": {
        "methods": [
            "getTripLegs",
            "setTripLegs",
            "getTripFlights",
            "setTripFlights"
        ],
        "method_calls": [],
        "words": [
            "TripFlightOptions",
            "getTripLegs",
            "setTripLegs",
            "getTripFlights",
            "setTripFlights",
            "tripLegs",
            "tripFlights",
            "tripLegs",
            "tripFlights"
        ]
    },
    "CustomerREST": {
        "methods": [
            "validate",
            "getCustomer",
            "putCustomer"
        ],
        "method_calls": [
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getService",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request"
            },
            {
                "method_name": "equals",
                "class_name": "customerid"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "validate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "status",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.status(Response.Status.FORBIDDEN)"
            },
            {
                "method_name": "getCustomerByUsername",
                "class_name": "customerService"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(customerDTO)"
            },
            {
                "method_name": "getUsername",
                "class_name": "customer"
            },
            {
                "method_name": "validate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "status",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.status(Response.Status.FORBIDDEN)"
            },
            {
                "method_name": "getUsername",
                "class_name": "customer"
            },
            {
                "method_name": "getPassword",
                "class_name": "customer"
            },
            {
                "method_name": "getCustomerByUsernameAndPassword",
                "class_name": "customerService"
            },
            {
                "method_name": "status",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.status(Response.Status.FORBIDDEN)"
            },
            {
                "method_name": "getAddress",
                "class_name": "customerFromDB"
            },
            {
                "method_name": "getAddress",
                "class_name": "customer"
            },
            {
                "method_name": "getStreetAddress1",
                "class_name": "customer.getAddress()"
            },
            {
                "method_name": "setStreetAddress1",
                "class_name": "addressFromDB"
            },
            {
                "method_name": "getAddress",
                "class_name": "customer"
            },
            {
                "method_name": "getStreetAddress2",
                "class_name": "customer.getAddress()"
            },
            {
                "method_name": "getAddress",
                "class_name": "customer"
            },
            {
                "method_name": "getStreetAddress2",
                "class_name": "customer.getAddress()"
            },
            {
                "method_name": "setStreetAddress2",
                "class_name": "addressFromDB"
            },
            {
                "method_name": "getAddress",
                "class_name": "customer"
            },
            {
                "method_name": "getCity",
                "class_name": "customer.getAddress()"
            },
            {
                "method_name": "setCity",
                "class_name": "addressFromDB"
            },
            {
                "method_name": "getAddress",
                "class_name": "customer"
            },
            {
                "method_name": "getStateProvince",
                "class_name": "customer.getAddress()"
            },
            {
                "method_name": "setStateProvince",
                "class_name": "addressFromDB"
            },
            {
                "method_name": "getAddress",
                "class_name": "customer"
            },
            {
                "method_name": "getCountry",
                "class_name": "customer.getAddress()"
            },
            {
                "method_name": "setCountry",
                "class_name": "addressFromDB"
            },
            {
                "method_name": "getAddress",
                "class_name": "customer"
            },
            {
                "method_name": "getPostalCode",
                "class_name": "customer.getAddress()"
            },
            {
                "method_name": "setPostalCode",
                "class_name": "addressFromDB"
            },
            {
                "method_name": "getPhoneNumber",
                "class_name": "customer"
            },
            {
                "method_name": "setPhoneNumber",
                "class_name": "customerFromDB"
            },
            {
                "method_name": "getPhoneNumberType",
                "class_name": "customer"
            },
            {
                "method_name": "valueOf",
                "class_name": "Customer.PhoneType"
            },
            {
                "method_name": "setPhoneNumberType",
                "class_name": "customerFromDB"
            },
            {
                "method_name": "updateCustomer",
                "class_name": "customerService"
            },
            {
                "method_name": "setPassword",
                "class_name": "customerFromDB"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(customerFromDB)"
            }
        ],
        "words": [
            "CustomerREST",
            "validate",
            "getCustomer",
            "putCustomer",
            "customerService",
            "request",
            "loginUser",
            "customer",
            "customerDTO",
            "customerFromDB",
            "addressFromDB",
            "customerid",
            "e",
            "sessionid",
            "customerid",
            "sessionid",
            "customer",
            "make",
            "sure",
            "the",
            "user",
            "isn't",
            "trying",
            "to",
            "update",
            "a",
            "customer",
            "other",
            "than",
            "the",
            "one",
            "currently",
            "logged",
            "in",
            "Customer",
            "either",
            "the",
            "customer",
            "doesn't",
            "exist",
            "or",
            "the",
            "password",
            "is",
            "wrong"
        ]
    },
    "Booking": {
        "methods": [
            "getBookingId",
            "getFlightId",
            "getCustomerId",
            "getDateOfBooking"
        ],
        "method_calls": [],
        "words": [
            "Booking",
            "getBookingId",
            "getFlightId",
            "getCustomerId",
            "getDateOfBooking"
        ]
    },
    "BigIntegerConverter": {
        "methods": [
            "encode",
            "decode"
        ],
        "method_calls": [
            {
                "method_name": "toString",
                "class_name": "value"
            },
            {
                "method_name": "toString",
                "class_name": "fromDBObject"
            }
        ],
        "words": [
            "BigIntegerConverter",
            "encode",
            "decode",
            "value",
            "optionalExtraInfo",
            "targetClass",
            "fromDBObject",
            "optionalExtraInfo"
        ]
    },
    "JmeterSummariserParser": {
        "methods": [
            "processFile",
            "getFileName",
            "setFileName",
            "getTestDate",
            "processLine"
        ],
        "method_calls": [
            {
                "method_name": "getProperty",
                "class_name": "System"
            },
            {
                "method_name": "getPath",
                "class_name": "file"
            },
            {
                "method_name": "getData",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getInputList",
                "class_name": "result"
            },
            {
                "method_name": "scaleDown",
                "class_name": "ResultParserHelper"
            },
            {
                "method_name": "processData",
                "class_name": "super"
            },
            {
                "method_name": "getTitle",
                "class_name": "result"
            },
            {
                "method_name": "getName",
                "class_name": "file"
            },
            {
                "method_name": "setTitle",
                "class_name": "individualResults"
            },
            {
                "method_name": "getTitle",
                "class_name": "result"
            },
            {
                "method_name": "setTitle",
                "class_name": "individualResults"
            },
            {
                "method_name": "getInputList",
                "class_name": "result"
            },
            {
                "method_name": "scaleDown",
                "class_name": "ResultParserHelper"
            },
            {
                "method_name": "setInputList",
                "class_name": "individualResults"
            },
            {
                "method_name": "getTimeList",
                "class_name": "result"
            },
            {
                "method_name": "scaleDown",
                "class_name": "ResultParserHelper"
            },
            {
                "method_name": "setTimeList",
                "class_name": "individualResults"
            },
            {
                "method_name": "getMultipleChartResults",
                "class_name": "super"
            },
            {
                "method_name": "getResults",
                "class_name": "super.getMultipleChartResults()"
            },
            {
                "method_name": "add",
                "class_name": "super.getMultipleChartResults().getResults()"
            },
            {
                "method_name": "indexOf",
                "class_name": "strLine"
            },
            {
                "method_name": "indexOf",
                "class_name": "strLine"
            },
            {
                "method_name": "indexOf",
                "class_name": "strLine"
            },
            {
                "method_name": "indexOf",
                "class_name": "strLine"
            },
            {
                "method_name": "substring",
                "class_name": "strLine"
            },
            {
                "method_name": "setTitle",
                "class_name": "results"
            },
            {
                "method_name": "split",
                "class_name": "strLine"
            },
            {
                "method_name": "trim",
                "class_name": "tokens[1"
            },
            {
                "method_name": "getTimeList",
                "class_name": "results"
            },
            {
                "method_name": "add",
                "class_name": "results.getTimeList()"
            },
            {
                "method_name": "trim",
                "class_name": "tokens[0"
            },
            {
                "method_name": "indexOf",
                "class_name": "strLine"
            },
            {
                "method_name": "indexOf",
                "class_name": "strLine"
            },
            {
                "method_name": "substring",
                "class_name": "strLine"
            },
            {
                "method_name": "trim",
                "class_name": "strLine.substring(startposition + 1, endposition)"
            },
            {
                "method_name": "parseDouble",
                "class_name": "Double"
            },
            {
                "method_name": "getInputList",
                "class_name": "results"
            },
            {
                "method_name": "add",
                "class_name": "results.getInputList()"
            }
        ],
        "words": [
            "JmeterSummariserParser",
            "processFile",
            "getFileName",
            "setFileName",
            "getTestDate",
            "processLine",
            "SKIP_JMETER_DROPOUTS",
            "jmeterFileName",
            "testDate",
            "result",
            "individualResults",
            "startIndex",
            "endIndex",
            "name",
            "tokens",
            "endposition",
            "startposition",
            "thoughputS",
            "throughput",
            "file",
            "fileName",
            "results",
            "strLine"
        ]
    },
    "ServiceLocator": {
        "methods": [
            "instance",
            "initialization",
            "updateService",
            "getService",
            "getServices",
            "getServiceType"
        ],
        "method_calls": [
            {
                "method_name": "getName",
                "class_name": "ServiceLocator.class"
            },
            {
                "method_name": "getLogger",
                "class_name": "Logger"
            },
            {
                "method_name": "get",
                "class_name": "singletonServiceLocator"
            },
            {
                "method_name": "get",
                "class_name": "singletonServiceLocator"
            },
            {
                "method_name": "set",
                "class_name": "singletonServiceLocator"
            },
            {
                "method_name": "get",
                "class_name": "singletonServiceLocator"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "lookup",
                "class_name": "new InitialContext()"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "lookup",
                "class_name": "new InitialContext()"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "replace",
                "class_name": "REPOSITORY_LOOKUP_KEY"
            },
            {
                "method_name": "lookup",
                "class_name": "context"
            },
            {
                "method_name": "lookup",
                "class_name": "envContext"
            },
            {
                "method_name": "lookup",
                "class_name": "context"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "getProperty",
                "class_name": "System"
            },
            {
                "method_name": "getenv",
                "class_name": "System"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "lookup",
                "class_name": "new InitialContext()"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "lookup",
                "class_name": "new InitialContext()"
            },
            {
                "method_name": "getenv",
                "class_name": "System"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "parse",
                "class_name": "JSONValue"
            },
            {
                "method_name": "toJSONString",
                "class_name": "((JSONObject) jsonObject)"
            },
            {
                "method_name": "fine",
                "class_name": "logger"
            },
            {
                "method_name": "startsWith",
                "class_name": "key"
            },
            {
                "method_name": "startsWith",
                "class_name": "key"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "startsWith",
                "class_name": "key"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "startsWith",
                "class_name": "key"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "startsWith",
                "class_name": "key"
            },
            {
                "method_name": "startsWith",
                "class_name": "key"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "startsWith",
                "class_name": "key"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "startsWith",
                "class_name": "key"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "keySet",
                "class_name": "json"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "warning",
                "class_name": "logger"
            },
            {
                "method_name": "getName",
                "class_name": "clazz"
            },
            {
                "method_name": "fine",
                "class_name": "logger"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "getBeans",
                "class_name": "beanManager"
            },
            {
                "method_name": "getBeanClass",
                "class_name": "bean"
            },
            {
                "method_name": "getName",
                "class_name": "bean.getBeanClass()"
            },
            {
                "method_name": "fine",
                "class_name": "logger"
            },
            {
                "method_name": "annotationType",
                "class_name": "qualifer"
            },
            {
                "method_name": "getName",
                "class_name": "qualifer.annotationType()"
            },
            {
                "method_name": "getName",
                "class_name": "DataService.class"
            },
            {
                "method_name": "equalsIgnoreCase",
                "class_name": "DataService.class.getName()"
            },
            {
                "method_name": "name",
                "class_name": "service"
            },
            {
                "method_name": "description",
                "class_name": "service"
            },
            {
                "method_name": "fine",
                "class_name": "logger"
            },
            {
                "method_name": "name",
                "class_name": "service"
            },
            {
                "method_name": "equalsIgnoreCase",
                "class_name": "serviceType"
            },
            {
                "method_name": "createCreationalContext",
                "class_name": "beanManager"
            },
            {
                "method_name": "getReference",
                "class_name": "beanManager"
            },
            {
                "method_name": "warning",
                "class_name": "logger"
            },
            {
                "method_name": "annotationType",
                "class_name": "qualifer"
            },
            {
                "method_name": "getName",
                "class_name": "qualifer.annotationType()"
            },
            {
                "method_name": "getName",
                "class_name": "Default.class"
            },
            {
                "method_name": "equalsIgnoreCase",
                "class_name": "Default.class.getName()"
            },
            {
                "method_name": "createCreationalContext",
                "class_name": "beanManager"
            },
            {
                "method_name": "getReference",
                "class_name": "beanManager"
            },
            {
                "method_name": "getQualifiers",
                "class_name": "bean"
            },
            {
                "method_name": "getName",
                "class_name": "clazz"
            },
            {
                "method_name": "warning",
                "class_name": "logger"
            },
            {
                "method_name": "fine",
                "class_name": "logger"
            },
            {
                "method_name": "getBeans",
                "class_name": "beanManager"
            },
            {
                "method_name": "annotationType",
                "class_name": "qualifer"
            },
            {
                "method_name": "getName",
                "class_name": "qualifer.annotationType()"
            },
            {
                "method_name": "getName",
                "class_name": "DataService.class"
            },
            {
                "method_name": "equalsIgnoreCase",
                "class_name": "DataService.class.getName()"
            },
            {
                "method_name": "name",
                "class_name": "service"
            },
            {
                "method_name": "description",
                "class_name": "service"
            },
            {
                "method_name": "fine",
                "class_name": "logger"
            },
            {
                "method_name": "name",
                "class_name": "service"
            },
            {
                "method_name": "description",
                "class_name": "service"
            },
            {
                "method_name": "put",
                "class_name": "services"
            },
            {
                "method_name": "getQualifiers",
                "class_name": "bean"
            }
        ],
        "words": [
            "ServiceLocator",
            "instance",
            "initialization",
            "updateService",
            "getService",
            "getServices",
            "getServiceType",
            "REPOSITORY_LOOKUP_KEY",
            "serviceType",
            "logger",
            "singletonServiceLocator",
            "beanManager",
            "type",
            "lookup",
            "context",
            "envContext",
            "vcapJSONString",
            "jsonObject",
            "json",
            "key",
            "k",
            "serialVersionUID",
            "beans",
            "service",
            "ctx",
            "ctx",
            "qualifer",
            "bean",
            "services",
            "serialVersionUID",
            "beans",
            "service",
            "qualifer",
            "bean",
            "e",
            "e",
            "serviceName",
            "e",
            "e",
            "e",
            "e",
            "clazz",
            "e.printStackTrace();",
            "e.printStackTrace();",
            "*",
            "*",
            "Retrieves",
            "the",
            "services",
            "that",
            "are",
            "available",
            "for",
            "use",
            "with",
            "the",
            "description",
            "for",
            "each",
            "service.",
            "*",
            "The",
            "Services",
            "are",
            "determined",
            "by",
            "looking",
            "up",
            "all",
            "of",
            "the",
            "implementations",
            "of",
            "the",
            "*",
            "Customer",
            "Service",
            "interface",
            "that",
            "are",
            "using",
            "the",
            "DataService",
            "qualifier",
            "annotation.",
            "*",
            "The",
            "DataService",
            "annotation",
            "contains",
            "the",
            "service",
            "name",
            "and",
            "description",
            "information.",
            "*",
            "@return",
            "Map",
            "containing",
            "a",
            "list",
            "of",
            "services",
            "available",
            "and",
            "a",
            "description",
            "of",
            "each",
            "one.",
            "*",
            "*",
            "The",
            "type",
            "of",
            "service",
            "implementation",
            "that",
            "the",
            "application",
            "is",
            "*",
            "currently",
            "configured",
            "to",
            "use.",
            "*",
            "*",
            "@return",
            "The",
            "type",
            "of",
            "service",
            "in",
            "use,",
            "or",
            "\"default\"",
            "if",
            "no",
            "service",
            "has",
            "been",
            "set."
        ]
    },
    "FlightInfo": {
        "methods": [
            "get_id",
            "set_id",
            "getFlightSegmentId",
            "setFlightSegmentId",
            "getScheduledDepartureTime",
            "setScheduledDepartureTime",
            "getScheduledArrivalTime",
            "setScheduledArrivalTime",
            "getFirstClassBaseCost",
            "setFirstClassBaseCost",
            "getEconomyClassBaseCost",
            "setEconomyClassBaseCost",
            "getNumFirstClassSeats",
            "setNumFirstClassSeats",
            "getNumEconomyClassSeats",
            "setNumEconomyClassSeats",
            "getAirplaneTypeId",
            "setAirplaneTypeId",
            "getFlightSegment",
            "setFlightSegment",
            "getPkey"
        ],
        "method_calls": [
            {
                "method_name": "getFlightId",
                "class_name": "flight"
            },
            {
                "method_name": "getFlightSegmentId",
                "class_name": "flight"
            },
            {
                "method_name": "getScheduledDepartureTime",
                "class_name": "flight"
            },
            {
                "method_name": "getScheduledArrivalTime",
                "class_name": "flight"
            },
            {
                "method_name": "getFirstClassBaseCost",
                "class_name": "flight"
            },
            {
                "method_name": "getEconomyClassBaseCost",
                "class_name": "flight"
            },
            {
                "method_name": "getNumFirstClassSeats",
                "class_name": "flight"
            },
            {
                "method_name": "getNumEconomyClassSeats",
                "class_name": "flight"
            },
            {
                "method_name": "getAirplaneTypeId",
                "class_name": "flight"
            },
            {
                "method_name": "getFlightSegment",
                "class_name": "flight"
            },
            {
                "method_name": "getFlightSegment",
                "class_name": "flight"
            }
        ],
        "words": [
            "FlightInfo",
            "get_id",
            "set_id",
            "getFlightSegmentId",
            "setFlightSegmentId",
            "getScheduledDepartureTime",
            "setScheduledDepartureTime",
            "getScheduledArrivalTime",
            "setScheduledArrivalTime",
            "getFirstClassBaseCost",
            "setFirstClassBaseCost",
            "getEconomyClassBaseCost",
            "setEconomyClassBaseCost",
            "getNumFirstClassSeats",
            "setNumFirstClassSeats",
            "getNumEconomyClassSeats",
            "setNumEconomyClassSeats",
            "getAirplaneTypeId",
            "setAirplaneTypeId",
            "getFlightSegment",
            "setFlightSegment",
            "getPkey",
            "_id",
            "flightSegmentId",
            "scheduledDepartureTime",
            "scheduledArrivalTime",
            "firstClassBaseCost",
            "economyClassBaseCost",
            "numFirstClassSeats",
            "numEconomyClassSeats",
            "airplaneTypeId",
            "flightSegment",
            "pkey",
            "flight",
            "_id",
            "flightSegmentId",
            "scheduledDepartureTime",
            "scheduledArrivalTime",
            "firstClassBaseCost",
            "economyClassBaseCost",
            "numFirstClassSeats",
            "numEconomyClassSeats",
            "airplaneTypeId",
            "flightSegment"
        ]
    },
    "FlightPK": {
        "methods": [],
        "method_calls": [],
        "words": ["FlightPK"]
    },
    "MongoConnectionManager": {
        "methods": [
            "getConnectionManager",
            "getDB",
            "getDatastore",
            "getDriverVersion",
            "getMongoVersion"
        ],
        "method_calls": [
            {
                "method_name": "getName",
                "class_name": "MongoConnectionManager.class"
            },
            {
                "method_name": "getLogger",
                "class_name": "Logger"
            },
            {
                "method_name": "get",
                "class_name": "connectionManager"
            },
            {
                "method_name": "get",
                "class_name": "connectionManager"
            },
            {
                "method_name": "set",
                "class_name": "connectionManager"
            },
            {
                "method_name": "get",
                "class_name": "connectionManager"
            },
            {
                "method_name": "getResource",
                "class_name": "MongoConnectionManager.class"
            },
            {
                "method_name": "getMessage",
                "class_name": "ioe"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "openStream",
                "class_name": "mongoPropertyFile"
            },
            {
                "method_name": "load",
                "class_name": "prop"
            },
            {
                "method_name": "getProperty",
                "class_name": "prop"
            },
            {
                "method_name": "getProperty",
                "class_name": "prop"
            },
            {
                "method_name": "getProperty",
                "class_name": "prop"
            },
            {
                "method_name": "getProperty",
                "class_name": "prop"
            },
            {
                "method_name": "getProperty",
                "class_name": "prop"
            },
            {
                "method_name": "getProperty",
                "class_name": "prop"
            },
            {
                "method_name": "getProperty",
                "class_name": "prop"
            },
            {
                "method_name": "getProperty",
                "class_name": "prop"
            },
            {
                "method_name": "writeConcern",
                "class_name": "new MongoClientOptions.Builder()"
            },
            {
                "method_name": "connectionsPerHost",
                "class_name": "new MongoClientOptions.Builder().writeConcern(new WriteConcern(w, 0, fsync))"
            },
            {
                "method_name": "connectTimeout",
                "class_name": "new MongoClientOptions.Builder().writeConcern(new WriteConcern(w, 0, fsync)).connectionsPerHost(connectionsPerHost)"
            },
            {
                "method_name": "socketTimeout",
                "class_name": "new MongoClientOptions.Builder().writeConcern(new WriteConcern(w, 0, fsync)).connectionsPerHost(connectionsPerHost).connectTimeout(connectTimeout)"
            },
            {
                "method_name": "socketKeepAlive",
                "class_name": "new MongoClientOptions.Builder().writeConcern(new WriteConcern(w, 0, fsync)).connectionsPerHost(connectionsPerHost).connectTimeout(connectTimeout).socketTimeout(socketTimeout)"
            },
            {
                "method_name": "maxWaitTime",
                "class_name": "new MongoClientOptions.Builder().writeConcern(new WriteConcern(w, 0, fsync)).connectionsPerHost(connectionsPerHost).connectTimeout(connectTimeout).socketTimeout(socketTimeout).socketKeepAlive(socketKeepAlive)"
            },
            {
                "method_name": "threadsAllowedToBlockForConnectionMultiplier",
                "class_name": "new MongoClientOptions.Builder().writeConcern(new WriteConcern(w, 0, fsync)).connectionsPerHost(connectionsPerHost).connectTimeout(connectTimeout).socketTimeout(socketTimeout).socketKeepAlive(socketKeepAlive).maxWaitTime(maxWaitTime)"
            },
            {
                "method_name": "getMessage",
                "class_name": "e"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "getenv",
                "class_name": "System"
            },
            {
                "method_name": "fine",
                "class_name": "logger"
            },
            {
                "method_name": "getMessage",
                "class_name": "e"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "warning",
                "class_name": "logger"
            },
            {
                "method_name": "lookup",
                "class_name": "new InitialContext()"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "getMessage",
                "class_name": "e"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "getMessage",
                "class_name": "e"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "lookup",
                "class_name": "new InitialContext()"
            },
            {
                "method_name": "lookup",
                "class_name": "new InitialContext()"
            },
            {
                "method_name": "lookup",
                "class_name": "new InitialContext()"
            },
            {
                "method_name": "parseInt",
                "class_name": "Integer"
            },
            {
                "method_name": "getDB",
                "class_name": "mongo"
            },
            {
                "method_name": "getMapper",
                "class_name": "morphia"
            },
            {
                "method_name": "getConverters",
                "class_name": "morphia.getMapper()"
            },
            {
                "method_name": "addConverter",
                "class_name": "morphia.getMapper().getConverters()"
            },
            {
                "method_name": "getMongo",
                "class_name": "db"
            },
            {
                "method_name": "getConnectPoint",
                "class_name": "db.getMongo()"
            },
            {
                "method_name": "build",
                "class_name": "builder"
            },
            {
                "method_name": "getName",
                "class_name": "db"
            },
            {
                "method_name": "createDatastore",
                "class_name": "morphia"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "parse",
                "class_name": "JSONValue"
            },
            {
                "method_name": "toString",
                "class_name": "key"
            },
            {
                "method_name": "startsWith",
                "class_name": "key.toString()"
            },
            {
                "method_name": "get",
                "class_name": "vcapServices"
            },
            {
                "method_name": "keySet",
                "class_name": "vcapServices"
            },
            {
                "method_name": "get",
                "class_name": "mongoServiceArray"
            },
            {
                "method_name": "get",
                "class_name": "mongoService"
            },
            {
                "method_name": "get",
                "class_name": "credentials"
            },
            {
                "method_name": "fine",
                "class_name": "logger"
            },
            {
                "method_name": "getMapper",
                "class_name": "morphia"
            },
            {
                "method_name": "getConverters",
                "class_name": "morphia.getMapper()"
            },
            {
                "method_name": "addConverter",
                "class_name": "morphia.getMapper().getConverters()"
            },
            {
                "method_name": "getDatabase",
                "class_name": "mongoURI"
            },
            {
                "method_name": "createDatastore",
                "class_name": "morphia"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "getMongo",
                "class_name": "datastore"
            },
            {
                "method_name": "getMongoClientOptions",
                "class_name": "datastore.getMongo()"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "getMongo",
                "class_name": "datastore"
            },
            {
                "method_name": "getVersion",
                "class_name": "datastore.getMongo()"
            },
            {
                "method_name": "getDB",
                "class_name": "datastore"
            },
            {
                "method_name": "command",
                "class_name": "datastore.getDB()"
            },
            {
                "method_name": "getString",
                "class_name": "datastore.getDB().command(\"buildInfo\")"
            }
        ],
        "words": [
            "MongoConnectionManager",
            "getConnectionManager",
            "getDB",
            "getDatastore",
            "getDriverVersion",
            "getMongoVersion",
            "connectionManager",
            "logger",
            "db",
            "datastore",
            "morphia",
            "fsync",
            "w",
            "connectionsPerHost",
            "threadsAllowedToBlockForConnectionMultiplier",
            "connectTimeout",
            "socketTimeout",
            "socketKeepAlive",
            "maxWaitTime",
            "prop",
            "mongoPropertyFile",
            "builder",
            "vcapJSONString",
            "host",
            "port",
            "database",
            "server",
            "mongo",
            "jsonObject",
            "vcapServices",
            "mongoServiceArray",
            "key",
            "mongoService",
            "credentials",
            "url",
            "mongoURI",
            "mongo",
            "ioe",
            "e",
            "e",
            "e",
            "e",
            "Set",
            "default",
            "client",
            "options,",
            "and",
            "then",
            "check",
            "if",
            "there",
            "is",
            "a",
            "properties",
            "file.",
            "Set",
            "the",
            "client",
            "options",
            "Check",
            "if",
            "VCAP_SERVICES",
            "exist,",
            "and",
            "if",
            "it",
            "does,",
            "look",
            "up",
            "the",
            "url",
            "from",
            "the",
            "credentials.",
            "VCAP_SERVICES",
            "don't",
            "exist,",
            "so",
            "use",
            "the",
            "DB",
            "resource"
        ]
    },
    "CustomerInfo": {
        "methods": [
            "getUsername",
            "setUsername",
            "getPassword",
            "setPassword",
            "getStatus",
            "setStatus",
            "getTotal_miles",
            "setTotal_miles",
            "getMiles_ytd",
            "setMiles_ytd",
            "getPhoneNumber",
            "setPhoneNumber",
            "getPhoneNumberType",
            "setPhoneNumberType",
            "getAddress",
            "setAddress",
            "toString",
            "equals"
        ],
        "method_calls": [
            {
                "method_name": "getUsername",
                "class_name": "c"
            },
            {
                "method_name": "getPassword",
                "class_name": "c"
            },
            {
                "method_name": "getStatus",
                "class_name": "c"
            },
            {
                "method_name": "toString",
                "class_name": "c.getStatus()"
            },
            {
                "method_name": "getTotal_miles",
                "class_name": "c"
            },
            {
                "method_name": "getMiles_ytd",
                "class_name": "c"
            },
            {
                "method_name": "getAddress",
                "class_name": "c"
            },
            {
                "method_name": "getPhoneNumber",
                "class_name": "c"
            },
            {
                "method_name": "getPhoneNumberType",
                "class_name": "c"
            },
            {
                "method_name": "toString",
                "class_name": "c.getPhoneNumberType()"
            },
            {
                "method_name": "getClass",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getClass",
                "class_name": "obj"
            },
            {
                "method_name": "equals",
                "class_name": "address"
            },
            {
                "method_name": "equals",
                "class_name": "_id"
            },
            {
                "method_name": "equals",
                "class_name": "password"
            },
            {
                "method_name": "equals",
                "class_name": "phoneNumber"
            }
        ],
        "words": [
            "CustomerInfo",
            "getUsername",
            "setUsername",
            "getPassword",
            "setPassword",
            "getStatus",
            "setStatus",
            "getTotal_miles",
            "setTotal_miles",
            "getMiles_ytd",
            "setMiles_ytd",
            "getPhoneNumber",
            "setPhoneNumber",
            "getPhoneNumberType",
            "setPhoneNumberType",
            "getAddress",
            "setAddress",
            "toString",
            "equals",
            "serialVersionUID",
            "_id",
            "password",
            "status",
            "total_miles",
            "miles_ytd",
            "address",
            "phoneNumber",
            "phoneNumberType",
            "other",
            "username",
            "password",
            "status",
            "total_miles",
            "miles_ytd",
            "address",
            "phoneNumber",
            "phoneNumberType",
            "c",
            "username",
            "password",
            "status",
            "total_miles",
            "miles_ytd",
            "phoneNumber",
            "phoneNumberType",
            "address",
            "obj"
        ]
    },
    "FlightLoader": {
        "methods": [
            "loadFlights",
            "getArrivalTime",
            "alreadyInCollection"
        ],
        "method_calls": [
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getService",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "getResourceAsStream",
                "class_name": "FlightLoader.class"
            },
            {
                "method_name": "readLine",
                "class_name": "lnr"
            },
            {
                "method_name": "nextToken",
                "class_name": "st"
            },
            {
                "method_name": "createAirportCodeMapping",
                "class_name": "flightService"
            },
            {
                "method_name": "add",
                "class_name": "airports"
            },
            {
                "method_name": "hasMoreTokens",
                "class_name": "st"
            },
            {
                "method_name": "readLine",
                "class_name": "lnr"
            },
            {
                "method_name": "nextToken",
                "class_name": "st"
            },
            {
                "method_name": "get",
                "class_name": "airports"
            },
            {
                "method_name": "setAirportCode",
                "class_name": "airports.get(ii)"
            },
            {
                "method_name": "hasMoreTokens",
                "class_name": "st"
            },
            {
                "method_name": "readLine",
                "class_name": "lnr"
            },
            {
                "method_name": "trim",
                "class_name": "line"
            },
            {
                "method_name": "equals",
                "class_name": "line.trim()"
            },
            {
                "method_name": "nextToken",
                "class_name": "st"
            },
            {
                "method_name": "nextToken",
                "class_name": "st"
            },
            {
                "method_name": "alreadyInCollection",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "createAirportCodeMapping",
                "class_name": "flightService"
            },
            {
                "method_name": "add",
                "class_name": "airports"
            },
            {
                "method_name": "nextToken",
                "class_name": "st"
            },
            {
                "method_name": "equals",
                "class_name": "milesString"
            },
            {
                "method_name": "parseInt",
                "class_name": "Integer"
            },
            {
                "method_name": "get",
                "class_name": "airports"
            },
            {
                "method_name": "getAirportCode",
                "class_name": "airports.get(indexIntoTopLine)"
            },
            {
                "method_name": "storeFlightSegment",
                "class_name": "flightService"
            },
            {
                "method_name": "getInstance",
                "class_name": "Calendar"
            },
            {
                "method_name": "setTime",
                "class_name": "c"
            },
            {
                "method_name": "set",
                "class_name": "c"
            },
            {
                "method_name": "set",
                "class_name": "c"
            },
            {
                "method_name": "set",
                "class_name": "c"
            },
            {
                "method_name": "set",
                "class_name": "c"
            },
            {
                "method_name": "add",
                "class_name": "c"
            },
            {
                "method_name": "getTime",
                "class_name": "c"
            },
            {
                "method_name": "getArrivalTime",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "createNewFlight",
                "class_name": "flightService"
            },
            {
                "method_name": "hasMoreTokens",
                "class_name": "st"
            },
            {
                "method_name": "get",
                "class_name": "airports"
            },
            {
                "method_name": "storeAirportMapping",
                "class_name": "flightService"
            },
            {
                "method_name": "size",
                "class_name": "airports"
            },
            {
                "method_name": "close",
                "class_name": "lnr"
            },
            {
                "method_name": "getInstance",
                "class_name": "Calendar"
            },
            {
                "method_name": "setTime",
                "class_name": "c"
            },
            {
                "method_name": "add",
                "class_name": "c"
            },
            {
                "method_name": "add",
                "class_name": "c"
            },
            {
                "method_name": "getTime",
                "class_name": "c"
            },
            {
                "method_name": "get",
                "class_name": "airports"
            },
            {
                "method_name": "getAirportCode",
                "class_name": "airports.get(ii)"
            },
            {
                "method_name": "equals",
                "class_name": "airports.get(ii).getAirportCode()"
            },
            {
                "method_name": "size",
                "class_name": "airports"
            }
        ],
        "words": [
            "FlightLoader",
            "loadFlights",
            "getArrivalTime",
            "alreadyInCollection",
            "MAX_FLIGHTS_PER_SEGMENT",
            "flightService",
            "csvInputStream",
            "lnr",
            "line1",
            "st",
            "airports",
            "acm",
            "line2",
            "ii",
            "airportCode",
            "line",
            "flightNumber",
            "airportName",
            "airportCode",
            "acm",
            "indexIntoTopLine",
            "milesString",
            "miles",
            "toAirport",
            "flightId",
            "now",
            "c",
            "departureTime",
            "arrivalTime",
            "daysFromNow",
            "jj",
            "averageSpeed",
            "hours",
            "partsOfHour",
            "minutes",
            "c",
            "ii",
            "departureTime",
            "mileage",
            "airportCode",
            "airports",
            "read",
            "the",
            "other",
            "lines",
            "which",
            "are",
            "of",
            "format:",
            "read",
            "the",
            "first",
            "line",
            "which",
            "are",
            "airport",
            "names",
            "acm.setAirportName(st.nextToken());",
            "read",
            "the",
            "second",
            "line",
            "which",
            "contains",
            "matching",
            "airport",
            "codes",
            "for",
            "the",
            "first",
            "line",
            "airport",
            "name,",
            "aiport",
            "code,",
            "distance",
            "from",
            "this",
            "airport",
            "to",
            "whatever",
            "airport",
            "is",
            "in",
            "the",
            "column",
            "from",
            "lines",
            "one",
            "and",
            "two",
            "600",
            "miles/hours",
            "miles",
            "/",
            "miles/hour",
            "=",
            "hours"
        ]
    },
    "FlightImpl": {
        "methods": [
            "getPkey",
            "setPkey",
            "getFlightId",
            "setFlightId",
            "getFlightSegmentId",
            "getScheduledDepartureTime",
            "setScheduledDepartureTime",
            "getScheduledArrivalTime",
            "setScheduledArrivalTime",
            "getFirstClassBaseCost",
            "setFirstClassBaseCost",
            "getEconomyClassBaseCost",
            "setEconomyClassBaseCost",
            "getNumFirstClassSeats",
            "setNumFirstClassSeats",
            "getNumEconomyClassSeats",
            "setNumEconomyClassSeats",
            "getAirplaneTypeId",
            "setAirplaneTypeId",
            "getFlightSegment",
            "setFlightSegment",
            "toString",
            "equals"
        ],
        "method_calls": [
            {
                "method_name": "getId",
                "class_name": "pkey"
            },
            {
                "method_name": "setId",
                "class_name": "pkey"
            },
            {
                "method_name": "getFlightSegmentId",
                "class_name": "pkey"
            },
            {
                "method_name": "getClass",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getClass",
                "class_name": "obj"
            },
            {
                "method_name": "equals",
                "class_name": "airplaneTypeId"
            },
            {
                "method_name": "equals",
                "class_name": "economyClassBaseCost"
            },
            {
                "method_name": "equals",
                "class_name": "firstClassBaseCost"
            },
            {
                "method_name": "equals",
                "class_name": "flightSegment"
            },
            {
                "method_name": "equals",
                "class_name": "pkey"
            },
            {
                "method_name": "equals",
                "class_name": "scheduledArrivalTime"
            },
            {
                "method_name": "equals",
                "class_name": "scheduledDepartureTime"
            }
        ],
        "words": [
            "FlightImpl",
            "getPkey",
            "setPkey",
            "getFlightId",
            "setFlightId",
            "getFlightSegmentId",
            "getScheduledDepartureTime",
            "setScheduledDepartureTime",
            "getScheduledArrivalTime",
            "setScheduledArrivalTime",
            "getFirstClassBaseCost",
            "setFirstClassBaseCost",
            "getEconomyClassBaseCost",
            "setEconomyClassBaseCost",
            "getNumFirstClassSeats",
            "setNumFirstClassSeats",
            "getNumEconomyClassSeats",
            "setNumEconomyClassSeats",
            "getAirplaneTypeId",
            "setAirplaneTypeId",
            "getFlightSegment",
            "setFlightSegment",
            "toString",
            "equals",
            "serialVersionUID",
            "pkey",
            "scheduledDepartureTime",
            "scheduledArrivalTime",
            "firstClassBaseCost",
            "economyClassBaseCost",
            "numFirstClassSeats",
            "numEconomyClassSeats",
            "airplaneTypeId",
            "flightSegment",
            "other",
            "id",
            "flightSegmentId",
            "scheduledDepartureTime",
            "scheduledArrivalTime",
            "firstClassBaseCost",
            "economyClassBaseCost",
            "numFirstClassSeats",
            "numEconomyClassSeats",
            "airplaneTypeId",
            "pkey",
            "id",
            "scheduledDepartureTime",
            "scheduledArrivalTime",
            "firstClassBaseCost",
            "economyClassBaseCost",
            "numFirstClassSeats",
            "numEconomyClassSeats",
            "airplaneTypeId",
            "flightSegment",
            "obj",
            "public",
            "void",
            "setFlightSegmentId(String",
            "segmentId)",
            "{\n\t\tpkey.setFlightSegmentId(segmentId);\n\t}",
            "The",
            "method",
            "is",
            "needed",
            "for",
            "index",
            "calculation"
        ]
    },
    "CustomerAddress": {
        "methods": [
            "getStreetAddress1",
            "setStreetAddress1",
            "getStreetAddress2",
            "setStreetAddress2",
            "getCity",
            "setCity",
            "getStateProvince",
            "setStateProvince",
            "getCountry",
            "setCountry",
            "getPostalCode",
            "setPostalCode"
        ],
        "method_calls": [],
        "words": [
            "CustomerAddress",
            "getStreetAddress1",
            "setStreetAddress1",
            "getStreetAddress2",
            "setStreetAddress2",
            "getCity",
            "setCity",
            "getStateProvince",
            "setStateProvince",
            "getCountry",
            "setCountry",
            "getPostalCode",
            "setPostalCode",
            "streetAddress1",
            "streetAddress2",
            "city",
            "stateProvince",
            "country",
            "postalCode"
        ]
    },
    "BookingsREST": {
        "methods": [
            "bookFlights",
            "getBookingByNumber",
            "getBookingsByUser",
            "cancelBookingsByNumber"
        ],
        "method_calls": [
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getService",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "status",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.status(Status.INTERNAL_SERVER_ERROR)"
            },
            {
                "method_name": "bookFlight",
                "class_name": "bs"
            },
            {
                "method_name": "bookFlight",
                "class_name": "bs"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(bi)"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "getBooking",
                "class_name": "bs"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "getBookingsByUser",
                "class_name": "bs"
            },
            {
                "method_name": "add",
                "class_name": "newList"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "status",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.status(Status.INTERNAL_SERVER_ERROR)"
            },
            {
                "method_name": "cancelBooking",
                "class_name": "bs"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(\"booking \" + number + \" deleted.\")"
            }
        ],
        "words": [
            "BookingsREST",
            "bookFlights",
            "getBookingByNumber",
            "getBookingsByUser",
            "cancelBookingsByNumber",
            "bs",
            "bookingIdTo",
            "bookingIdReturn",
            "bi",
            "b",
            "bi",
            "list",
            "newList",
            "b",
            "e",
            "userid",
            "toFlightId",
            "toFlightSegId",
            "retFlightId",
            "retFlightSegId",
            "oneWay",
            "e",
            "number",
            "userid",
            "e",
            "user",
            "e",
            "number",
            "userid",
            "BookingInfo",
            "YL.",
            "BookingInfo",
            "will",
            "only",
            "contains",
            "the",
            "booking",
            "generated",
            "keys",
            "as",
            "customer",
            "info",
            "is",
            "always",
            "available",
            "from",
            "the",
            "session"
        ]
    },
    "IndividualChartResults": {
        "methods": [
            "setTitle",
            "getInputList",
            "setInputList",
            "getTimeList",
            "setTimeList",
            "getTitle",
            "incrementFiles",
            "getFilesCount"
        ],
        "method_calls": [],
        "words": [
            "IndividualChartResults",
            "setTitle",
            "getInputList",
            "setInputList",
            "getTimeList",
            "setTimeList",
            "getTitle",
            "incrementFiles",
            "getFilesCount",
            "inputList",
            "title",
            "timeList",
            "files",
            "title",
            "inputList",
            "timeList"
        ]
    },
    "RESTCookieSessionFilter": {
        "methods": [
            "destroy",
            "doFilter",
            "init"
        ],
        "method_calls": [
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getService",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getService",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "getContextPath",
                "class_name": "request"
            },
            {
                "method_name": "getServletPath",
                "class_name": "request"
            },
            {
                "method_name": "getPathInfo",
                "class_name": "request"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "prepareForTransaction",
                "class_name": "transactionService"
            },
            {
                "method_name": "endsWith",
                "class_name": "path"
            },
            {
                "method_name": "endsWith",
                "class_name": "path"
            },
            {
                "method_name": "endsWith",
                "class_name": "path"
            },
            {
                "method_name": "doFilter",
                "class_name": "chain"
            },
            {
                "method_name": "getCookies",
                "class_name": "request"
            },
            {
                "method_name": "getName",
                "class_name": "c"
            },
            {
                "method_name": "equals",
                "class_name": "c.getName()"
            },
            {
                "method_name": "getValue",
                "class_name": "sessionCookie"
            },
            {
                "method_name": "trim",
                "class_name": "sessionCookie.getValue()"
            },
            {
                "method_name": "equals",
                "class_name": "sessionId"
            },
            {
                "method_name": "sendError",
                "class_name": "response"
            },
            {
                "method_name": "validateSession",
                "class_name": "customerService"
            },
            {
                "method_name": "sendError",
                "class_name": "response"
            },
            {
                "method_name": "getCustomerid",
                "class_name": "cs"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "doFilter",
                "class_name": "chain"
            },
            {
                "method_name": "sendError",
                "class_name": "response"
            }
        ],
        "words": [
            "RESTCookieSessionFilter",
            "destroy",
            "doFilter",
            "init",
            "LOGIN_USER",
            "LOGIN_PATH",
            "LOGOUT_PATH",
            "LOADDB_PATH",
            "customerService",
            "transactionService",
            "beanManager",
            "request",
            "response",
            "path",
            "cookies",
            "sessionCookie",
            "c",
            "sessionId",
            "cs",
            "e",
            "req",
            "resp",
            "chain",
            "config",
            "The",
            "following",
            "code",
            "is",
            "to",
            "ensure",
            "that",
            "OG",
            "is",
            "always",
            "set",
            "on",
            "the",
            "thread",
            "if",
            "logging",
            "in,",
            "logging",
            "out,",
            "or",
            "loading",
            "the",
            "database,",
            "let",
            "the",
            "request",
            "flow",
            "did",
            "this",
            "check",
            "as",
            "the",
            "logout",
            "currently",
            "sets",
            "the",
            "cookie",
            "value",
            "to",
            "\"\"",
            "instead",
            "of",
            "aging",
            "it",
            "out",
            "We",
            "need",
            "both",
            "cookie",
            "to",
            "work",
            "see",
            "comment",
            "in",
            "LogingREST.java",
            "Need",
            "the",
            "URLDecoder",
            "so",
            "that",
            "I",
            "can",
            "get",
            "@",
            "not",
            "%40",
            "if",
            "we",
            "got",
            "here,",
            "we",
            "didn't",
            "detect",
            "the",
            "session",
            "cookie,",
            "so",
            "we",
            "need",
            "to",
            "return",
            "404"
        ]
    },
    "AcmeAirApp": {
        "methods": ["getClasses"],
        "method_calls": [{
            "method_name": "asList",
            "class_name": "Arrays"
        }],
        "words": [
            "AcmeAirApp",
            "getClasses"
        ]
    },
    "Loader": {
        "methods": [
            "queryLoader",
            "loadDB",
            "main",
            "execute",
            "execute",
            "lookupDefaults",
            "getProperties"
        ],
        "method_calls": [
            {
                "method_name": "getName",
                "class_name": "Loader.class"
            },
            {
                "method_name": "getLogger",
                "class_name": "Logger"
            },
            {
                "method_name": "getProperty",
                "class_name": "System"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "lookupDefaults",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getProperty",
                "class_name": "System"
            },
            {
                "method_name": "toString",
                "class_name": "Long"
            },
            {
                "method_name": "setProperty",
                "class_name": "System"
            },
            {
                "method_name": "execute",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "execute",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "execute",
                "class_name": "loader"
            },
            {
                "method_name": "getProperty",
                "class_name": "System"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "lookupDefaults",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getProperty",
                "class_name": "System"
            },
            {
                "method_name": "parseLong",
                "class_name": "Long"
            },
            {
                "method_name": "execute",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "currentTimeMillis",
                "class_name": "System"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "loadFlights",
                "class_name": "flightLoader"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "loadCustomers",
                "class_name": "customerLoader"
            },
            {
                "method_name": "currentTimeMillis",
                "class_name": "System"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "getProperties",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getProperty",
                "class_name": "props"
            },
            {
                "method_name": "setProperty",
                "class_name": "System"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "getResourceAsStream",
                "class_name": "Loader.class"
            },
            {
                "method_name": "load",
                "class_name": "props"
            }
        ],
        "words": [
            "Loader",
            "queryLoader",
            "loadDB",
            "main",
            "execute",
            "execute",
            "lookupDefaults",
            "getProperties",
            "REPOSITORY_LOOKUP_KEY",
            "logger",
            "message",
            "message",
            "loader",
            "numCustomers",
            "flightLoader",
            "customerLoader",
            "length",
            "start",
            "stop",
            "props",
            "numCustomers",
            "props",
            "propFileName",
            "propFileStream",
            "numCustomers",
            "args",
            "e",
            "numCustomers",
            "e",
            "e",
            "private",
            "void",
            "execute(String",
            "args[])",
            "{\n\t\tApplicationContext",
            "ctx",
            "=",
            "null;",
            "Get",
            "Properties",
            "from",
            "loader.properties",
            "file.",
            "If",
            "the",
            "file",
            "does",
            "not",
            "exist,",
            "use",
            "default",
            "values",
            "Properties",
            "props",
            "=",
            "new",
            "Properties();\n\t\tString",
            "propFileName",
            "=",
            "\"/loader.properties\";\n\t\ttry{\t\t\t\n\t\t\tInputStream",
            "propFileStream",
            "=",
            "Loader.class.getResourceAsStream(propFileName);\n\t\t\tprops.load(propFileStream);\n\t\t\tprops.load(new",
            "FileInputStream(propFileName));\n\t\t}catch(FileNotFoundException",
            "e){\n\t\t\tlogger.info(\"Property",
            "file",
            "\"",
            "+",
            "propFileName",
            "+",
            "\"",
            "not",
            "found.\");\n\t\t}catch(IOException",
            "e){\n\t\t\tlogger.info(\"IOException",
            "-",
            "Property",
            "file",
            "\"",
            "+",
            "propFileName",
            "+",
            "\"",
            "not",
            "found.\");\n\t\t}",
            "String",
            "numCustomers",
            "=",
            "props.getProperty(\"loader.numCustomers\",\"100\");",
            "System.setProperty(\"loader.numCustomers\",",
            "numCustomers);\n\n\t\tString",
            "type",
            "=",
            "null;\n\t\tString",
            "lookup",
            "=",
            "REPOSITORY_LOOKUP_KEY.replace('.',",
            "'/');\n\t\tjavax.naming.Context",
            "context",
            "=",
            "null;\n\t\tjavax.naming.Context",
            "envContext;\n\t\ttry",
            "{\n\t\t\tcontext",
            "=",
            "new",
            "javax.naming.InitialContext();\n\t\t\tenvContext",
            "=",
            "(javax.naming.Context)",
            "context.lookup(\"java:comp/env\");\n\t\t\tif",
            "(envContext",
            "!=",
            "null)\n\t\t\t\ttype",
            "=",
            "(String)",
            "envContext.lookup(lookup);\n\t\t}",
            "catch",
            "(NamingException",
            "e)",
            "{",
            "e.printStackTrace();\n\t\t}\n\t\t\n\t\tif",
            "(type",
            "!=",
            "null)",
            "{\n\t\t\tlogger.info(\"Found",
            "repository",
            "in",
            "web.xml:\"",
            "+",
            "type);\n\t\t}\n\t\telse",
            "if",
            "(context",
            "!=",
            "null)",
            "{\n\t\t\ttry",
            "{\n\t\t\t\ttype",
            "=",
            "(String)",
            "context.lookup(lookup);\n\t\t\t\tif",
            "(type",
            "!=",
            "null)\n\t\t\t\t\tlogger.info(\"Found",
            "repository",
            "in",
            "server.xml:\"",
            "+",
            "type);\n\t\t\t}",
            "catch",
            "(NamingException",
            "e)",
            "{",
            "e.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\tif",
            "(type",
            "==",
            "null)",
            "{\n\t\t\ttype",
            "=",
            "System.getProperty(REPOSITORY_LOOKUP_KEY);\n\t\t\tif",
            "(type",
            "!=",
            "null)\n\t\t\t\tlogger.info(\"Found",
            "repository",
            "in",
            "jvm",
            "property:\"",
            "+",
            "type);\n\t\t\telse",
            "{\n\t\t\t\ttype",
            "=",
            "System.getenv(REPOSITORY_LOOKUP_KEY);\n\t\t\t\tif",
            "(type",
            "!=",
            "null)\n\t\t\t\t\tlogger.info(\"Found",
            "repository",
            "in",
            "environment",
            "property:\"",
            "+",
            "type);\n\t\t\t}\n\t\t}\n\n\t\tif",
            "(type",
            "==null)",
            "Default",
            "to",
            "wxsdirect\n\t\t{\n\t\t\ttype",
            "=",
            "\"wxsdirect\";\n\t\t\tlogger.info(\"Using",
            "default",
            "repository",
            ":\"",
            "+",
            "type);\n\t\t}\n\t\tif",
            "(type.equals(\"wxsdirect\"))\n\t\t\tctx",
            "=",
            "new",
            "AnnotationConfigApplicationContext(WXSDirectAppConfig.class);\n\t\telse",
            "if",
            "(type.equals(\"mongodirect\"))\n\t\t\tctx",
            "=",
            "new",
            "AnnotationConfigApplicationContext(MongoDirectAppConfig.class);\n\t\telse\n\t\t{\n\t\t\tlogger.info(\"Did",
            "not",
            "find",
            "a",
            "matching",
            "config.",
            "Using",
            "default",
            "repository",
            "wxsdirect",
            "instead\");\n\t\t\tctx",
            "=",
            "new",
            "AnnotationConfigApplicationContext(WXSDirectAppConfig.class);\n\t\t}\n\t\t\n\t\tFlightLoader",
            "flightLoader",
            "=",
            "ctx.getBean(FlightLoader.class);\n\t\tCustomerLoader",
            "customerLoader",
            "=",
            "ctx.getBean(CustomerLoader.class);\n\t\t\n\t\ttry",
            "{\n\t\t\tlong",
            "start",
            "=",
            "System.currentTimeMillis();\n\t\t\tlogger.info(\"Start",
            "loading",
            "flights\");\n\t\t\tflightLoader.loadFlights();\n\t\t\tlogger.info(\"Start",
            "loading",
            "\"",
            "+",
            "numCustomers",
            "+",
            "\"",
            "customers\");\n\t\t\tcustomerLoader.loadCustomers(Long.parseLong(numCustomers));\n\t\t\tlong",
            "stop",
            "=",
            "System.currentTimeMillis();\n\t\t\tlogger.info(\"Finished",
            "loading",
            "in",
            "\"",
            "+",
            "(stop",
            "-",
            "start)/1000.0",
            "+",
            "\"",
            "seconds\");\n\t\t}\n\t\tcatch",
            "(Exception",
            "e)",
            "{\n\t\t\te.printStackTrace();\n\t\t}\n\t}",
            "*",
            "Get",
            "Properties",
            "from",
            "loader.properties",
            "file.",
            "*",
            "If",
            "the",
            "file",
            "does",
            "not",
            "exist,",
            "use",
            "default",
            "values",
            "props.load(new",
            "FileInputStream(propFileName));"
        ]
    },
    "FlightSegmentImpl": {
        "methods": [
            "getFlightName",
            "setFlightName",
            "getOriginPort",
            "setOriginPort",
            "getDestPort",
            "setDestPort",
            "getMiles",
            "setMiles",
            "toString",
            "equals"
        ],
        "method_calls": [
            {
                "method_name": "append",
                "class_name": "sb"
            },
            {
                "method_name": "append",
                "class_name": "sb.append(\"FlightSegment \")"
            },
            {
                "method_name": "append",
                "class_name": "sb.append(\"FlightSegment \").append(_id)"
            },
            {
                "method_name": "append",
                "class_name": "sb.append(\"FlightSegment \").append(_id).append(\" originating from:\\\"\")"
            },
            {
                "method_name": "append",
                "class_name": "sb.append(\"FlightSegment \").append(_id).append(\" originating from:\\\"\").append(originPort)"
            },
            {
                "method_name": "append",
                "class_name": "sb.append(\"FlightSegment \").append(_id).append(\" originating from:\\\"\").append(originPort).append(\"\\\" arriving at:\\\"\")"
            },
            {
                "method_name": "append",
                "class_name": "sb.append(\"FlightSegment \").append(_id).append(\" originating from:\\\"\").append(originPort).append(\"\\\" arriving at:\\\"\").append(destPort)"
            },
            {
                "method_name": "toString",
                "class_name": "sb"
            },
            {
                "method_name": "getClass",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getClass",
                "class_name": "obj"
            },
            {
                "method_name": "equals",
                "class_name": "destPort"
            },
            {
                "method_name": "equals",
                "class_name": "_id"
            },
            {
                "method_name": "equals",
                "class_name": "originPort"
            }
        ],
        "words": [
            "FlightSegmentImpl",
            "getFlightName",
            "setFlightName",
            "getOriginPort",
            "setOriginPort",
            "getDestPort",
            "setDestPort",
            "getMiles",
            "setMiles",
            "toString",
            "equals",
            "serialVersionUID",
            "_id",
            "originPort",
            "destPort",
            "miles",
            "sb",
            "other",
            "flightName",
            "origPort",
            "destPort",
            "miles",
            "flightName",
            "originPort",
            "destPort",
            "miles",
            "obj"
        ]
    },
    "MapPutAllAgent": {
        "methods": [
            "getObjectsToSave",
            "setObjectsToSave",
            "process",
            "processAllEntries"
        ],
        "method_calls": [
            {
                "method_name": "getName",
                "class_name": "MapPutAllAgent.class"
            },
            {
                "method_name": "getLogger",
                "class_name": "Logger"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "getObject",
                "class_name": "((SerializedKey) arg2)"
            },
            {
                "method_name": "get",
                "class_name": "this.objectsToSave"
            },
            {
                "method_name": "next",
                "class_name": "itr"
            },
            {
                "method_name": "getKey",
                "class_name": "entry"
            },
            {
                "method_name": "getValue",
                "class_name": "entry"
            },
            {
                "method_name": "finer",
                "class_name": "logger"
            },
            {
                "method_name": "upsert",
                "class_name": "arg1"
            },
            {
                "method_name": "hasNext",
                "class_name": "itr"
            },
            {
                "method_name": "entrySet",
                "class_name": "objectsForThePartition"
            },
            {
                "method_name": "iterator",
                "class_name": "objectsForThePartition.entrySet()"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            }
        ],
        "words": [
            "MapPutAllAgent",
            "getObjectsToSave",
            "setObjectsToSave",
            "process",
            "processAllEntries",
            "serialVersionUID",
            "logger",
            "objectsToSave",
            "key",
            "objectsForThePartition",
            "entry",
            "value",
            "itr",
            "objectsToSave",
            "e",
            "arg0",
            "arg1",
            "arg2",
            "arg0",
            "arg1",
            "@Override",
            "The",
            "key",
            "is",
            "the",
            "partition",
            "key,",
            "can",
            "be",
            "either",
            "the",
            "PK",
            "or",
            "when",
            "partition",
            "field",
            "is",
            "defined",
            "the",
            "partition",
            "field",
            "value",
            "I",
            "need",
            "to",
            "find",
            "the",
            "real",
            "key",
            "as",
            "the",
            "hashmap",
            "is",
            "using",
            "the",
            "real",
            "key...",
            "@Override"
        ]
    },
    "CustomerImpl": {
        "methods": [
            "getCustomerId",
            "getUsername",
            "setUsername",
            "getPassword",
            "setPassword",
            "getStatus",
            "setStatus",
            "getTotal_miles",
            "setTotal_miles",
            "getMiles_ytd",
            "setMiles_ytd",
            "getPhoneNumber",
            "setPhoneNumber",
            "getPhoneNumberType",
            "setPhoneNumberType",
            "getAddress",
            "setAddress",
            "toString",
            "equals"
        ],
        "method_calls": [
            {
                "method_name": "getClass",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getClass",
                "class_name": "obj"
            },
            {
                "method_name": "equals",
                "class_name": "address"
            },
            {
                "method_name": "equals",
                "class_name": "_id"
            },
            {
                "method_name": "equals",
                "class_name": "password"
            },
            {
                "method_name": "equals",
                "class_name": "phoneNumber"
            }
        ],
        "words": [
            "CustomerImpl",
            "getCustomerId",
            "getUsername",
            "setUsername",
            "getPassword",
            "setPassword",
            "getStatus",
            "setStatus",
            "getTotal_miles",
            "setTotal_miles",
            "getMiles_ytd",
            "setMiles_ytd",
            "getPhoneNumber",
            "setPhoneNumber",
            "getPhoneNumberType",
            "setPhoneNumberType",
            "getAddress",
            "setAddress",
            "toString",
            "equals",
            "serialVersionUID",
            "_id",
            "password",
            "status",
            "total_miles",
            "miles_ytd",
            "address",
            "phoneNumber",
            "phoneNumberType",
            "other",
            "username",
            "password",
            "status",
            "total_miles",
            "miles_ytd",
            "address",
            "phoneNumber",
            "phoneNumberType",
            "username",
            "password",
            "status",
            "total_miles",
            "miles_ytd",
            "phoneNumber",
            "phoneNumberType",
            "address",
            "obj"
        ]
    },
    "WXSConstants": {
        "methods": [],
        "method_calls": [],
        "words": [
            "WXSConstants",
            "JNDI_NAME",
            "KEY",
            "KEY_DESCRIPTION"
        ]
    },
    "FlightSegment": {
        "methods": [
            "getFlightName",
            "getOriginPort",
            "getDestPort",
            "getMiles"
        ],
        "method_calls": [],
        "words": [
            "FlightSegment",
            "getFlightName",
            "getOriginPort",
            "getDestPort",
            "getMiles"
        ]
    },
    "BookingPKImpl": {
        "methods": [
            "getId",
            "setId",
            "getCustomerId",
            "setCustomerId",
            "ibmGetPartition",
            "hashCode",
            "equals",
            "toString"
        ],
        "method_calls": [
            {
                "method_name": "hashCode",
                "class_name": "customerId"
            },
            {
                "method_name": "hashCode",
                "class_name": "id"
            },
            {
                "method_name": "getClass",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getClass",
                "class_name": "obj"
            },
            {
                "method_name": "equals",
                "class_name": "customerId"
            },
            {
                "method_name": "equals",
                "class_name": "id"
            }
        ],
        "words": [
            "BookingPKImpl",
            "getId",
            "setId",
            "getCustomerId",
            "setCustomerId",
            "ibmGetPartition",
            "hashCode",
            "equals",
            "toString",
            "serialVersionUID",
            "id",
            "customerId",
            "prime",
            "result",
            "other",
            "customerId",
            "id",
            "id",
            "customerId",
            "obj"
        ]
    },
    "BookingPK": {
        "methods": [
            "getId",
            "getCustomerId"
        ],
        "method_calls": [],
        "words": [
            "BookingPK",
            "getId",
            "getCustomerId"
        ]
    },
    "FlightSegmentInfo": {
        "methods": [
            "get_id",
            "set_id",
            "getOriginPort",
            "setOriginPort",
            "getDestPort",
            "setDestPort",
            "getMiles",
            "setMiles"
        ],
        "method_calls": [
            {
                "method_name": "getFlightName",
                "class_name": "flightSegment"
            },
            {
                "method_name": "getOriginPort",
                "class_name": "flightSegment"
            },
            {
                "method_name": "getDestPort",
                "class_name": "flightSegment"
            },
            {
                "method_name": "getMiles",
                "class_name": "flightSegment"
            }
        ],
        "words": [
            "FlightSegmentInfo",
            "get_id",
            "set_id",
            "getOriginPort",
            "setOriginPort",
            "getDestPort",
            "setDestPort",
            "getMiles",
            "setMiles",
            "_id",
            "originPort",
            "destPort",
            "miles",
            "flightSegment",
            "_id",
            "originPort",
            "destPort",
            "miles"
        ]
    },
    "CustomerSession": {
        "methods": [
            "getId",
            "getCustomerid",
            "getLastAccessedTime",
            "getTimeoutTime"
        ],
        "method_calls": [],
        "words": [
            "CustomerSession",
            "getId",
            "getCustomerid",
            "getLastAccessedTime",
            "getTimeoutTime"
        ]
    },
    "KeyGenerator": {
        "methods": ["generate"],
        "method_calls": [
            {
                "method_name": "randomUUID",
                "class_name": "java.util.UUID"
            },
            {
                "method_name": "toString",
                "class_name": "java.util.UUID.randomUUID()"
            }
        ],
        "words": [
            "KeyGenerator",
            "generate"
        ]
    },
    "WXSSessionManager": {
        "methods": [
            "getSessionManager",
            "initialization",
            "lookup",
            "connectClient",
            "getMapSuffix",
            "setMapSuffix",
            "getGridConnectString",
            "setGridConnectString",
            "getGridName",
            "setGridName",
            "getGridUsername",
            "setGridUsername",
            "getGridPassword",
            "setGridPassword",
            "isIntegrateWithWASTransactions",
            "setIntegrateWithWASTransactions",
            "getDisableNearCacheNameString",
            "setDisableNearCacheNameString",
            "getPartitionFieldNameString",
            "setPartitionFieldNameString",
            "getPartitionFieldName",
            "getTxManager",
            "setTxManager",
            "prepareForTransaction",
            "getObjectGrid",
            "getObjectGridSession",
            "getBackingMap"
        ],
        "method_calls": [
            {
                "method_name": "getName",
                "class_name": "WXSSessionManager.class"
            },
            {
                "method_name": "getLogger",
                "class_name": "Logger"
            },
            {
                "method_name": "get",
                "class_name": "connectionManager"
            },
            {
                "method_name": "get",
                "class_name": "connectionManager"
            },
            {
                "method_name": "set",
                "class_name": "connectionManager"
            },
            {
                "method_name": "get",
                "class_name": "connectionManager"
            },
            {
                "method_name": "getMessage",
                "class_name": "e"
            },
            {
                "method_name": "warning",
                "class_name": "logger"
            },
            {
                "method_name": "lookup",
                "class_name": "ic"
            },
            {
                "method_name": "initialization",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "set",
                "class_name": "sharedGrid"
            },
            {
                "method_name": "getenv",
                "class_name": "System"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "lookup",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "lookup",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "lookup",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setDisableNearCacheNameString",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "lookup",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setPartitionFieldNameString",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "parse",
                "class_name": "JSONValue"
            },
            {
                "method_name": "toJSONString",
                "class_name": "((JSONObject) jsonObject)"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "startsWith",
                "class_name": "key"
            },
            {
                "method_name": "startsWith",
                "class_name": "key"
            },
            {
                "method_name": "get",
                "class_name": "json"
            },
            {
                "method_name": "get",
                "class_name": "elasticCachingServiceArray"
            },
            {
                "method_name": "get",
                "class_name": "elasticCachingService"
            },
            {
                "method_name": "get",
                "class_name": "credentials"
            },
            {
                "method_name": "setGridUsername",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "get",
                "class_name": "credentials"
            },
            {
                "method_name": "setGridPassword",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "get",
                "class_name": "credentials"
            },
            {
                "method_name": "get",
                "class_name": "credentials"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "setGridConnectString",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setGridName",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "keySet",
                "class_name": "json"
            },
            {
                "method_name": "setMapSuffix",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getDisableNearCacheNameString",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setDisableNearCacheNameString",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "getPartitionFieldNameString",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setPartitionFieldNameString",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "prepareForTransaction",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "replace",
                "class_name": "key"
            },
            {
                "method_name": "lookup",
                "class_name": "context"
            },
            {
                "method_name": "lookup",
                "class_name": "envContext"
            },
            {
                "method_name": "lookup",
                "class_name": "context"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "getProperty",
                "class_name": "System"
            },
            {
                "method_name": "getenv",
                "class_name": "System"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "get",
                "class_name": "sharedGrid"
            },
            {
                "method_name": "get",
                "class_name": "sharedGrid"
            },
            {
                "method_name": "get",
                "class_name": "sharedGrid"
            },
            {
                "method_name": "getObjectGridManager",
                "class_name": "ObjectGridManagerFactory"
            },
            {
                "method_name": "createObjectGridConfiguration",
                "class_name": "ObjectGridConfigFactory"
            },
            {
                "method_name": "createPlugin",
                "class_name": "ObjectGridConfigFactory"
            },
            {
                "method_name": "addPlugin",
                "class_name": "ogConfig"
            },
            {
                "method_name": "createBackingMapConfiguration",
                "class_name": "ObjectGridConfigFactory"
            },
            {
                "method_name": "setNearCacheEnabled",
                "class_name": "bmc"
            },
            {
                "method_name": "addBackingMapConfiguration",
                "class_name": "ogConfig"
            },
            {
                "method_name": "connect",
                "class_name": "ogm"
            },
            {
                "method_name": "getClientSecurityConfiguration",
                "class_name": "ClientSecurityConfigurationFactory"
            },
            {
                "method_name": "setSecurityEnabled",
                "class_name": "clientSC"
            },
            {
                "method_name": "setCredentialGenerator",
                "class_name": "clientSC"
            },
            {
                "method_name": "connect",
                "class_name": "ogm"
            },
            {
                "method_name": "getObjectGridManager",
                "class_name": "ObjectGridManagerFactory"
            },
            {
                "method_name": "getObjectGrid",
                "class_name": "ObjectGridManagerFactory.getObjectGridManager()"
            },
            {
                "method_name": "compareAndSet",
                "class_name": "sharedGrid"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "length",
                "class_name": "disableNearCacheNameString"
            },
            {
                "method_name": "split",
                "class_name": "disableNearCacheNameString"
            },
            {
                "method_name": "length",
                "class_name": "partitionFieldNameString"
            },
            {
                "method_name": "split",
                "class_name": "partitionFieldNameString"
            },
            {
                "method_name": "split",
                "class_name": "maps[i"
            },
            {
                "method_name": "put",
                "class_name": "partitionFieldNames"
            },
            {
                "method_name": "get",
                "class_name": "partitionFieldNames"
            },
            {
                "method_name": "finer",
                "class_name": "logger"
            },
            {
                "method_name": "getObjectGrid",
                "class_name": "this"
            },
            {
                "method_name": "setObjectGridForThread",
                "class_name": "txManager"
            },
            {
                "method_name": "connectClient",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getObjectGrid",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getSession",
                "class_name": "grid"
            },
            {
                "method_name": "getSession",
                "class_name": "txManager"
            },
            {
                "method_name": "getObjectGrid",
                "class_name": "this"
            },
            {
                "method_name": "getMap",
                "class_name": "this.getObjectGrid()"
            }
        ],
        "words": [
            "WXSSessionManager",
            "getSessionManager",
            "initialization",
            "lookup",
            "connectClient",
            "getMapSuffix",
            "setMapSuffix",
            "getGridConnectString",
            "setGridConnectString",
            "getGridName",
            "setGridName",
            "getGridUsername",
            "setGridUsername",
            "getGridPassword",
            "setGridPassword",
            "isIntegrateWithWASTransactions",
            "setIntegrateWithWASTransactions",
            "getDisableNearCacheNameString",
            "setDisableNearCacheNameString",
            "getPartitionFieldNameString",
            "setPartitionFieldNameString",
            "getPartitionFieldName",
            "getTxManager",
            "setTxManager",
            "prepareForTransaction",
            "getObjectGrid",
            "getObjectGridSession",
            "getBackingMap",
            "GRID_CONNECT_LOOKUP_KEY",
            "GRID_NAME_LOOKUP_KEY",
            "GRID_DISABLE_NEAR_CACHE_NAME_LOOKUP_KEY",
            "GRID_PARTITION_FIELD_NAME_LOOKUP_KEY",
            "logger",
            "SPLIT_COMMA",
            "SPLIT_COLON",
            "gridConnectString",
            "gridUsername",
            "gridPassword",
            "gridName",
            "integrateWithWASTransactions",
            "disableNearCacheNameString",
            "disableNearCacheNames",
            "partitionFieldNameString",
            "partitionFieldNames",
            "txManager",
            "mapSuffix",
            "sharedGrid",
            "connectionManager",
            "og",
            "ic",
            "vcapJSONString",
            "jsonObject",
            "json",
            "key",
            "elasticCachingServiceArray",
            "elasticCachingService",
            "credentials",
            "username",
            "password",
            "gridName",
            "catalogEndPoint",
            "k",
            "value",
            "lookup",
            "context",
            "envContext",
            "gridToReturn",
            "ogm",
            "ogConfig",
            "trans",
            "mapNames",
            "bmc",
            "mName",
            "ccc",
            "clientSC",
            "credGen",
            "grid",
            "maps",
            "mapDef",
            "i",
            "grid",
            "grid",
            "result",
            "grid",
            "e",
            "e",
            "e",
            "e",
            "key",
            "e",
            "cep",
            "gridName",
            "integrateWithWASTransactions",
            "disableNearCacheNames",
            "suffix",
            "gridConnectString",
            "gridName",
            "gridUsername",
            "gridPassword",
            "integrateWithWASTransactions",
            "disableNearCacheNameString",
            "partitionFieldNameString",
            "mapName",
            "txManager",
            "mapName",
            "For",
            "now",
            "to",
            "make",
            "it",
            "simple",
            "to",
            "only",
            "support",
            "one",
            "partition",
            "field",
            "Using",
            "Spring",
            "TX",
            "if",
            "WAS",
            "TX",
            "is",
            "not",
            "enabled",
            "*",
            "*",
            "Connect",
            "to",
            "a",
            "remote",
            "ObjectGrid",
            "*",
            "@param",
            "cep",
            "the",
            "catalog",
            "server",
            "end",
            "points",
            "in",
            "the",
            "form:",
            "<host>:<port>",
            "*",
            "@param",
            "gridName",
            "the",
            "name",
            "of",
            "the",
            "ObjectGrid",
            "to",
            "connect",
            "to",
            "that",
            "is",
            "managed",
            "by",
            "the",
            "Catalog",
            "Service",
            "*",
            "@return",
            "a",
            "client",
            "ObjectGrid",
            "connection.",
            "Using",
            "WAS",
            "Transactions",
            "as",
            "Highest",
            "Priority",
            "In",
            "the",
            "form",
            "of",
            "<MapName>:<PartitionFieldName>,<MapName>:<PartitionFieldName>",
            "This",
            "method",
            "needs",
            "to",
            "be",
            "called",
            "by",
            "the",
            "client",
            "from",
            "its",
            "thread",
            "before",
            "triggering",
            "a",
            "service",
            "with",
            "@Transactional",
            "annotation",
            "Helper",
            "function",
            "this.log.debug(\"Got",
            "session:\"+",
            "result);"
        ]
    },
    "CustomerSessionImpl": {
        "methods": [
            "getId",
            "setId",
            "getCustomerid",
            "setCustomerid",
            "getLastAccessedTime",
            "setLastAccessedTime",
            "getTimeoutTime",
            "setTimeoutTime",
            "toString",
            "equals"
        ],
        "method_calls": [
            {
                "method_name": "getClass",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getClass",
                "class_name": "obj"
            },
            {
                "method_name": "equals",
                "class_name": "customerid"
            },
            {
                "method_name": "equals",
                "class_name": "_id"
            },
            {
                "method_name": "equals",
                "class_name": "lastAccessedTime"
            },
            {
                "method_name": "equals",
                "class_name": "timeoutTime"
            }
        ],
        "words": [
            "CustomerSessionImpl",
            "getId",
            "setId",
            "getCustomerid",
            "setCustomerid",
            "getLastAccessedTime",
            "setLastAccessedTime",
            "getTimeoutTime",
            "setTimeoutTime",
            "toString",
            "equals",
            "serialVersionUID",
            "_id",
            "customerid",
            "lastAccessedTime",
            "timeoutTime",
            "other",
            "id",
            "customerid",
            "lastAccessedTime",
            "timeoutTime",
            "id",
            "customerid",
            "lastAccessedTime",
            "timeoutTime",
            "obj"
        ]
    },
    "AppConfig": {
        "methods": ["getClasses"],
        "method_calls": [{
            "method_name": "asList",
            "class_name": "Arrays"
        }],
        "words": [
            "AppConfig",
            "getClasses"
        ]
    },
    "AirportCodeMapping": {
        "methods": [
            "getAirportCode",
            "setAirportCode",
            "getAirportName",
            "setAirportName"
        ],
        "method_calls": [],
        "words": [
            "AirportCodeMapping",
            "getAirportCode",
            "setAirportCode",
            "getAirportName",
            "setAirportName",
            "airportCode",
            "airportName"
        ]
    },
    "CustomerServiceImpl": {
        "methods": [
            "initialization",
            "count",
            "countSessions",
            "createCustomer",
            "createAddress",
            "updateCustomer",
            "getCustomer",
            "getSession",
            "removeSession",
            "createSession",
            "invalidateSession"
        ],
        "method_calls": [
            {
                "method_name": "getName",
                "class_name": "BookingService.class"
            },
            {
                "method_name": "getLogger",
                "class_name": "Logger"
            },
            {
                "method_name": "getMessage",
                "class_name": "e"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "getSessionManager",
                "class_name": "WXSSessionManager"
            },
            {
                "method_name": "getObjectGrid",
                "class_name": "WXSSessionManager.getSessionManager()"
            },
            {
                "method_name": "getSessionManager",
                "class_name": "WXSSessionManager"
            },
            {
                "method_name": "getMapSuffix",
                "class_name": "WXSSessionManager.getSessionManager()"
            },
            {
                "method_name": "getSessionManager",
                "class_name": "WXSSessionManager"
            },
            {
                "method_name": "getMapSuffix",
                "class_name": "WXSSessionManager.getSessionManager()"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "getIndex",
                "class_name": "objectMap"
            },
            {
                "method_name": "findAll",
                "class_name": "mapIndex"
            },
            {
                "method_name": "next",
                "class_name": "keyIterator"
            },
            {
                "method_name": "hasNext",
                "class_name": "keyIterator"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "getIndex",
                "class_name": "objectMap"
            },
            {
                "method_name": "findAll",
                "class_name": "mapIndex"
            },
            {
                "method_name": "next",
                "class_name": "keyIterator"
            },
            {
                "method_name": "hasNext",
                "class_name": "keyIterator"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "getUsername",
                "class_name": "customer"
            },
            {
                "method_name": "insert",
                "class_name": "customerMap"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "getUsername",
                "class_name": "customer"
            },
            {
                "method_name": "update",
                "class_name": "customerMap"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "get",
                "class_name": "customerMap"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "get",
                "class_name": "customerSessionMap"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "ogSession"
            },
            {
                "method_name": "getId",
                "class_name": "session"
            },
            {
                "method_name": "remove",
                "class_name": "customerSessionMap"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "getId",
                "class_name": "cSession"
            },
            {
                "method_name": "insert",
                "class_name": "customerSessionMap"
            },
            {
                "method_name": "getSession",
                "class_name": "og"
            },
            {
                "method_name": "getMap",
                "class_name": "session"
            },
            {
                "method_name": "remove",
                "class_name": "customerSessionMap"
            }
        ],
        "words": [
            "CustomerServiceImpl",
            "initialization",
            "count",
            "countSessions",
            "createCustomer",
            "createAddress",
            "updateCustomer",
            "getCustomer",
            "getSession",
            "removeSession",
            "createSession",
            "invalidateSession",
            "BASE_CUSTOMER_MAP_NAME",
            "BASE_CUSTOMER_SESSION_MAP_NAME",
            "CUSTOMER_MAP_NAME",
            "CUSTOMER_SESSION_MAP_NAME",
            "logger",
            "og",
            "keyGenerator",
            "session",
            "objectMap",
            "mapIndex",
            "keyIterator",
            "result",
            "session",
            "objectMap",
            "mapIndex",
            "keyIterator",
            "result",
            "customer",
            "session",
            "customerMap",
            "address",
            "session",
            "customerMap",
            "session",
            "customerMap",
            "c",
            "session",
            "customerSessionMap",
            "ogSession",
            "customerSessionMap",
            "cSession",
            "session",
            "customerSessionMap",
            "session",
            "customerSessionMap",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "username",
            "password",
            "status",
            "total_miles",
            "miles_ytd",
            "phoneNumber",
            "phoneNumberType",
            "address",
            "streetAddress1",
            "streetAddress2",
            "city",
            "stateProvince",
            "country",
            "postalCode",
            "e",
            "customer",
            "e",
            "username",
            "e",
            "sessionid",
            "e",
            "session",
            "e",
            "sessionId",
            "customerId",
            "creation",
            "expiration",
            "e",
            "sessionid",
            "int",
            "partitions",
            "=",
            "og.getMap(CUSTOMER_MAP_NAME).getPartitionManager().getNumOfPartitions();\t\t\t\n\t\t\tObjectQuery",
            "query",
            "=",
            "og.getSession().createObjectQuery(\"SELECT",
            "COUNT",
            "(",
            "o",
            ")",
            "FROM",
            "\"",
            "+",
            "CUSTOMER_MAP_NAME",
            "+",
            "\"",
            "o",
            "\");\n\t\t\tfor(int",
            "i",
            "=",
            "0;",
            "i<partitions;i++){\n\t\t\t\tquery.setPartition(i);\n\t\t\t\tresult",
            "+=",
            "(Long)",
            "query.getSingleResult();\n\t\t\t}",
            "int",
            "partitions",
            "=",
            "og.getMap(CUSTOMER_SESSION_MAP_NAME).getPartitionManager().getNumOfPartitions();\n\t\t\tLong",
            "result",
            "=",
            "0L;\n\t\t\tObjectQuery",
            "query",
            "=",
            "og.getSession().createObjectQuery(\"SELECT",
            "COUNT",
            "(",
            "o",
            ")",
            "FROM",
            "\"",
            "+",
            "CUSTOMER_SESSION_MAP_NAME",
            "+",
            "\"",
            "o",
            "\");\n\t\t\tfor(int",
            "i",
            "=",
            "0;",
            "i<partitions;i++){\n\t\t\t\tquery.setPartition(i);\n\t\t\t\tresult",
            "+=",
            "(Long)",
            "query.getSingleResult();\n\t\t\t}",
            "Session",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "Session",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "Session",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "Session",
            "session",
            "=",
            "sessionManager.getObjectGridSession();",
            "Session",
            "session",
            "=",
            "sessionManager.getObjectGridSession();"
        ]
    },
    "LoginREST": {
        "methods": [
            "login",
            "logout"
        ],
        "method_calls": [
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getService",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "validateCustomer",
                "class_name": "customerService"
            },
            {
                "method_name": "status",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.status(Response.Status.FORBIDDEN)"
            },
            {
                "method_name": "createSession",
                "class_name": "customerService"
            },
            {
                "method_name": "getId",
                "class_name": "session"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "cookie",
                "class_name": "Response.ok(\"logged in\")"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(\"logged in\").cookie(sessCookie)"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "invalidateSession",
                "class_name": "customerService"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "cookie",
                "class_name": "Response.ok(\"logged out\")"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(\"logged out\").cookie(sessCookie)"
            }
        ],
        "words": [
            "LoginREST",
            "login",
            "logout",
            "SESSIONID_COOKIE_NAME",
            "customerService",
            "validCustomer",
            "session",
            "sessCookie",
            "sessCookie",
            "e",
            "login",
            "password",
            "e",
            "login",
            "sessionid",
            "TODO:",
            "The",
            "mobile",
            "client",
            "app",
            "requires",
            "JSON",
            "in",
            "the",
            "response.",
            "To",
            "support",
            "the",
            "mobile",
            "client",
            "app,",
            "choose",
            "one",
            "of",
            "the",
            "following",
            "designs:",
            "-",
            "Change",
            "this",
            "method",
            "to",
            "return",
            "JSON,",
            "and",
            "change",
            "the",
            "web",
            "app",
            "javascript",
            "to",
            "handle",
            "a",
            "JSON",
            "response.",
            "example:",
            "return",
            "Response.ok(\"{\\\"status\\\":\\\"logged-in\\\"}\").cookie(sessCookie).build();",
            "-",
            "Or",
            "create",
            "another",
            "method",
            "which",
            "is",
            "identical",
            "to",
            "this",
            "one,",
            "except",
            "returns",
            "JSON",
            "response.",
            "TODO:",
            "Need",
            "to",
            "fix",
            "the",
            "security",
            "issues",
            "here",
            "-",
            "they",
            "are",
            "pretty",
            "gross",
            "likely",
            "Have",
            "the",
            "web",
            "app",
            "use",
            "the",
            "original",
            "method,",
            "and",
            "the",
            "mobile",
            "client",
            "app",
            "use",
            "the",
            "new",
            "one.",
            "The",
            "following",
            "call",
            "will",
            "trigger",
            "query",
            "against",
            "all",
            "partitions,",
            "disable",
            "for",
            "now",
            "customerService.invalidateAllUserSessions(login);",
            "TODO:",
            "Want",
            "to",
            "do",
            "this",
            "with",
            "setMaxAge",
            "to",
            "zero,",
            "but",
            "to",
            "do",
            "that",
            "I",
            "need",
            "to",
            "have",
            "the",
            "same",
            "path/domain",
            "as",
            "cookie",
            "created",
            "in",
            "login.",
            "Unfortunately,",
            "until",
            "we",
            "have",
            "a",
            "elastic",
            "ip",
            "and",
            "domain",
            "name",
            "its",
            "hard",
            "to",
            "do",
            "that",
            "for",
            "\"localhost\".",
            "doing",
            "this",
            "will",
            "set",
            "the",
            "cookie",
            "to",
            "the",
            "empty",
            "string,",
            "but",
            "the",
            "browser",
            "will",
            "still",
            "send",
            "the",
            "cookie",
            "to",
            "future",
            "requests",
            "and",
            "the",
            "server",
            "will",
            "need",
            "to",
            "detect",
            "the",
            "value",
            "is",
            "invalid",
            "vs",
            "actually",
            "forcing",
            "the",
            "browser",
            "to",
            "time",
            "out",
            "the",
            "cookie",
            "and",
            "not",
            "send",
            "it",
            "to",
            "begin",
            "with"
        ]
    },
    "JmeterJTLParser": {
        "methods": [
            "setLogFileName",
            "processResultsDirectory",
            "parse",
            "getResults",
            "getResultsByUrl",
            "add"
        ],
        "method_calls": [
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "intValue",
                "class_name": "new Integer(matcherGroup)"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "intValue",
                "class_name": "new Integer(matcherGroup)"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "intValue",
                "class_name": "new Integer(matcherGroup)"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "intValue",
                "class_name": "new Integer(matcherGroup)"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "intValue",
                "class_name": "new Integer(matcherGroup)"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "intValue",
                "class_name": "new Integer(matcherGroup)"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "intValue",
                "class_name": "new Integer(matcherGroup)"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "intValue",
                "class_name": "new Integer(matcherGroup)"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "intValue",
                "class_name": "new Integer(matcherGroup)"
            },
            {
                "method_name": "getString",
                "class_name": "Messages"
            },
            {
                "method_name": "intValue",
                "class_name": "new Integer(responseTimeStepping)"
            },
            {
                "method_name": "setResponseTimeStepping",
                "class_name": "JtlTotals"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "listFiles",
                "class_name": "FileUtils"
            },
            {
                "method_name": "next",
                "class_name": "iterator"
            },
            {
                "method_name": "parse",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "hasNext",
                "class_name": "iterator"
            },
            {
                "method_name": "iterator",
                "class_name": "files"
            },
            {
                "method_name": "incrementFiles",
                "class_name": "totalAll"
            },
            {
                "method_name": "compile",
                "class_name": "Pattern"
            },
            {
                "method_name": "close",
                "class_name": "reader"
            },
            {
                "method_name": "readLine",
                "class_name": "reader"
            },
            {
                "method_name": "matcher",
                "class_name": "pattern"
            },
            {
                "method_name": "find",
                "class_name": "matcher"
            },
            {
                "method_name": "add",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "group",
                "class_name": "matcher"
            },
            {
                "method_name": "get",
                "class_name": "totalUrlMap"
            },
            {
                "method_name": "put",
                "class_name": "totalUrlMap"
            },
            {
                "method_name": "add",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "group",
                "class_name": "matcher"
            },
            {
                "method_name": "get",
                "class_name": "threadCounter"
            },
            {
                "method_name": "intValue",
                "class_name": "threadCnt"
            },
            {
                "method_name": "valueOf",
                "class_name": "Integer"
            },
            {
                "method_name": "put",
                "class_name": "threadCounter"
            },
            {
                "method_name": "readLine",
                "class_name": "reader"
            },
            {
                "method_name": "setThreadMap",
                "class_name": "totalAll"
            },
            {
                "method_name": "getCount",
                "class_name": "totalAll"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "group",
                "class_name": "matcher"
            },
            {
                "method_name": "parseLong",
                "class_name": "Long"
            },
            {
                "method_name": "addTimestamp",
                "class_name": "total"
            },
            {
                "method_name": "group",
                "class_name": "matcher"
            },
            {
                "method_name": "parseInt",
                "class_name": "Integer"
            },
            {
                "method_name": "addTime",
                "class_name": "total"
            },
            {
                "method_name": "group",
                "class_name": "matcher"
            },
            {
                "method_name": "addReturnCode",
                "class_name": "total"
            },
            {
                "method_name": "group",
                "class_name": "matcher"
            },
            {
                "method_name": "equalsIgnoreCase",
                "class_name": "matcher.group(GROUP_S)"
            },
            {
                "method_name": "incrementFailures",
                "class_name": "total"
            },
            {
                "method_name": "group",
                "class_name": "matcher"
            },
            {
                "method_name": "isEmpty",
                "class_name": "strFlightCount"
            },
            {
                "method_name": "parseInt",
                "class_name": "Integer"
            },
            {
                "method_name": "addToFlight",
                "class_name": "total"
            },
            {
                "method_name": "group",
                "class_name": "matcher"
            },
            {
                "method_name": "isEmpty",
                "class_name": "strFlightCount"
            },
            {
                "method_name": "parseInt",
                "class_name": "Integer"
            },
            {
                "method_name": "addFlightRetCount",
                "class_name": "total"
            },
            {
                "method_name": "group",
                "class_name": "matcher"
            },
            {
                "method_name": "equalsIgnoreCase",
                "class_name": "oneWay"
            },
            {
                "method_name": "incrementOneWayCount",
                "class_name": "total"
            }
        ],
        "words": [
            "JmeterJTLParser",
            "setLogFileName",
            "processResultsDirectory",
            "parse",
            "getResults",
            "getResultsByUrl",
            "add",
            "jmeterJTLFileName",
            "regEx",
            "GROUP_T",
            "GROUP_TS",
            "GROUP_S",
            "GROUP_LB",
            "GROUP_RC",
            "GROUP_TN",
            "GROUP_FLIGHTTOCOUNT",
            "GROUP_FLIGHTRETCOUNT",
            "GROUP_ONEWAY",
            "totalAll",
            "totalUrlMap",
            "jtlRegularExpression",
            "matcherGroup",
            "responseTimeStepping",
            "root",
            "files",
            "file",
            "iterator",
            "pattern",
            "threadCounter",
            "reader",
            "line",
            "matcher",
            "url",
            "urlTotals",
            "threadName",
            "threadCnt",
            "timestamp",
            "time",
            "rc",
            "strFlightCount",
            "count",
            "oneWay",
            "logFileName",
            "e",
            "dirName",
            "jmeterJTLfile",
            "matcher",
            "total",
            "NOTE:",
            "The",
            "regular",
            "expression",
            "depends",
            "on",
            "user.properties",
            "in",
            "jmeter",
            "having",
            "the",
            "sample_variables",
            "property",
            "added.",
            "sample_variables=FLIGHTTOCOUNT,FLIGHTRETCOUNT,ONEWAY"
        ]
    },
    "AddressInfo": {
        "methods": [
            "getStreetAddress1",
            "setStreetAddress1",
            "getStreetAddress2",
            "setStreetAddress2",
            "getCity",
            "setCity",
            "getStateProvince",
            "setStateProvince",
            "getCountry",
            "setCountry",
            "getPostalCode",
            "setPostalCode",
            "toString",
            "equals"
        ],
        "method_calls": [
            {
                "method_name": "getStreetAddress1",
                "class_name": "address"
            },
            {
                "method_name": "getStreetAddress2",
                "class_name": "address"
            },
            {
                "method_name": "getCity",
                "class_name": "address"
            },
            {
                "method_name": "getStateProvince",
                "class_name": "address"
            },
            {
                "method_name": "getCountry",
                "class_name": "address"
            },
            {
                "method_name": "getPostalCode",
                "class_name": "address"
            },
            {
                "method_name": "getClass",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getClass",
                "class_name": "obj"
            },
            {
                "method_name": "equals",
                "class_name": "city"
            },
            {
                "method_name": "equals",
                "class_name": "country"
            },
            {
                "method_name": "equals",
                "class_name": "postalCode"
            },
            {
                "method_name": "equals",
                "class_name": "stateProvince"
            },
            {
                "method_name": "equals",
                "class_name": "streetAddress1"
            },
            {
                "method_name": "equals",
                "class_name": "streetAddress2"
            }
        ],
        "words": [
            "AddressInfo",
            "getStreetAddress1",
            "setStreetAddress1",
            "getStreetAddress2",
            "setStreetAddress2",
            "getCity",
            "setCity",
            "getStateProvince",
            "setStateProvince",
            "getCountry",
            "setCountry",
            "getPostalCode",
            "setPostalCode",
            "toString",
            "equals",
            "serialVersionUID",
            "streetAddress1",
            "streetAddress2",
            "city",
            "stateProvince",
            "country",
            "postalCode",
            "other",
            "streetAddress1",
            "streetAddress2",
            "city",
            "stateProvince",
            "country",
            "postalCode",
            "address",
            "streetAddress1",
            "streetAddress2",
            "city",
            "stateProvince",
            "country",
            "postalCode",
            "obj"
        ]
    },
    "BookingImpl": {
        "methods": [
            "getPkey",
            "getCustomerId",
            "setPkey",
            "getFlightKey",
            "setFlightKey",
            "setFlight",
            "getDateOfBooking",
            "setDateOfBooking",
            "getCustomer",
            "setCustomer",
            "getFlight",
            "toString",
            "equals",
            "getBookingId",
            "getFlightId"
        ],
        "method_calls": [
            {
                "method_name": "getUsername",
                "class_name": "customer"
            },
            {
                "method_name": "getPkey",
                "class_name": "flight"
            },
            {
                "method_name": "getCustomerId",
                "class_name": "pkey"
            },
            {
                "method_name": "getClass",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getClass",
                "class_name": "obj"
            },
            {
                "method_name": "equals",
                "class_name": "customer"
            },
            {
                "method_name": "equals",
                "class_name": "dateOfBooking"
            },
            {
                "method_name": "equals",
                "class_name": "flight"
            },
            {
                "method_name": "equals",
                "class_name": "flightKey"
            },
            {
                "method_name": "equals",
                "class_name": "pkey"
            },
            {
                "method_name": "getId",
                "class_name": "pkey"
            },
            {
                "method_name": "getFlightId",
                "class_name": "flight"
            }
        ],
        "words": [
            "BookingImpl",
            "getPkey",
            "getCustomerId",
            "setPkey",
            "getFlightKey",
            "setFlightKey",
            "setFlight",
            "getDateOfBooking",
            "setDateOfBooking",
            "getCustomer",
            "setCustomer",
            "getFlight",
            "toString",
            "equals",
            "getBookingId",
            "getFlightId",
            "serialVersionUID",
            "pkey",
            "flightKey",
            "dateOfBooking",
            "customer",
            "flight",
            "other",
            "id",
            "dateOfFlight",
            "customer",
            "flight",
            "id",
            "dateOfFlight",
            "customer",
            "flight",
            "pkey",
            "flightKey",
            "flight",
            "dateOfBooking",
            "customer",
            "obj",
            "adding",
            "the",
            "method",
            "for",
            "index",
            "calculation"
        ]
    },
    "DatastoreFactory": {
        "methods": ["getDatastore"],
        "method_calls": [
            {
                "method_name": "getenv",
                "class_name": "System"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "parse",
                "class_name": "JSONValue"
            },
            {
                "method_name": "toJSONString",
                "class_name": "json"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "contains",
                "class_name": "((String) key)"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "get",
                "class_name": "json"
            },
            {
                "method_name": "get",
                "class_name": "mongoServiceArray"
            },
            {
                "method_name": "get",
                "class_name": "mongoService"
            },
            {
                "method_name": "get",
                "class_name": "credentials"
            },
            {
                "method_name": "get",
                "class_name": "credentials"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "keySet",
                "class_name": "json"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "getResource",
                "class_name": "DatastoreFactory.class"
            },
            {
                "method_name": "openStream",
                "class_name": "DatastoreFactory.class.getResource(\"/acmeair-mongo.properties\")"
            },
            {
                "method_name": "load",
                "class_name": "prop"
            },
            {
                "method_name": "getProperty",
                "class_name": "prop"
            },
            {
                "method_name": "getProperty",
                "class_name": "prop"
            },
            {
                "method_name": "getProperty",
                "class_name": "prop"
            },
            {
                "method_name": "getProperty",
                "class_name": "prop"
            },
            {
                "method_name": "writeConcern",
                "class_name": "new MongoClientOptions.Builder()"
            },
            {
                "method_name": "connectionsPerHost",
                "class_name": "new MongoClientOptions.Builder().writeConcern(new WriteConcern(w, 0, fsync))"
            },
            {
                "method_name": "threadsAllowedToBlockForConnectionMultiplier",
                "class_name": "new MongoClientOptions.Builder().writeConcern(new WriteConcern(w, 0, fsync)).connectionsPerHost(connectionsPerHost)"
            },
            {
                "method_name": "getDatabase",
                "class_name": "mongoURI"
            },
            {
                "method_name": "createDatastore",
                "class_name": "morphia"
            },
            {
                "method_name": "getMongo",
                "class_name": "result"
            },
            {
                "method_name": "getMongoClientOptions",
                "class_name": "result.getMongo()"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "ensureIndex",
                "class_name": "result"
            },
            {
                "method_name": "ensureIndex",
                "class_name": "result"
            },
            {
                "method_name": "ensureIndex",
                "class_name": "result"
            }
        ],
        "words": [
            "DatastoreFactory",
            "getDatastore",
            "mongourl",
            "vcapJSONString",
            "jsonObject",
            "json",
            "mongoServiceArray",
            "mongoService",
            "credentials",
            "key",
            "result",
            "prop",
            "fsync",
            "w",
            "connectionsPerHost",
            "threadsAllowedToBlockForConnectionMultiplier",
            "builder",
            "mongoURI",
            "mongo",
            "morphia",
            "e",
            "ds",
            "The",
            "converter",
            "is",
            "added",
            "for",
            "handing",
            "JDK",
            "7",
            "issue",
            "result.getMapper().getConverters().addConverter(new",
            "BigDecimalConverter());",
            "result.getMapper().getConverters().addConverter(new",
            "BigIntegerConverter());",
            "To",
            "match",
            "the",
            "local",
            "options",
            "Enable",
            "index"
        ]
    },
    "FlightService": {
        "methods": [
            "getFlightByFlightId",
            "getFlight",
            "getFlightByAirportsAndDepartureDate",
            "getFlightByAirports",
            "getFlightSegment",
            "getFlightBySegment",
            "storeAirportMapping",
            "createAirportCodeMapping",
            "createNewFlight",
            "storeFlightSegment",
            "storeFlightSegment",
            "countFlightSegments",
            "countFlights",
            "countAirports"
        ],
        "method_calls": [
            {
                "method_name": "getName",
                "class_name": "FlightService.class"
            },
            {
                "method_name": "getLogger",
                "class_name": "Logger"
            },
            {
                "method_name": "get",
                "class_name": "flightPKtoFlightCache"
            },
            {
                "method_name": "getFlight",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "putIfAbsent",
                "class_name": "flightPKtoFlightCache"
            },
            {
                "method_name": "isLoggable",
                "class_name": "logger"
            },
            {
                "method_name": "toString",
                "class_name": "deptDate"
            },
            {
                "method_name": "fine",
                "class_name": "logger"
            },
            {
                "method_name": "get",
                "class_name": "originAndDestPortToSegmentCache"
            },
            {
                "method_name": "getFlightSegment",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "putIfAbsent",
                "class_name": "originAndDestPortToSegmentCache"
            },
            {
                "method_name": "getFlightName",
                "class_name": "segment"
            },
            {
                "method_name": "getFlightName",
                "class_name": "segment"
            },
            {
                "method_name": "toString",
                "class_name": "deptDate"
            },
            {
                "method_name": "get",
                "class_name": "flightSegmentAndDataToFlightCache"
            },
            {
                "method_name": "getFlightBySegment",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "putIfAbsent",
                "class_name": "flightSegmentAndDataToFlightCache"
            },
            {
                "method_name": "isLoggable",
                "class_name": "logger"
            },
            {
                "method_name": "finest",
                "class_name": "logger"
            },
            {
                "method_name": "getFlightSegment",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getFlightBySegment",
                "class_name": "Optional.empty"
            }
        ],
        "words": [
            "FlightService",
            "getFlightByFlightId",
            "getFlight",
            "getFlightByAirportsAndDepartureDate",
            "getFlightByAirports",
            "getFlightSegment",
            "getFlightBySegment",
            "storeAirportMapping",
            "createAirportCodeMapping",
            "createNewFlight",
            "storeFlightSegment",
            "storeFlightSegment",
            "countFlightSegments",
            "countFlights",
            "countAirports",
            "logger",
            "originAndDestPortToSegmentCache",
            "flightSegmentAndDataToFlightCache",
            "flightPKtoFlightCache",
            "flight",
            "originPortAndDestPortQueryString",
            "segment",
            "segId",
            "flightSegmentIdAndScheduledDepartureTimeQueryString",
            "flights",
            "segment",
            "e",
            "flightId",
            "flightSegment",
            "flightId",
            "flightSegment",
            "fromAirport",
            "toAirport",
            "deptDate",
            "fromAirport",
            "toAirport",
            "fromAirport",
            "toAirport",
            "segment",
            "deptDate",
            "mapping",
            "airportCode",
            "airportName",
            "flightSegmentId",
            "scheduledDepartureTime",
            "scheduledArrivalTime",
            "firstClassBaseCost",
            "economyClassBaseCost",
            "numFirstClassSeats",
            "numEconomyClassSeats",
            "airplaneTypeId",
            "flightSeg",
            "flightName",
            "origPort",
            "destPort",
            "miles",
            "TODO:need",
            "to",
            "find",
            "a",
            "way",
            "to",
            "invalidate",
            "these",
            "maps",
            "cache",
            "flights",
            "that",
            "not",
            "available",
            "(checks",
            "against",
            "sentinel",
            "value",
            "above",
            "indirectly)",
            "NOTE:",
            "This",
            "is",
            "not",
            "cached"
        ]
    },
    "AcmeAirConstants": {
        "methods": [],
        "method_calls": [],
        "words": ["AcmeAirConstants"]
    },
    "ResultParser": {
        "methods": [
            "getMultipleChartResults",
            "addUp",
            "processDirectory",
            "generateChartStrings",
            "generateDefaultChartSettings",
            "generateMultipleLinesCharString",
            "getAllInputList",
            "getAllTimeList",
            "getCharStrings",
            "getData",
            "getFileName",
            "setFileName",
            "getResults",
            "processData",
            "processFile",
            "processLine",
            "processMultiLineData",
            "getMultipleChartTitle",
            "setMultipleYAxisLabel",
            "setMultipleChartTitle",
            "getMultipleYAxisLabel"
        ],
        "method_calls": [
            {
                "method_name": "getAllInputList",
                "class_name": "overallResults"
            },
            {
                "method_name": "isEmpty",
                "class_name": "overallResults.getAllInputList()"
            },
            {
                "method_name": "setAllInputList",
                "class_name": "overallResults"
            },
            {
                "method_name": "getAllInputList",
                "class_name": "overallResults"
            },
            {
                "method_name": "size",
                "class_name": "overallResults.getAllInputList()"
            },
            {
                "method_name": "size",
                "class_name": "list"
            },
            {
                "method_name": "size",
                "class_name": "list"
            },
            {
                "method_name": "getAllInputList",
                "class_name": "overallResults"
            },
            {
                "method_name": "get",
                "class_name": "overallResults.getAllInputList()"
            },
            {
                "method_name": "get",
                "class_name": "list"
            },
            {
                "method_name": "getAllInputList",
                "class_name": "overallResults"
            },
            {
                "method_name": "set",
                "class_name": "overallResults.getAllInputList()"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "getFileName",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "listFiles",
                "class_name": "FileUtils"
            },
            {
                "method_name": "next",
                "class_name": "iterator"
            },
            {
                "method_name": "processFile",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "hasNext",
                "class_name": "iterator"
            },
            {
                "method_name": "iterator",
                "class_name": "files"
            },
            {
                "method_name": "newData",
                "class_name": "Data"
            },
            {
                "method_name": "newColor",
                "class_name": "Color"
            },
            {
                "method_name": "newLine",
                "class_name": "Plots"
            },
            {
                "method_name": "newLineStyle",
                "class_name": "LineStyle"
            },
            {
                "method_name": "setLineStyle",
                "class_name": "line1"
            },
            {
                "method_name": "newColor",
                "class_name": "Color"
            },
            {
                "method_name": "addShapeMarkers",
                "class_name": "line1"
            },
            {
                "method_name": "newLineChart",
                "class_name": "GCharts"
            },
            {
                "method_name": "getScale_max",
                "class_name": "overallResults"
            },
            {
                "method_name": "newNumericRangeAxisLabels",
                "class_name": "AxisLabelsFactory"
            },
            {
                "method_name": "addYAxisLabels",
                "class_name": "chart"
            },
            {
                "method_name": "size",
                "class_name": "timeList"
            },
            {
                "method_name": "newAxisLabels",
                "class_name": "AxisLabelsFactory"
            },
            {
                "method_name": "addXAxisLabels",
                "class_name": "chart"
            },
            {
                "method_name": "generateDefaultChartSettings",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "newAxisStyle",
                "class_name": "AxisStyle"
            },
            {
                "method_name": "newAxisLabels",
                "class_name": "AxisLabelsFactory"
            },
            {
                "method_name": "setAxisStyle",
                "class_name": "yAxisLabel"
            },
            {
                "method_name": "newAxisLabels",
                "class_name": "AxisLabelsFactory"
            },
            {
                "method_name": "setAxisStyle",
                "class_name": "time"
            },
            {
                "method_name": "addYAxisLabels",
                "class_name": "chart"
            },
            {
                "method_name": "addXAxisLabels",
                "class_name": "chart"
            },
            {
                "method_name": "setDataEncoding",
                "class_name": "chart"
            },
            {
                "method_name": "setSize",
                "class_name": "chart"
            },
            {
                "method_name": "setTitle",
                "class_name": "chart"
            },
            {
                "method_name": "setGrid",
                "class_name": "chart"
            },
            {
                "method_name": "newSolidFill",
                "class_name": "Fills"
            },
            {
                "method_name": "setBackgroundFill",
                "class_name": "chart"
            },
            {
                "method_name": "newLinearGradientFill",
                "class_name": "Fills"
            },
            {
                "method_name": "addColorAndOffset",
                "class_name": "fill"
            },
            {
                "method_name": "setAreaFill",
                "class_name": "chart"
            },
            {
                "method_name": "toURLString",
                "class_name": "chart"
            },
            {
                "method_name": "getCharStrings",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "add",
                "class_name": "getCharStrings()"
            },
            {
                "method_name": "size",
                "class_name": "list"
            },
            {
                "method_name": "size",
                "class_name": "list"
            },
            {
                "method_name": "get",
                "class_name": "list"
            },
            {
                "method_name": "getInputList",
                "class_name": "list.get(i)"
            },
            {
                "method_name": "processMultiLineData",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "get",
                "class_name": "list"
            },
            {
                "method_name": "getTitle",
                "class_name": "list.get(i)"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "newData",
                "class_name": "Data"
            },
            {
                "method_name": "getColor",
                "class_name": "ResultParserHelper"
            },
            {
                "method_name": "get",
                "class_name": "list"
            },
            {
                "method_name": "getTitle",
                "class_name": "list.get(i)"
            },
            {
                "method_name": "newLine",
                "class_name": "Plots"
            },
            {
                "method_name": "newLineStyle",
                "class_name": "LineStyle"
            },
            {
                "method_name": "setLineStyle",
                "class_name": "lines[i"
            },
            {
                "method_name": "size",
                "class_name": "list"
            },
            {
                "method_name": "newLineChart",
                "class_name": "GCharts"
            },
            {
                "method_name": "getOverallScale_max",
                "class_name": "overallResults"
            },
            {
                "method_name": "newNumericRangeAxisLabels",
                "class_name": "AxisLabelsFactory"
            },
            {
                "method_name": "addYAxisLabels",
                "class_name": "chart"
            },
            {
                "method_name": "get",
                "class_name": "list"
            },
            {
                "method_name": "getTimeList",
                "class_name": "list.get(0)"
            },
            {
                "method_name": "newAxisLabels",
                "class_name": "AxisLabelsFactory"
            },
            {
                "method_name": "addXAxisLabels",
                "class_name": "chart"
            },
            {
                "method_name": "generateDefaultChartSettings",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getAllInputList",
                "class_name": "overallResults"
            },
            {
                "method_name": "getAllTimeList",
                "class_name": "overallResults"
            },
            {
                "method_name": "getMultipleChartResults",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getCharStrings",
                "class_name": "getMultipleChartResults()"
            },
            {
                "method_name": "getMessage",
                "class_name": "e"
            },
            {
                "method_name": "println",
                "class_name": "System.err"
            },
            {
                "method_name": "processLine",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "readLine",
                "class_name": "br"
            },
            {
                "method_name": "close",
                "class_name": "in"
            },
            {
                "method_name": "getInputList",
                "class_name": "results"
            },
            {
                "method_name": "addUp",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getTimeList",
                "class_name": "results"
            },
            {
                "method_name": "setAllTimeList",
                "class_name": "overallResults"
            },
            {
                "method_name": "getMultipleChartResults",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getResults",
                "class_name": "getMultipleChartResults()"
            },
            {
                "method_name": "size",
                "class_name": "inputList"
            },
            {
                "method_name": "max",
                "class_name": "Collections"
            },
            {
                "method_name": "setScale_max",
                "class_name": "overallResults"
            },
            {
                "method_name": "setScale_max",
                "class_name": "overallResults"
            },
            {
                "method_name": "getOverallScale_max",
                "class_name": "overallResults"
            },
            {
                "method_name": "getScale_max",
                "class_name": "overallResults"
            },
            {
                "method_name": "getScale_max",
                "class_name": "overallResults"
            },
            {
                "method_name": "setOverallScale_max",
                "class_name": "overallResults"
            },
            {
                "method_name": "getScale_max",
                "class_name": "overallResults"
            },
            {
                "method_name": "scaleInputsData",
                "class_name": "ResultParserHelper"
            },
            {
                "method_name": "size",
                "class_name": "inputList"
            },
            {
                "method_name": "getOverallScale_max",
                "class_name": "overallResults"
            },
            {
                "method_name": "scaleInputsData",
                "class_name": "ResultParserHelper"
            },
            {
                "method_name": "getMultipleChartTitle",
                "class_name": "multipleChartResults"
            },
            {
                "method_name": "setMultipleChartYAxisLabel",
                "class_name": "multipleChartResults"
            },
            {
                "method_name": "setMultipleChartTitle",
                "class_name": "multipleChartResults"
            },
            {
                "method_name": "getMultipleChartYAxisLabel",
                "class_name": "multipleChartResults"
            }
        ],
        "words": [
            "ResultParser",
            "getMultipleChartResults",
            "addUp",
            "processDirectory",
            "generateChartStrings",
            "generateDefaultChartSettings",
            "generateMultipleLinesCharString",
            "getAllInputList",
            "getAllTimeList",
            "getCharStrings",
            "getData",
            "getFileName",
            "setFileName",
            "getResults",
            "processData",
            "processFile",
            "processLine",
            "processMultiLineData",
            "getMultipleChartTitle",
            "setMultipleYAxisLabel",
            "setMultipleChartTitle",
            "getMultipleYAxisLabel",
            "multipleChartResults",
            "overallResults",
            "size",
            "i",
            "root",
            "files",
            "file",
            "iterator",
            "line1",
            "chart",
            "url",
            "axisStyle",
            "yAxisLabel",
            "time",
            "fill",
            "url",
            "lines",
            "multiLineData",
            "i",
            "chart",
            "url",
            "results",
            "fstream",
            "in",
            "br",
            "strLine",
            "scale_factor",
            "scale_factor",
            "list",
            "e",
            "dirName",
            "titileLabel",
            "ylabel",
            "xlable",
            "inputs",
            "timeList",
            "addToList",
            "titileLabel",
            "ylabel",
            "xlable",
            "chart",
            "addToList",
            "titileLabel",
            "ylabel",
            "xlabel",
            "list",
            "e",
            "fileName",
            "fileName",
            "inputList",
            "isTotalThroughput",
            "file",
            "result",
            "strLine",
            "inputList",
            "label",
            "label",
            "if",
            "empty,",
            "don't",
            "need",
            "to",
            "add",
            "up",
            "Defining",
            "axis",
            "info",
            "and",
            "styles",
            "Defining",
            "axis",
            "info",
            "and",
            "styles",
            "Get",
            "the",
            "object",
            "of",
            "DataInputStream"
        ]
    },
    "AcmeAirConfiguration": {
        "methods": [
            "initialization",
            "getDataServiceInfo",
            "getActiveDataServiceInfo",
            "getRuntimeInfo",
            "countBookings",
            "countCustomer",
            "countCustomerSessions",
            "countFlights",
            "countFlightSegments",
            "countAirports"
        ],
        "method_calls": [
            {
                "method_name": "getName",
                "class_name": "AcmeAirConfiguration.class"
            },
            {
                "method_name": "getLogger",
                "class_name": "Logger"
            },
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getService",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getService",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getService",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "lookup",
                "class_name": "new InitialContext()"
            },
            {
                "method_name": "info",
                "class_name": "logger"
            },
            {
                "method_name": "severe",
                "class_name": "logger"
            },
            {
                "method_name": "lookup",
                "class_name": "new InitialContext()"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getServices",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "fine",
                "class_name": "logger"
            },
            {
                "method_name": "getKey",
                "class_name": "entry"
            },
            {
                "method_name": "getValue",
                "class_name": "entry"
            },
            {
                "method_name": "add",
                "class_name": "list"
            },
            {
                "method_name": "entrySet",
                "class_name": "services"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(\"Unknown\")"
            },
            {
                "method_name": "fine",
                "class_name": "logger"
            },
            {
                "method_name": "instance",
                "class_name": "ServiceLocator"
            },
            {
                "method_name": "getServiceType",
                "class_name": "ServiceLocator.instance()"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(ServiceLocator.instance().getServiceType())"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "fine",
                "class_name": "logger"
            },
            {
                "method_name": "add",
                "class_name": "list"
            },
            {
                "method_name": "getProperty",
                "class_name": "System"
            },
            {
                "method_name": "add",
                "class_name": "list"
            },
            {
                "method_name": "getProperty",
                "class_name": "System"
            },
            {
                "method_name": "add",
                "class_name": "list"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(-1)"
            },
            {
                "method_name": "count",
                "class_name": "bs"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(count)"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(-1)"
            },
            {
                "method_name": "count",
                "class_name": "customerService"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(customerCount)"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(-1)"
            },
            {
                "method_name": "countSessions",
                "class_name": "customerService"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(customerCount)"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(-1)"
            },
            {
                "method_name": "countFlights",
                "class_name": "flightService"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(count)"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(-1)"
            },
            {
                "method_name": "countFlightSegments",
                "class_name": "flightService"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(count)"
            },
            {
                "method_name": "printStackTrace",
                "class_name": "e"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(-1)"
            },
            {
                "method_name": "countAirports",
                "class_name": "flightService"
            },
            {
                "method_name": "ok",
                "class_name": "Response"
            },
            {
                "method_name": "build",
                "class_name": "Response.ok(count)"
            }
        ],
        "words": [
            "AcmeAirConfiguration",
            "initialization",
            "getDataServiceInfo",
            "getActiveDataServiceInfo",
            "getRuntimeInfo",
            "countBookings",
            "countCustomer",
            "countCustomerSessions",
            "countFlights",
            "countFlightSegments",
            "countAirports",
            "beanManager",
            "logger",
            "bs",
            "customerService",
            "flightService",
            "list",
            "services",
            "data",
            "entry",
            "list",
            "data",
            "name",
            "description",
            "count",
            "customerCount",
            "customerCount",
            "count",
            "count",
            "count",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e",
            "e"
        ]
    }
}