{
    "Account": {
        "methods": [
            "getUsername",
            "setUsername",
            "getPassword",
            "setPassword",
            "getEmail",
            "setEmail",
            "getFirstName",
            "setFirstName",
            "getLastName",
            "setLastName",
            "getStatus",
            "setStatus",
            "getAddress1",
            "setAddress1",
            "getAddress2",
            "setAddress2",
            "getCity",
            "setCity",
            "getState",
            "setState",
            "getZip",
            "setZip",
            "getCountry",
            "setCountry",
            "getPhone",
            "setPhone",
            "getFavouriteCategoryId",
            "setFavouriteCategoryId",
            "getLanguagePreference",
            "setLanguagePreference",
            "isListOption",
            "setListOption",
            "getListOptionAsInt",
            "isBannerOption",
            "setBannerOption",
            "getBannerOptionAsInt",
            "getBannerName",
            "setBannerName"
        ],
        "method_calls": [],
        "words": [
            "Account",
            "getUsername",
            "setUsername",
            "getPassword",
            "setPassword",
            "getEmail",
            "setEmail",
            "getFirstName",
            "setFirstName",
            "getLastName",
            "setLastName",
            "getStatus",
            "setStatus",
            "getAddress1",
            "setAddress1",
            "getAddress2",
            "setAddress2",
            "getCity",
            "setCity",
            "getState",
            "setState",
            "getZip",
            "setZip",
            "getCountry",
            "setCountry",
            "getPhone",
            "setPhone",
            "getFavouriteCategoryId",
            "setFavouriteCategoryId",
            "getLanguagePreference",
            "setLanguagePreference",
            "isListOption",
            "setListOption",
            "getListOptionAsInt",
            "isBannerOption",
            "setBannerOption",
            "getBannerOptionAsInt",
            "getBannerName",
            "setBannerName",
            "username",
            "password",
            "email",
            "firstName",
            "lastName",
            "status",
            "address1",
            "address2",
            "city",
            "state",
            "zip",
            "country",
            "phone",
            "favouriteCategoryId",
            "languagePreference",
            "listOption",
            "bannerOption",
            "bannerName",
            "username",
            "password",
            "email",
            "firstName",
            "lastName",
            "status",
            "address1",
            "address2",
            "city",
            "state",
            "zip",
            "country",
            "phone",
            "favouriteCategoryId",
            "languagePreference",
            "listOption",
            "bannerOption",
            "bannerName",
            "Private",
            "Fields",
            "JavaBeans",
            "Properties"
        ],
        "source": "public class Account implements Serializable {\n\n    /* Private Fields */\n    private String username;\n\n    private String password;\n\n    private String email;\n\n    private String firstName;\n\n    private String lastName;\n\n    private String status;\n\n    private String address1;\n\n    private String address2;\n\n    private String city;\n\n    private String state;\n\n    private String zip;\n\n    private String country;\n\n    private String phone;\n\n    private String favouriteCategoryId;\n\n    private String languagePreference;\n\n    private boolean listOption;\n\n    private boolean bannerOption;\n\n    private String bannerName;\n\n    /* JavaBeans Properties */\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getStatus() {\n        return status;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n\n    public String getAddress1() {\n        return address1;\n    }\n\n    public void setAddress1(String address1) {\n        this.address1 = address1;\n    }\n\n    public String getAddress2() {\n        return address2;\n    }\n\n    public void setAddress2(String address2) {\n        this.address2 = address2;\n    }\n\n    public String getCity() {\n        return city;\n    }\n\n    public void setCity(String city) {\n        this.city = city;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n    public void setState(String state) {\n        this.state = state;\n    }\n\n    public String getZip() {\n        return zip;\n    }\n\n    public void setZip(String zip) {\n        this.zip = zip;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n\n    public String getFavouriteCategoryId() {\n        return favouriteCategoryId;\n    }\n\n    public void setFavouriteCategoryId(String favouriteCategoryId) {\n        this.favouriteCategoryId = favouriteCategoryId;\n    }\n\n    public String getLanguagePreference() {\n        return languagePreference;\n    }\n\n    public void setLanguagePreference(String languagePreference) {\n        this.languagePreference = languagePreference;\n    }\n\n    public boolean isListOption() {\n        return listOption;\n    }\n\n    public void setListOption(boolean listOption) {\n        this.listOption = listOption;\n    }\n\n    public int getListOptionAsInt() {\n        return listOption ? 1 : 0;\n    }\n\n    public boolean isBannerOption() {\n        return bannerOption;\n    }\n\n    public void setBannerOption(boolean bannerOption) {\n        this.bannerOption = bannerOption;\n    }\n\n    public int getBannerOptionAsInt() {\n        return bannerOption ? 1 : 0;\n    }\n\n    public String getBannerName() {\n        return bannerName;\n    }\n\n    public void setBannerName(String bannerName) {\n        this.bannerName = bannerName;\n    }\n}"
    },
    "OracleSequenceDao": {
        "methods": ["getNextId"],
        "method_calls": [
            {
                "method_name": "setName",
                "class_name": "sequence"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForObject",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getNextId",
                "class_name": "sequence"
            }
        ],
        "words": [
            "OracleSequenceDao",
            "getNextId",
            "sequence",
            "name",
            "*",
            "*",
            "Get",
            "the",
            "next",
            "sequence",
            "using",
            "an",
            "Oracle",
            "thread-safe",
            "sequence",
            "*",
            "@param",
            "name",
            "Name",
            "is",
            "the",
            "name",
            "of",
            "the",
            "oracle",
            "sequence.",
            "*",
            "@return",
            "the",
            "next",
            "sequence"
        ],
        "source": "public class OracleSequenceDao extends SqlMapSequenceDao {\n\n    /**\n     * Get the next sequence using an Oracle thread-safe sequence\n     * @param name Name is the name of the oracle sequence.\n     * @return the next sequence\n     */\n    public int getNextId(String name) throws DataAccessException {\n        Sequence sequence = new Sequence();\n        sequence.setName(name);\n        sequence = (Sequence) getSqlMapClientTemplate().queryForObject(\"oracleSequence\", sequence);\n        return sequence.getNextId();\n    }\n}"
    },
    "ViewProductController": {
        "methods": [
            "setPetStore",
            "handleRequest"
        ],
        "method_calls": [
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "equals",
                "class_name": "\"next\""
            },
            {
                "method_name": "equals",
                "class_name": "\"previous\""
            },
            {
                "method_name": "previousPage",
                "class_name": "itemList"
            },
            {
                "method_name": "nextPage",
                "class_name": "itemList"
            },
            {
                "method_name": "put",
                "class_name": "model"
            },
            {
                "method_name": "put",
                "class_name": "model"
            },
            {
                "method_name": "getItemListByProduct",
                "class_name": "this.petStore"
            },
            {
                "method_name": "setPageSize",
                "class_name": "itemList"
            },
            {
                "method_name": "getProduct",
                "class_name": "this.petStore"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "put",
                "class_name": "model"
            },
            {
                "method_name": "put",
                "class_name": "model"
            }
        ],
        "words": [
            "ViewProductController",
            "setPetStore",
            "handleRequest",
            "petStore",
            "model",
            "productId",
            "itemList",
            "product",
            "page",
            "itemList",
            "product",
            "petStore",
            "request",
            "response"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 30.11.2003\n */\npublic class ViewProductController implements Controller {\n\n    private PetStoreFacade petStore;\n\n    public void setPetStore(PetStoreFacade petStore) {\n        this.petStore = petStore;\n    }\n\n    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        Map model = new HashMap();\n        String productId = request.getParameter(\"productId\");\n        if (productId != null) {\n            PagedListHolder itemList = new PagedListHolder(this.petStore.getItemListByProduct(productId));\n            itemList.setPageSize(4);\n            Product product = this.petStore.getProduct(productId);\n            request.getSession().setAttribute(\"ViewProductAction_itemList\", itemList);\n            request.getSession().setAttribute(\"ViewProductAction_product\", product);\n            model.put(\"itemList\", itemList);\n            model.put(\"product\", product);\n        } else {\n            PagedListHolder itemList = (PagedListHolder) request.getSession().getAttribute(\"ViewProductAction_itemList\");\n            Product product = (Product) request.getSession().getAttribute(\"ViewProductAction_product\");\n            String page = request.getParameter(\"page\");\n            if (\"next\".equals(page)) {\n                itemList.nextPage();\n            } else if (\"previous\".equals(page)) {\n                itemList.previousPage();\n            }\n            model.put(\"itemList\", itemList);\n            model.put(\"product\", product);\n        }\n        return new ModelAndView(\"Product\", model);\n    }\n}"
    },
    "CategoryDao": {
        "methods": [
            "getCategoryList",
            "getCategory"
        ],
        "method_calls": [],
        "words": [
            "CategoryDao",
            "getCategoryList",
            "getCategory",
            "categoryId"
        ],
        "source": "public interface CategoryDao {\n\n    List getCategoryList() throws DataAccessException;\n\n    Category getCategory(String categoryId) throws DataAccessException;\n}"
    },
    "ItemDao": {
        "methods": [
            "updateQuantity",
            "isItemInStock",
            "getItemListByProduct",
            "getItem"
        ],
        "method_calls": [],
        "words": [
            "ItemDao",
            "updateQuantity",
            "isItemInStock",
            "getItemListByProduct",
            "getItem",
            "order",
            "itemId",
            "productId",
            "itemId"
        ],
        "source": "public interface ItemDao {\n\n    public void updateQuantity(Order order) throws DataAccessException;\n\n    boolean isItemInStock(String itemId) throws DataAccessException;\n\n    List getItemListByProduct(String productId) throws DataAccessException;\n\n    Item getItem(String itemId) throws DataAccessException;\n}"
    },
    "AddItemToCartController": {
        "methods": [
            "setPetStore",
            "handleRequest"
        ],
        "method_calls": [
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getOrCreateSessionAttribute",
                "class_name": "WebUtils"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "containsItemId",
                "class_name": "cart"
            },
            {
                "method_name": "isItemInStock",
                "class_name": "this.petStore"
            },
            {
                "method_name": "getItem",
                "class_name": "this.petStore"
            },
            {
                "method_name": "addItem",
                "class_name": "cart"
            },
            {
                "method_name": "incrementQuantityByItemId",
                "class_name": "cart"
            }
        ],
        "words": [
            "AddItemToCartController",
            "setPetStore",
            "handleRequest",
            "petStore",
            "cart",
            "workingItemId",
            "isInStock",
            "item",
            "petStore",
            "request",
            "response",
            "isInStock",
            "is",
            "a",
            "\"real-time\"",
            "property",
            "that",
            "must",
            "be",
            "updated",
            "every",
            "time",
            "an",
            "item",
            "is",
            "added",
            "to",
            "the",
            "cart,",
            "even",
            "if",
            "other",
            "item",
            "details",
            "are",
            "cached."
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 30.11.2003\n */\npublic class AddItemToCartController implements Controller {\n\n    private PetStoreFacade petStore;\n\n    public void setPetStore(PetStoreFacade petStore) {\n        this.petStore = petStore;\n    }\n\n    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        Cart cart = (Cart) WebUtils.getOrCreateSessionAttribute(request.getSession(), \"sessionCart\", Cart.class);\n        String workingItemId = request.getParameter(\"workingItemId\");\n        if (cart.containsItemId(workingItemId)) {\n            cart.incrementQuantityByItemId(workingItemId);\n        } else {\n            // isInStock is a \"real-time\" property that must be updated\n            // every time an item is added to the cart, even if other\n            // item details are cached.\n            boolean isInStock = this.petStore.isItemInStock(workingItemId);\n            Item item = this.petStore.getItem(workingItemId);\n            cart.addItem(item, isInStock);\n        }\n        return new ModelAndView(\"Cart\", \"cart\", cart);\n    }\n}"
    },
    "OrderForm": {
        "methods": [
            "getOrder",
            "setShippingAddressRequired",
            "isShippingAddressRequired",
            "setConfirmed",
            "isConfirmed"
        ],
        "method_calls": [],
        "words": [
            "OrderForm",
            "getOrder",
            "setShippingAddressRequired",
            "isShippingAddressRequired",
            "setConfirmed",
            "isConfirmed",
            "order",
            "shippingAddressRequired",
            "confirmed",
            "shippingAddressRequired",
            "confirmed"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 01.12.2003\n */\npublic class OrderForm implements Serializable {\n\n    private final Order order = new Order();\n\n    private boolean shippingAddressRequired;\n\n    private boolean confirmed;\n\n    public Order getOrder() {\n        return order;\n    }\n\n    public void setShippingAddressRequired(boolean shippingAddressRequired) {\n        this.shippingAddressRequired = shippingAddressRequired;\n    }\n\n    public boolean isShippingAddressRequired() {\n        return shippingAddressRequired;\n    }\n\n    public void setConfirmed(boolean confirmed) {\n        this.confirmed = confirmed;\n    }\n\n    public boolean isConfirmed() {\n        return confirmed;\n    }\n}"
    },
    "Product": {
        "methods": [
            "getProductId",
            "setProductId",
            "getCategoryId",
            "setCategoryId",
            "getName",
            "setName",
            "getDescription",
            "setDescription",
            "toString"
        ],
        "method_calls": [
            {
                "method_name": "trim",
                "class_name": "productId"
            },
            {
                "method_name": "getName",
                "class_name": "Optional.empty"
            }
        ],
        "words": [
            "Product",
            "getProductId",
            "setProductId",
            "getCategoryId",
            "setCategoryId",
            "getName",
            "setName",
            "getDescription",
            "setDescription",
            "toString",
            "productId",
            "categoryId",
            "name",
            "description",
            "productId",
            "categoryId",
            "name",
            "description",
            "Private",
            "Fields",
            "JavaBeans",
            "Properties",
            "Public",
            "Methods"
        ],
        "source": "public class Product implements Serializable {\n\n    /* Private Fields */\n    private String productId;\n\n    private String categoryId;\n\n    private String name;\n\n    private String description;\n\n    /* JavaBeans Properties */\n    public String getProductId() {\n        return productId;\n    }\n\n    public void setProductId(String productId) {\n        this.productId = productId.trim();\n    }\n\n    public String getCategoryId() {\n        return categoryId;\n    }\n\n    public void setCategoryId(String categoryId) {\n        this.categoryId = categoryId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    /* Public Methods*/\n    public String toString() {\n        return getName();\n    }\n}"
    },
    "ProductDao": {
        "methods": [
            "getProductListByCategory",
            "searchProductList",
            "getProduct"
        ],
        "method_calls": [],
        "words": [
            "ProductDao",
            "getProductListByCategory",
            "searchProductList",
            "getProduct",
            "categoryId",
            "keywords",
            "productId"
        ],
        "source": "public interface ProductDao {\n\n    List getProductListByCategory(String categoryId) throws DataAccessException;\n\n    List searchProductList(String keywords) throws DataAccessException;\n\n    Product getProduct(String productId) throws DataAccessException;\n}"
    },
    "Item": {
        "methods": [
            "getItemId",
            "setItemId",
            "getQuantity",
            "setQuantity",
            "getProduct",
            "setProduct",
            "getProductId",
            "setProductId",
            "getSupplierId",
            "setSupplierId",
            "getListPrice",
            "setListPrice",
            "getUnitCost",
            "setUnitCost",
            "getStatus",
            "setStatus",
            "getAttribute1",
            "setAttribute1",
            "getAttribute2",
            "setAttribute2",
            "getAttribute3",
            "setAttribute3",
            "getAttribute4",
            "setAttribute4",
            "getAttribute5",
            "setAttribute5",
            "toString"
        ],
        "method_calls": [
            {
                "method_name": "trim",
                "class_name": "itemId"
            },
            {
                "method_name": "getItemId",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "trim",
                "class_name": "getItemId()"
            },
            {
                "method_name": "getProductId",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "trim",
                "class_name": "getProductId()"
            }
        ],
        "words": [
            "Item",
            "getItemId",
            "setItemId",
            "getQuantity",
            "setQuantity",
            "getProduct",
            "setProduct",
            "getProductId",
            "setProductId",
            "getSupplierId",
            "setSupplierId",
            "getListPrice",
            "setListPrice",
            "getUnitCost",
            "setUnitCost",
            "getStatus",
            "setStatus",
            "getAttribute1",
            "setAttribute1",
            "getAttribute2",
            "setAttribute2",
            "getAttribute3",
            "setAttribute3",
            "getAttribute4",
            "setAttribute4",
            "getAttribute5",
            "setAttribute5",
            "toString",
            "itemId",
            "productId",
            "listPrice",
            "unitCost",
            "supplierId",
            "status",
            "attribute1",
            "attribute2",
            "attribute3",
            "attribute4",
            "attribute5",
            "product",
            "quantity",
            "itemId",
            "quantity",
            "product",
            "productId",
            "supplierId",
            "listPrice",
            "unitCost",
            "status",
            "attribute1",
            "attribute2",
            "attribute3",
            "attribute4",
            "attribute5",
            "Private",
            "Fields",
            "JavaBeans",
            "Properties",
            "Public",
            "Methods"
        ],
        "source": "public class Item implements Serializable {\n\n    /* Private Fields */\n    private String itemId;\n\n    private String productId;\n\n    private double listPrice;\n\n    private double unitCost;\n\n    private int supplierId;\n\n    private String status;\n\n    private String attribute1;\n\n    private String attribute2;\n\n    private String attribute3;\n\n    private String attribute4;\n\n    private String attribute5;\n\n    private Product product;\n\n    private int quantity;\n\n    /* JavaBeans Properties */\n    public String getItemId() {\n        return itemId;\n    }\n\n    public void setItemId(String itemId) {\n        this.itemId = itemId.trim();\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n\n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n\n    public Product getProduct() {\n        return product;\n    }\n\n    public void setProduct(Product product) {\n        this.product = product;\n    }\n\n    public String getProductId() {\n        return productId;\n    }\n\n    public void setProductId(String productId) {\n        this.productId = productId;\n    }\n\n    public int getSupplierId() {\n        return supplierId;\n    }\n\n    public void setSupplierId(int supplierId) {\n        this.supplierId = supplierId;\n    }\n\n    public double getListPrice() {\n        return listPrice;\n    }\n\n    public void setListPrice(double listPrice) {\n        this.listPrice = listPrice;\n    }\n\n    public double getUnitCost() {\n        return unitCost;\n    }\n\n    public void setUnitCost(double unitCost) {\n        this.unitCost = unitCost;\n    }\n\n    public String getStatus() {\n        return status;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n\n    public String getAttribute1() {\n        return attribute1;\n    }\n\n    public void setAttribute1(String attribute1) {\n        this.attribute1 = attribute1;\n    }\n\n    public String getAttribute2() {\n        return attribute2;\n    }\n\n    public void setAttribute2(String attribute2) {\n        this.attribute2 = attribute2;\n    }\n\n    public String getAttribute3() {\n        return attribute3;\n    }\n\n    public void setAttribute3(String attribute3) {\n        this.attribute3 = attribute3;\n    }\n\n    public String getAttribute4() {\n        return attribute4;\n    }\n\n    public void setAttribute4(String attribute4) {\n        this.attribute4 = attribute4;\n    }\n\n    public String getAttribute5() {\n        return attribute5;\n    }\n\n    public void setAttribute5(String attribute5) {\n        this.attribute5 = attribute5;\n    }\n\n    /* Public Methods */\n    public String toString() {\n        return \"(\" + getItemId().trim() + \"-\" + getProductId().trim() + \")\";\n    }\n}"
    },
    "AccountActionForm": {
        "methods": [
            "getMyList",
            "setMyList",
            "getForwardAction",
            "setForwardAction",
            "getUsername",
            "setUsername",
            "getPassword",
            "setPassword",
            "getRepeatedPassword",
            "setRepeatedPassword",
            "getAccount",
            "setAccount",
            "getLanguages",
            "setLanguages",
            "getCategories",
            "setCategories",
            "getValidate",
            "setValidate",
            "doValidate",
            "reset"
        ],
        "method_calls": [
            {
                "method_name": "add",
                "class_name": "LANGUAGE_LIST"
            },
            {
                "method_name": "add",
                "class_name": "LANGUAGE_LIST"
            },
            {
                "method_name": "equals",
                "class_name": "VALIDATE_EDIT_ACCOUNT"
            },
            {
                "method_name": "equals",
                "class_name": "VALIDATE_NEW_ACCOUNT"
            },
            {
                "method_name": "equals",
                "class_name": "VALIDATE_NEW_ACCOUNT"
            },
            {
                "method_name": "setStatus",
                "class_name": "account"
            },
            {
                "method_name": "getUsername",
                "class_name": "account"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "length",
                "class_name": "account.getPassword()"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "equals",
                "class_name": "account.getPassword()"
            },
            {
                "method_name": "add",
                "class_name": "errors"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "length",
                "class_name": "account.getPassword()"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "equals",
                "class_name": "account.getPassword()"
            },
            {
                "method_name": "add",
                "class_name": "errors"
            },
            {
                "method_name": "getFirstName",
                "class_name": "this.account"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getLastName",
                "class_name": "this.account"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getEmail",
                "class_name": "this.account"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getPhone",
                "class_name": "this.account"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getAddress1",
                "class_name": "this.account"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getCity",
                "class_name": "this.account"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getState",
                "class_name": "this.account"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getZip",
                "class_name": "this.account"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getCountry",
                "class_name": "this.account"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "reset",
                "class_name": "super"
            },
            {
                "method_name": "setUsername",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setPassword",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setRepeatedPassword",
                "class_name": "Optional.empty"
            }
        ],
        "words": [
            "AccountActionForm",
            "getMyList",
            "setMyList",
            "getForwardAction",
            "setForwardAction",
            "getUsername",
            "setUsername",
            "getPassword",
            "setPassword",
            "getRepeatedPassword",
            "setRepeatedPassword",
            "getAccount",
            "setAccount",
            "getLanguages",
            "setLanguages",
            "getCategories",
            "setCategories",
            "getValidate",
            "setValidate",
            "doValidate",
            "reset",
            "VALIDATE_EDIT_ACCOUNT",
            "VALIDATE_NEW_ACCOUNT",
            "LANGUAGE_LIST",
            "username",
            "password",
            "repeatedPassword",
            "languages",
            "categories",
            "validate",
            "forwardAction",
            "account",
            "myList",
            "myList",
            "forwardAction",
            "username",
            "password",
            "repeatedPassword",
            "account",
            "languages",
            "categories",
            "validate",
            "mapping",
            "request",
            "errors",
            "mapping",
            "request",
            "Constants",
            "Private",
            "Fields",
            "Static",
            "Initializer",
            "Constructors",
            "JavaBeans",
            "Properties",
            "Public",
            "Methods"
        ],
        "source": "public class AccountActionForm extends BaseActionForm {\n\n    /* Constants */\n    public static final String VALIDATE_EDIT_ACCOUNT = \"editAccount\";\n\n    public static final String VALIDATE_NEW_ACCOUNT = \"newAccount\";\n\n    private static final ArrayList LANGUAGE_LIST = new ArrayList();\n\n    /* Private Fields */\n    private String username;\n\n    private String password;\n\n    private String repeatedPassword;\n\n    private List languages;\n\n    private List categories;\n\n    private String validate;\n\n    private String forwardAction;\n\n    private Account account;\n\n    private PagedListHolder myList;\n\n    /* Static Initializer */\n    static {\n        LANGUAGE_LIST.add(\"english\");\n        LANGUAGE_LIST.add(\"japanese\");\n    }\n\n    /* Constructors */\n    public AccountActionForm() {\n        languages = LANGUAGE_LIST;\n    }\n\n    /* JavaBeans Properties */\n    public PagedListHolder getMyList() {\n        return myList;\n    }\n\n    public void setMyList(PagedListHolder myList) {\n        this.myList = myList;\n    }\n\n    public String getForwardAction() {\n        return forwardAction;\n    }\n\n    public void setForwardAction(String forwardAction) {\n        this.forwardAction = forwardAction;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getRepeatedPassword() {\n        return repeatedPassword;\n    }\n\n    public void setRepeatedPassword(String repeatedPassword) {\n        this.repeatedPassword = repeatedPassword;\n    }\n\n    public Account getAccount() {\n        return account;\n    }\n\n    public void setAccount(Account account) {\n        this.account = account;\n    }\n\n    public List getLanguages() {\n        return languages;\n    }\n\n    public void setLanguages(List languages) {\n        this.languages = languages;\n    }\n\n    public List getCategories() {\n        return categories;\n    }\n\n    public void setCategories(List categories) {\n        this.categories = categories;\n    }\n\n    public String getValidate() {\n        return validate;\n    }\n\n    public void setValidate(String validate) {\n        this.validate = validate;\n    }\n\n    /* Public Methods */\n    public void doValidate(ActionMapping mapping, HttpServletRequest request, List errors) {\n        if (validate != null) {\n            if (VALIDATE_EDIT_ACCOUNT.equals(validate) || VALIDATE_NEW_ACCOUNT.equals(validate)) {\n                if (VALIDATE_NEW_ACCOUNT.equals(validate)) {\n                    account.setStatus(\"OK\");\n                    addErrorIfStringEmpty(errors, \"User ID is required.\", account.getUsername());\n                    if (account.getPassword() == null || account.getPassword().length() < 1 || !account.getPassword().equals(repeatedPassword)) {\n                        errors.add(\"Passwords did not match or were not provided.  Matching passwords are required.\");\n                    }\n                }\n                if (account.getPassword() != null && account.getPassword().length() > 0) {\n                    if (!account.getPassword().equals(repeatedPassword)) {\n                        errors.add(\"Passwords did not match.\");\n                    }\n                }\n                addErrorIfStringEmpty(errors, \"First name is required.\", this.account.getFirstName());\n                addErrorIfStringEmpty(errors, \"Last name is required.\", this.account.getLastName());\n                addErrorIfStringEmpty(errors, \"Email address is required.\", this.account.getEmail());\n                addErrorIfStringEmpty(errors, \"Phone number is required.\", this.account.getPhone());\n                addErrorIfStringEmpty(errors, \"Address (1) is required.\", this.account.getAddress1());\n                addErrorIfStringEmpty(errors, \"City is required.\", this.account.getCity());\n                addErrorIfStringEmpty(errors, \"State is required.\", this.account.getState());\n                addErrorIfStringEmpty(errors, \"ZIP is required.\", this.account.getZip());\n                addErrorIfStringEmpty(errors, \"Country is required.\", this.account.getCountry());\n            }\n        }\n    }\n\n    public void reset(ActionMapping mapping, HttpServletRequest request) {\n        super.reset(mapping, request);\n        setUsername(null);\n        setPassword(null);\n        setRepeatedPassword(null);\n    }\n}"
    },
    "SqlMapItemDao": {
        "methods": [
            "updateQuantity",
            "isItemInStock",
            "getItemListByProduct",
            "getItem"
        ],
        "method_calls": [
            {
                "method_name": "getLineItems",
                "class_name": "order"
            },
            {
                "method_name": "get",
                "class_name": "order.getLineItems()"
            },
            {
                "method_name": "getItemId",
                "class_name": "lineItem"
            },
            {
                "method_name": "getQuantity",
                "class_name": "lineItem"
            },
            {
                "method_name": "put",
                "class_name": "param"
            },
            {
                "method_name": "put",
                "class_name": "param"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "update",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getLineItems",
                "class_name": "order"
            },
            {
                "method_name": "size",
                "class_name": "order.getLineItems()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForObject",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "intValue",
                "class_name": "i"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForList",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForObject",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForObject",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "intValue",
                "class_name": "qty"
            },
            {
                "method_name": "setQuantity",
                "class_name": "item"
            }
        ],
        "words": [
            "SqlMapItemDao",
            "updateQuantity",
            "isItemInStock",
            "getItemListByProduct",
            "getItem",
            "lineItem",
            "itemId",
            "increment",
            "param",
            "i",
            "i",
            "item",
            "qty",
            "order",
            "itemId",
            "productId",
            "itemId"
        ],
        "source": "public class SqlMapItemDao extends SqlMapClientDaoSupport implements ItemDao {\n\n    public void updateQuantity(Order order) throws DataAccessException {\n        for (int i = 0; i < order.getLineItems().size(); i++) {\n            LineItem lineItem = (LineItem) order.getLineItems().get(i);\n            String itemId = lineItem.getItemId();\n            Integer increment = new Integer(lineItem.getQuantity());\n            Map param = new HashMap(2);\n            param.put(\"itemId\", itemId);\n            param.put(\"increment\", increment);\n            getSqlMapClientTemplate().update(\"updateInventoryQuantity\", param, 1);\n        }\n    }\n\n    public boolean isItemInStock(String itemId) throws DataAccessException {\n        Integer i = (Integer) getSqlMapClientTemplate().queryForObject(\"getInventoryQuantity\", itemId);\n        return (i != null && i.intValue() > 0);\n    }\n\n    public List getItemListByProduct(String productId) throws DataAccessException {\n        return getSqlMapClientTemplate().queryForList(\"getItemListByProduct\", productId);\n    }\n\n    public Item getItem(String itemId) throws DataAccessException {\n        Item item = (Item) getSqlMapClientTemplate().queryForObject(\"getItem\", itemId);\n        if (item != null) {\n            Integer qty = (Integer) getSqlMapClientTemplate().queryForObject(\"getInventoryQuantity\", itemId);\n            item.setQuantity(qty.intValue());\n        }\n        return item;\n    }\n}"
    },
    "AddItemToCartAction": {
        "methods": ["execute"],
        "method_calls": [
            {
                "method_name": "getCart",
                "class_name": "cartForm"
            },
            {
                "method_name": "getWorkingItemId",
                "class_name": "cartForm"
            },
            {
                "method_name": "containsItemId",
                "class_name": "cart"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "isItemInStock",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getItem",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "getCart",
                "class_name": "cartForm"
            },
            {
                "method_name": "addItem",
                "class_name": "cartForm.getCart()"
            },
            {
                "method_name": "incrementQuantityByItemId",
                "class_name": "cart"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "AddItemToCartAction",
            "execute",
            "cartForm",
            "cart",
            "workingItemId",
            "isInStock",
            "item",
            "mapping",
            "form",
            "request",
            "response",
            "isInStock",
            "is",
            "a",
            "\"real-time\"",
            "property",
            "that",
            "must",
            "be",
            "updated",
            "every",
            "time",
            "an",
            "item",
            "is",
            "added",
            "to",
            "the",
            "cart,",
            "even",
            "if",
            "other",
            "item",
            "details",
            "are",
            "cached."
        ],
        "source": "public class AddItemToCartAction extends BaseAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        CartActionForm cartForm = (CartActionForm) form;\n        Cart cart = cartForm.getCart();\n        String workingItemId = cartForm.getWorkingItemId();\n        if (cart.containsItemId(workingItemId)) {\n            cart.incrementQuantityByItemId(workingItemId);\n        } else {\n            // isInStock is a \"real-time\" property that must be updated\n            // every time an item is added to the cart, even if other\n            // item details are cached.\n            boolean isInStock = getPetStore().isItemInStock(workingItemId);\n            Item item = getPetStore().getItem(workingItemId);\n            cartForm.getCart().addItem(item, isInStock);\n        }\n        return mapping.findForward(\"success\");\n    }\n}"
    },
    "NewOrderFormAction": {
        "methods": ["doExecute"],
        "method_calls": [
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            },
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "getUsername",
                "class_name": "acctForm.getAccount()"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getAccount",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "getCart",
                "class_name": "cartForm"
            },
            {
                "method_name": "getOrder",
                "class_name": "orderForm"
            },
            {
                "method_name": "initOrder",
                "class_name": "orderForm.getOrder()"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "NewOrderFormAction",
            "doExecute",
            "acctForm",
            "cartForm",
            "orderForm",
            "account",
            "mapping",
            "form",
            "request",
            "response",
            "Re-read",
            "account",
            "from",
            "DB",
            "at",
            "team's",
            "request."
        ],
        "source": "public class NewOrderFormAction extends SecureBaseAction {\n\n    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        AccountActionForm acctForm = (AccountActionForm) request.getSession().getAttribute(\"accountForm\");\n        CartActionForm cartForm = (CartActionForm) request.getSession().getAttribute(\"cartForm\");\n        if (cartForm != null) {\n            OrderActionForm orderForm = (OrderActionForm) form;\n            // Re-read account from DB at team's request.\n            Account account = getPetStore().getAccount(acctForm.getAccount().getUsername());\n            orderForm.getOrder().initOrder(account, cartForm.getCart());\n            return mapping.findForward(\"success\");\n        } else {\n            request.setAttribute(\"message\", \"An order could not be created because a cart could not be found.\");\n            return mapping.findForward(\"failure\");\n        }\n    }\n}"
    },
    "UserSession": {
        "methods": [
            "getAccount",
            "setMyList",
            "getMyList"
        ],
        "method_calls": [],
        "words": [
            "UserSession",
            "getAccount",
            "setMyList",
            "getMyList",
            "account",
            "myList",
            "account",
            "myList"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 30.11.2003\n */\npublic class UserSession implements Serializable {\n\n    private Account account;\n\n    private PagedListHolder myList;\n\n    public UserSession(Account account) {\n        this.account = account;\n    }\n\n    public Account getAccount() {\n        return account;\n    }\n\n    public void setMyList(PagedListHolder myList) {\n        this.myList = myList;\n    }\n\n    public PagedListHolder getMyList() {\n        return myList;\n    }\n}"
    },
    "SecureBaseAction": {
        "methods": [
            "execute",
            "doExecute"
        ],
        "method_calls": [
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "doExecute",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getServletPath",
                "class_name": "request"
            },
            {
                "method_name": "getQueryString",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "SecureBaseAction",
            "execute",
            "doExecute",
            "acctForm",
            "url",
            "query",
            "mapping",
            "form",
            "request",
            "response",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public abstract class SecureBaseAction extends BaseAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        AccountActionForm acctForm = (AccountActionForm) request.getSession().getAttribute(\"accountForm\");\n        if (acctForm == null || acctForm.getAccount() == null) {\n            String url = request.getServletPath();\n            String query = request.getQueryString();\n            if (query != null) {\n                request.setAttribute(\"signonForwardAction\", url + \"?\" + query);\n            } else {\n                request.setAttribute(\"signonForwardAction\", url);\n            }\n            return mapping.findForward(\"global-signon\");\n        } else {\n            return doExecute(mapping, form, request, response);\n        }\n    }\n\n    protected abstract ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception;\n}"
    },
    "ListOrdersController": {
        "methods": [
            "setPetStore",
            "handleRequest"
        ],
        "method_calls": [
            {
                "method_name": "getRequiredSessionAttribute",
                "class_name": "WebUtils"
            },
            {
                "method_name": "getAccount",
                "class_name": "userSession"
            },
            {
                "method_name": "getUsername",
                "class_name": "userSession.getAccount()"
            },
            {
                "method_name": "getOrdersByUsername",
                "class_name": "this.petStore"
            },
            {
                "method_name": "put",
                "class_name": "model"
            }
        ],
        "words": [
            "ListOrdersController",
            "setPetStore",
            "handleRequest",
            "petStore",
            "userSession",
            "username",
            "model",
            "petStore",
            "request",
            "response"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 01.12.2003\n */\npublic class ListOrdersController implements Controller {\n\n    private PetStoreFacade petStore;\n\n    public void setPetStore(PetStoreFacade petStore) {\n        this.petStore = petStore;\n    }\n\n    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        UserSession userSession = (UserSession) WebUtils.getRequiredSessionAttribute(request, \"userSession\");\n        String username = userSession.getAccount().getUsername();\n        Map model = new HashMap();\n        model.put(\"orderList\", this.petStore.getOrdersByUsername(username));\n        return new ModelAndView(\"ListOrders\", model);\n    }\n}"
    },
    "SearchProductsAction": {
        "methods": ["execute"],
        "method_calls": [
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            },
            {
                "method_name": "equals",
                "class_name": "\"next\""
            },
            {
                "method_name": "equals",
                "class_name": "\"previous\""
            },
            {
                "method_name": "previousPage",
                "class_name": "productList"
            },
            {
                "method_name": "nextPage",
                "class_name": "productList"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            },
            {
                "method_name": "hasLength",
                "class_name": "StringUtils"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            },
            {
                "method_name": "toLowerCase",
                "class_name": "keyword"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "searchProductList",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "setPageSize",
                "class_name": "productList"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "SearchProductsAction",
            "execute",
            "keyword",
            "page",
            "productList",
            "productList",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class SearchProductsAction extends BaseAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String keyword = request.getParameter(\"keyword\");\n        if (keyword != null) {\n            if (!StringUtils.hasLength(keyword)) {\n                request.setAttribute(\"message\", \"Please enter a keyword to search for, then press the search button.\");\n                return mapping.findForward(\"failure\");\n            }\n            PagedListHolder productList = new PagedListHolder(getPetStore().searchProductList(keyword.toLowerCase()));\n            productList.setPageSize(4);\n            request.getSession().setAttribute(\"SearchProductsAction_productList\", productList);\n            request.setAttribute(\"productList\", productList);\n            return mapping.findForward(\"success\");\n        } else {\n            String page = request.getParameter(\"page\");\n            PagedListHolder productList = (PagedListHolder) request.getSession().getAttribute(\"SearchProductsAction_productList\");\n            if (productList == null) {\n                request.setAttribute(\"message\", \"Your session has timed out. Please start over again.\");\n                return mapping.findForward(\"failure\");\n            }\n            if (\"next\".equals(page)) {\n                productList.nextPage();\n            } else if (\"previous\".equals(page)) {\n                productList.previousPage();\n            }\n            request.setAttribute(\"productList\", productList);\n            return mapping.findForward(\"success\");\n        }\n    }\n}"
    },
    "DoNothingAction": {
        "methods": ["execute"],
        "method_calls": [{
            "method_name": "findForward",
            "class_name": "mapping"
        }],
        "words": [
            "DoNothingAction",
            "execute",
            "mapping",
            "form",
            "request",
            "response",
            "Public",
            "Methods"
        ],
        "source": "public class DoNothingAction extends BaseAction {\n\n    /* Public Methods */\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        return mapping.findForward(\"success\");\n    }\n}"
    },
    "RemoveItemFromCartAction": {
        "methods": ["execute"],
        "method_calls": [
            {
                "method_name": "getWorkingItemId",
                "class_name": "cartForm"
            },
            {
                "method_name": "getCart",
                "class_name": "cartForm"
            },
            {
                "method_name": "removeItemById",
                "class_name": "cartForm.getCart()"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "RemoveItemFromCartAction",
            "execute",
            "cartForm",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class RemoveItemFromCartAction extends BaseAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        CartActionForm cartForm = (CartActionForm) form;\n        cartForm.getCart().removeItemById(cartForm.getWorkingItemId());\n        return mapping.findForward(\"success\");\n    }\n}"
    },
    "Order": {
        "methods": [
            "getOrderId",
            "setOrderId",
            "getUsername",
            "setUsername",
            "getOrderDate",
            "setOrderDate",
            "getShipAddress1",
            "setShipAddress1",
            "getShipAddress2",
            "setShipAddress2",
            "getShipCity",
            "setShipCity",
            "getShipState",
            "setShipState",
            "getShipZip",
            "setShipZip",
            "getShipCountry",
            "setShipCountry",
            "getBillAddress1",
            "setBillAddress1",
            "getBillAddress2",
            "setBillAddress2",
            "getBillCity",
            "setBillCity",
            "getBillState",
            "setBillState",
            "getBillZip",
            "setBillZip",
            "getBillCountry",
            "setBillCountry",
            "getCourier",
            "setCourier",
            "getTotalPrice",
            "setTotalPrice",
            "getBillToFirstName",
            "setBillToFirstName",
            "getBillToLastName",
            "setBillToLastName",
            "getShipToFirstName",
            "setShipToFirstName",
            "getShipToLastName",
            "setShipToLastName",
            "getCreditCard",
            "setCreditCard",
            "getExpiryDate",
            "setExpiryDate",
            "getCardType",
            "setCardType",
            "getLocale",
            "setLocale",
            "getStatus",
            "setStatus",
            "setLineItems",
            "getLineItems",
            "initOrder",
            "addLineItem",
            "addLineItem"
        ],
        "method_calls": [
            {
                "method_name": "getUsername",
                "class_name": "account"
            },
            {
                "method_name": "getFirstName",
                "class_name": "account"
            },
            {
                "method_name": "getLastName",
                "class_name": "account"
            },
            {
                "method_name": "getAddress1",
                "class_name": "account"
            },
            {
                "method_name": "getAddress2",
                "class_name": "account"
            },
            {
                "method_name": "getCity",
                "class_name": "account"
            },
            {
                "method_name": "getState",
                "class_name": "account"
            },
            {
                "method_name": "getZip",
                "class_name": "account"
            },
            {
                "method_name": "getCountry",
                "class_name": "account"
            },
            {
                "method_name": "getFirstName",
                "class_name": "account"
            },
            {
                "method_name": "getLastName",
                "class_name": "account"
            },
            {
                "method_name": "getAddress1",
                "class_name": "account"
            },
            {
                "method_name": "getAddress2",
                "class_name": "account"
            },
            {
                "method_name": "getCity",
                "class_name": "account"
            },
            {
                "method_name": "getState",
                "class_name": "account"
            },
            {
                "method_name": "getZip",
                "class_name": "account"
            },
            {
                "method_name": "getCountry",
                "class_name": "account"
            },
            {
                "method_name": "getSubTotal",
                "class_name": "cart"
            },
            {
                "method_name": "getAllCartItems",
                "class_name": "cart"
            },
            {
                "method_name": "next",
                "class_name": "i"
            },
            {
                "method_name": "addLineItem",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "hasNext",
                "class_name": "i"
            },
            {
                "method_name": "size",
                "class_name": "lineItems"
            },
            {
                "method_name": "addLineItem",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "add",
                "class_name": "lineItems"
            }
        ],
        "words": [
            "Order",
            "getOrderId",
            "setOrderId",
            "getUsername",
            "setUsername",
            "getOrderDate",
            "setOrderDate",
            "getShipAddress1",
            "setShipAddress1",
            "getShipAddress2",
            "setShipAddress2",
            "getShipCity",
            "setShipCity",
            "getShipState",
            "setShipState",
            "getShipZip",
            "setShipZip",
            "getShipCountry",
            "setShipCountry",
            "getBillAddress1",
            "setBillAddress1",
            "getBillAddress2",
            "setBillAddress2",
            "getBillCity",
            "setBillCity",
            "getBillState",
            "setBillState",
            "getBillZip",
            "setBillZip",
            "getBillCountry",
            "setBillCountry",
            "getCourier",
            "setCourier",
            "getTotalPrice",
            "setTotalPrice",
            "getBillToFirstName",
            "setBillToFirstName",
            "getBillToLastName",
            "setBillToLastName",
            "getShipToFirstName",
            "setShipToFirstName",
            "getShipToLastName",
            "setShipToLastName",
            "getCreditCard",
            "setCreditCard",
            "getExpiryDate",
            "setExpiryDate",
            "getCardType",
            "setCardType",
            "getLocale",
            "setLocale",
            "getStatus",
            "setStatus",
            "setLineItems",
            "getLineItems",
            "initOrder",
            "addLineItem",
            "addLineItem",
            "orderId",
            "username",
            "orderDate",
            "shipAddress1",
            "shipAddress2",
            "shipCity",
            "shipState",
            "shipZip",
            "shipCountry",
            "billAddress1",
            "billAddress2",
            "billCity",
            "billState",
            "billZip",
            "billCountry",
            "courier",
            "totalPrice",
            "billToFirstName",
            "billToLastName",
            "shipToFirstName",
            "shipToLastName",
            "creditCard",
            "expiryDate",
            "cardType",
            "locale",
            "status",
            "lineItems",
            "i",
            "cartItem",
            "lineItem",
            "orderId",
            "username",
            "orderDate",
            "shipAddress1",
            "shipAddress2",
            "shipCity",
            "shipState",
            "shipZip",
            "shipCountry",
            "billAddress1",
            "billAddress2",
            "billCity",
            "billState",
            "billZip",
            "billCountry",
            "courier",
            "totalPrice",
            "billToFirstName",
            "billToLastName",
            "shipFoFirstName",
            "shipToLastName",
            "creditCard",
            "expiryDate",
            "cardType",
            "locale",
            "status",
            "lineItems",
            "account",
            "cart",
            "cartItem",
            "lineItem",
            "Private",
            "Fields",
            "JavaBeans",
            "Properties",
            "Public",
            "Methods"
        ],
        "source": "public class Order implements Serializable {\n\n    /* Private Fields */\n    private int orderId;\n\n    private String username;\n\n    private Date orderDate;\n\n    private String shipAddress1;\n\n    private String shipAddress2;\n\n    private String shipCity;\n\n    private String shipState;\n\n    private String shipZip;\n\n    private String shipCountry;\n\n    private String billAddress1;\n\n    private String billAddress2;\n\n    private String billCity;\n\n    private String billState;\n\n    private String billZip;\n\n    private String billCountry;\n\n    private String courier;\n\n    private double totalPrice;\n\n    private String billToFirstName;\n\n    private String billToLastName;\n\n    private String shipToFirstName;\n\n    private String shipToLastName;\n\n    private String creditCard;\n\n    private String expiryDate;\n\n    private String cardType;\n\n    private String locale;\n\n    private String status;\n\n    private List lineItems = new ArrayList();\n\n    /* JavaBeans Properties */\n    public int getOrderId() {\n        return orderId;\n    }\n\n    public void setOrderId(int orderId) {\n        this.orderId = orderId;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public Date getOrderDate() {\n        return orderDate;\n    }\n\n    public void setOrderDate(Date orderDate) {\n        this.orderDate = orderDate;\n    }\n\n    public String getShipAddress1() {\n        return shipAddress1;\n    }\n\n    public void setShipAddress1(String shipAddress1) {\n        this.shipAddress1 = shipAddress1;\n    }\n\n    public String getShipAddress2() {\n        return shipAddress2;\n    }\n\n    public void setShipAddress2(String shipAddress2) {\n        this.shipAddress2 = shipAddress2;\n    }\n\n    public String getShipCity() {\n        return shipCity;\n    }\n\n    public void setShipCity(String shipCity) {\n        this.shipCity = shipCity;\n    }\n\n    public String getShipState() {\n        return shipState;\n    }\n\n    public void setShipState(String shipState) {\n        this.shipState = shipState;\n    }\n\n    public String getShipZip() {\n        return shipZip;\n    }\n\n    public void setShipZip(String shipZip) {\n        this.shipZip = shipZip;\n    }\n\n    public String getShipCountry() {\n        return shipCountry;\n    }\n\n    public void setShipCountry(String shipCountry) {\n        this.shipCountry = shipCountry;\n    }\n\n    public String getBillAddress1() {\n        return billAddress1;\n    }\n\n    public void setBillAddress1(String billAddress1) {\n        this.billAddress1 = billAddress1;\n    }\n\n    public String getBillAddress2() {\n        return billAddress2;\n    }\n\n    public void setBillAddress2(String billAddress2) {\n        this.billAddress2 = billAddress2;\n    }\n\n    public String getBillCity() {\n        return billCity;\n    }\n\n    public void setBillCity(String billCity) {\n        this.billCity = billCity;\n    }\n\n    public String getBillState() {\n        return billState;\n    }\n\n    public void setBillState(String billState) {\n        this.billState = billState;\n    }\n\n    public String getBillZip() {\n        return billZip;\n    }\n\n    public void setBillZip(String billZip) {\n        this.billZip = billZip;\n    }\n\n    public String getBillCountry() {\n        return billCountry;\n    }\n\n    public void setBillCountry(String billCountry) {\n        this.billCountry = billCountry;\n    }\n\n    public String getCourier() {\n        return courier;\n    }\n\n    public void setCourier(String courier) {\n        this.courier = courier;\n    }\n\n    public double getTotalPrice() {\n        return totalPrice;\n    }\n\n    public void setTotalPrice(double totalPrice) {\n        this.totalPrice = totalPrice;\n    }\n\n    public String getBillToFirstName() {\n        return billToFirstName;\n    }\n\n    public void setBillToFirstName(String billToFirstName) {\n        this.billToFirstName = billToFirstName;\n    }\n\n    public String getBillToLastName() {\n        return billToLastName;\n    }\n\n    public void setBillToLastName(String billToLastName) {\n        this.billToLastName = billToLastName;\n    }\n\n    public String getShipToFirstName() {\n        return shipToFirstName;\n    }\n\n    public void setShipToFirstName(String shipFoFirstName) {\n        this.shipToFirstName = shipFoFirstName;\n    }\n\n    public String getShipToLastName() {\n        return shipToLastName;\n    }\n\n    public void setShipToLastName(String shipToLastName) {\n        this.shipToLastName = shipToLastName;\n    }\n\n    public String getCreditCard() {\n        return creditCard;\n    }\n\n    public void setCreditCard(String creditCard) {\n        this.creditCard = creditCard;\n    }\n\n    public String getExpiryDate() {\n        return expiryDate;\n    }\n\n    public void setExpiryDate(String expiryDate) {\n        this.expiryDate = expiryDate;\n    }\n\n    public String getCardType() {\n        return cardType;\n    }\n\n    public void setCardType(String cardType) {\n        this.cardType = cardType;\n    }\n\n    public String getLocale() {\n        return locale;\n    }\n\n    public void setLocale(String locale) {\n        this.locale = locale;\n    }\n\n    public String getStatus() {\n        return status;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n\n    public void setLineItems(List lineItems) {\n        this.lineItems = lineItems;\n    }\n\n    public List getLineItems() {\n        return lineItems;\n    }\n\n    /* Public Methods */\n    public void initOrder(Account account, Cart cart) {\n        username = account.getUsername();\n        orderDate = new Date();\n        shipToFirstName = account.getFirstName();\n        shipToLastName = account.getLastName();\n        shipAddress1 = account.getAddress1();\n        shipAddress2 = account.getAddress2();\n        shipCity = account.getCity();\n        shipState = account.getState();\n        shipZip = account.getZip();\n        shipCountry = account.getCountry();\n        billToFirstName = account.getFirstName();\n        billToLastName = account.getLastName();\n        billAddress1 = account.getAddress1();\n        billAddress2 = account.getAddress2();\n        billCity = account.getCity();\n        billState = account.getState();\n        billZip = account.getZip();\n        billCountry = account.getCountry();\n        totalPrice = cart.getSubTotal();\n        creditCard = \"999 9999 9999 9999\";\n        expiryDate = \"12/03\";\n        cardType = \"Visa\";\n        courier = \"UPS\";\n        locale = \"CA\";\n        status = \"P\";\n        Iterator i = cart.getAllCartItems();\n        while (i.hasNext()) {\n            CartItem cartItem = (CartItem) i.next();\n            addLineItem(cartItem);\n        }\n    }\n\n    public void addLineItem(CartItem cartItem) {\n        LineItem lineItem = new LineItem(lineItems.size() + 1, cartItem);\n        addLineItem(lineItem);\n    }\n\n    public void addLineItem(LineItem lineItem) {\n        lineItems.add(lineItem);\n    }\n}"
    },
    "ProductSearch": {
        "methods": ["getKeywordList"],
        "method_calls": [
            {
                "method_name": "nextToken",
                "class_name": "splitter"
            },
            {
                "method_name": "add",
                "class_name": "this.keywordList"
            },
            {
                "method_name": "hasMoreTokens",
                "class_name": "splitter"
            }
        ],
        "words": [
            "ProductSearch",
            "getKeywordList",
            "keywordList",
            "splitter",
            "keywords"
        ],
        "source": "/* Inner Classes */\npublic static class ProductSearch {\n\n    private List keywordList = new ArrayList();\n\n    public ProductSearch(String keywords) {\n        StringTokenizer splitter = new StringTokenizer(keywords, \" \", false);\n        while (splitter.hasMoreTokens()) {\n            this.keywordList.add(\"%\" + splitter.nextToken() + \"%\");\n        }\n    }\n\n    public List getKeywordList() {\n        return keywordList;\n    }\n}"
    },
    "UpdateCartQuantitiesController": {
        "methods": ["handleRequest"],
        "method_calls": [
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getOrCreateSessionAttribute",
                "class_name": "WebUtils"
            },
            {
                "method_name": "getAllCartItems",
                "class_name": "cart"
            },
            {
                "method_name": "next",
                "class_name": "cartItems"
            },
            {
                "method_name": "getItem",
                "class_name": "cartItem"
            },
            {
                "method_name": "getItemId",
                "class_name": "cartItem.getItem()"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "parseInt",
                "class_name": "Integer"
            },
            {
                "method_name": "setQuantityByItemId",
                "class_name": "cart"
            },
            {
                "method_name": "remove",
                "class_name": "cartItems"
            },
            {
                "method_name": "hasNext",
                "class_name": "cartItems"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            }
        ],
        "words": [
            "UpdateCartQuantitiesController",
            "handleRequest",
            "cart",
            "cartItems",
            "cartItem",
            "itemId",
            "quantity",
            "ex",
            "request",
            "response",
            "ignore",
            "on",
            "purpose"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 30.11.2003\n */\npublic class UpdateCartQuantitiesController implements Controller {\n\n    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        Cart cart = (Cart) WebUtils.getOrCreateSessionAttribute(request.getSession(), \"sessionCart\", Cart.class);\n        Iterator cartItems = cart.getAllCartItems();\n        while (cartItems.hasNext()) {\n            CartItem cartItem = (CartItem) cartItems.next();\n            String itemId = cartItem.getItem().getItemId();\n            try {\n                int quantity = Integer.parseInt(request.getParameter(itemId));\n                cart.setQuantityByItemId(itemId, quantity);\n                if (quantity < 1) {\n                    cartItems.remove();\n                }\n            } catch (NumberFormatException ex) {\n                // ignore on purpose\n            }\n        }\n        request.getSession().setAttribute(\"sessionCart\", cart);\n        return new ModelAndView(\"Cart\", \"cart\", cart);\n    }\n}"
    },
    "ViewCategoryController": {
        "methods": [
            "setPetStore",
            "handleRequest"
        ],
        "method_calls": [
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "equals",
                "class_name": "\"next\""
            },
            {
                "method_name": "equals",
                "class_name": "\"previous\""
            },
            {
                "method_name": "previousPage",
                "class_name": "productList"
            },
            {
                "method_name": "nextPage",
                "class_name": "productList"
            },
            {
                "method_name": "put",
                "class_name": "model"
            },
            {
                "method_name": "put",
                "class_name": "model"
            },
            {
                "method_name": "getCategory",
                "class_name": "this.petStore"
            },
            {
                "method_name": "getProductListByCategory",
                "class_name": "this.petStore"
            },
            {
                "method_name": "setPageSize",
                "class_name": "productList"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "put",
                "class_name": "model"
            },
            {
                "method_name": "put",
                "class_name": "model"
            }
        ],
        "words": [
            "ViewCategoryController",
            "setPetStore",
            "handleRequest",
            "petStore",
            "model",
            "categoryId",
            "category",
            "productList",
            "page",
            "category",
            "productList",
            "petStore",
            "request",
            "response"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 30.11.2003\n */\npublic class ViewCategoryController implements Controller {\n\n    private PetStoreFacade petStore;\n\n    public void setPetStore(PetStoreFacade petStore) {\n        this.petStore = petStore;\n    }\n\n    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        Map model = new HashMap();\n        String categoryId = request.getParameter(\"categoryId\");\n        if (categoryId != null) {\n            Category category = this.petStore.getCategory(categoryId);\n            PagedListHolder productList = new PagedListHolder(this.petStore.getProductListByCategory(categoryId));\n            productList.setPageSize(4);\n            request.getSession().setAttribute(\"ViewProductAction_category\", category);\n            request.getSession().setAttribute(\"ViewProductAction_productList\", productList);\n            model.put(\"category\", category);\n            model.put(\"productList\", productList);\n        } else {\n            Category category = (Category) request.getSession().getAttribute(\"ViewProductAction_category\");\n            PagedListHolder productList = (PagedListHolder) request.getSession().getAttribute(\"ViewProductAction_productList\");\n            if (category == null || productList == null) {\n                throw new IllegalStateException(\"Cannot find pre-loaded category and product list\");\n            }\n            String page = request.getParameter(\"page\");\n            if (\"next\".equals(page)) {\n                productList.nextPage();\n            } else if (\"previous\".equals(page)) {\n                productList.previousPage();\n            }\n            model.put(\"category\", category);\n            model.put(\"productList\", productList);\n        }\n        return new ModelAndView(\"Category\", model);\n    }\n}"
    },
    "OrderFormController": {
        "methods": [
            "setPetStore",
            "formBackingObject",
            "onBindAndValidate",
            "referenceData",
            "getTargetPage",
            "validatePage",
            "processFinish"
        ],
        "method_calls": [
            {
                "method_name": "setCommandName",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setPages",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "addObject",
                "class_name": "modelAndView"
            },
            {
                "method_name": "getAccount",
                "class_name": "userSession"
            },
            {
                "method_name": "getUsername",
                "class_name": "userSession.getAccount()"
            },
            {
                "method_name": "getAccount",
                "class_name": "this.petStore"
            },
            {
                "method_name": "getOrder",
                "class_name": "orderForm"
            },
            {
                "method_name": "initOrder",
                "class_name": "orderForm.getOrder()"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "setShippingAddressRequired",
                "class_name": "orderForm"
            },
            {
                "method_name": "add",
                "class_name": "creditCardTypes"
            },
            {
                "method_name": "add",
                "class_name": "creditCardTypes"
            },
            {
                "method_name": "add",
                "class_name": "creditCardTypes"
            },
            {
                "method_name": "put",
                "class_name": "model"
            },
            {
                "method_name": "isShippingAddressRequired",
                "class_name": "orderForm"
            },
            {
                "method_name": "getValidator",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setNestedPath",
                "class_name": "errors"
            },
            {
                "method_name": "getOrder",
                "class_name": "orderForm"
            },
            {
                "method_name": "validateCreditCard",
                "class_name": "orderValidator"
            },
            {
                "method_name": "getOrder",
                "class_name": "orderForm"
            },
            {
                "method_name": "validateBillingAddress",
                "class_name": "orderValidator"
            },
            {
                "method_name": "getOrder",
                "class_name": "orderForm"
            },
            {
                "method_name": "validateShippingAddress",
                "class_name": "orderValidator"
            },
            {
                "method_name": "setNestedPath",
                "class_name": "errors"
            },
            {
                "method_name": "getOrder",
                "class_name": "orderForm"
            },
            {
                "method_name": "insertOrder",
                "class_name": "this.petStore"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "removeAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getOrder",
                "class_name": "orderForm"
            },
            {
                "method_name": "put",
                "class_name": "model"
            },
            {
                "method_name": "put",
                "class_name": "model"
            }
        ],
        "words": [
            "OrderFormController",
            "setPetStore",
            "formBackingObject",
            "onBindAndValidate",
            "referenceData",
            "getTargetPage",
            "validatePage",
            "processFinish",
            "petStore",
            "userSession",
            "cart",
            "modelAndView",
            "account",
            "orderForm",
            "orderForm",
            "creditCardTypes",
            "model",
            "orderForm",
            "orderForm",
            "orderValidator",
            "orderForm",
            "model",
            "petStore",
            "request",
            "request",
            "command",
            "errors",
            "page",
            "request",
            "page",
            "request",
            "command",
            "errors",
            "currentPage",
            "command",
            "errors",
            "page",
            "request",
            "response",
            "command",
            "errors",
            "Re-read",
            "account",
            "from",
            "DB",
            "at",
            "team's",
            "request."
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 01.12.2003\n */\npublic class OrderFormController extends AbstractWizardFormController {\n\n    private PetStoreFacade petStore;\n\n    public OrderFormController() {\n        setCommandName(\"orderForm\");\n        setPages(new String[] { \"NewOrderForm\", \"ShippingForm\", \"ConfirmOrder\" });\n    }\n\n    public void setPetStore(PetStoreFacade petStore) {\n        this.petStore = petStore;\n    }\n\n    protected Object formBackingObject(HttpServletRequest request) throws ModelAndViewDefiningException {\n        UserSession userSession = (UserSession) request.getSession().getAttribute(\"userSession\");\n        Cart cart = (Cart) request.getSession().getAttribute(\"sessionCart\");\n        if (cart != null) {\n            // Re-read account from DB at team's request.\n            Account account = this.petStore.getAccount(userSession.getAccount().getUsername());\n            OrderForm orderForm = new OrderForm();\n            orderForm.getOrder().initOrder(account, cart);\n            return orderForm;\n        } else {\n            ModelAndView modelAndView = new ModelAndView(\"Error\");\n            modelAndView.addObject(\"message\", \"An order could not be created because a cart could not be found.\");\n            throw new ModelAndViewDefiningException(modelAndView);\n        }\n    }\n\n    protected void onBindAndValidate(HttpServletRequest request, Object command, BindException errors, int page) {\n        if (page == 0 && request.getParameter(\"shippingAddressRequired\") == null) {\n            OrderForm orderForm = (OrderForm) command;\n            orderForm.setShippingAddressRequired(false);\n        }\n    }\n\n    protected Map referenceData(HttpServletRequest request, int page) {\n        if (page == 0) {\n            List creditCardTypes = new ArrayList();\n            creditCardTypes.add(\"Visa\");\n            creditCardTypes.add(\"MasterCard\");\n            creditCardTypes.add(\"American Express\");\n            Map model = new HashMap();\n            model.put(\"creditCardTypes\", creditCardTypes);\n            return model;\n        }\n        return null;\n    }\n\n    protected int getTargetPage(HttpServletRequest request, Object command, Errors errors, int currentPage) {\n        OrderForm orderForm = (OrderForm) command;\n        if (currentPage == 0 && orderForm.isShippingAddressRequired()) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n\n    protected void validatePage(Object command, Errors errors, int page) {\n        OrderForm orderForm = (OrderForm) command;\n        OrderValidator orderValidator = (OrderValidator) getValidator();\n        errors.setNestedPath(\"order\");\n        switch(page) {\n            case 0:\n                orderValidator.validateCreditCard(orderForm.getOrder(), errors);\n                orderValidator.validateBillingAddress(orderForm.getOrder(), errors);\n                break;\n            case 1:\n                orderValidator.validateShippingAddress(orderForm.getOrder(), errors);\n        }\n        errors.setNestedPath(\"\");\n    }\n\n    protected ModelAndView processFinish(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) {\n        OrderForm orderForm = (OrderForm) command;\n        this.petStore.insertOrder(orderForm.getOrder());\n        request.getSession().removeAttribute(\"sessionCart\");\n        Map model = new HashMap();\n        model.put(\"order\", orderForm.getOrder());\n        model.put(\"message\", \"Thank you, your order has been submitted.\");\n        return new ModelAndView(\"ViewOrder\", model);\n    }\n}"
    },
    "RemoveItemFromCartController": {
        "methods": ["handleRequest"],
        "method_calls": [
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getOrCreateSessionAttribute",
                "class_name": "WebUtils"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "removeItemById",
                "class_name": "cart"
            }
        ],
        "words": [
            "RemoveItemFromCartController",
            "handleRequest",
            "cart",
            "request",
            "response"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 30.11.2003\n */\npublic class RemoveItemFromCartController implements Controller {\n\n    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        Cart cart = (Cart) WebUtils.getOrCreateSessionAttribute(request.getSession(), \"sessionCart\", Cart.class);\n        cart.removeItemById(request.getParameter(\"workingItemId\"));\n        return new ModelAndView(\"Cart\", \"cart\", cart);\n    }\n}"
    },
    "ViewItemController": {
        "methods": [
            "setPetStore",
            "handleRequest"
        ],
        "method_calls": [
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getItem",
                "class_name": "this.petStore"
            },
            {
                "method_name": "put",
                "class_name": "model"
            },
            {
                "method_name": "getProduct",
                "class_name": "item"
            },
            {
                "method_name": "put",
                "class_name": "model"
            }
        ],
        "words": [
            "ViewItemController",
            "setPetStore",
            "handleRequest",
            "petStore",
            "itemId",
            "item",
            "model",
            "petStore",
            "request",
            "response"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 30.11.2003\n */\npublic class ViewItemController implements Controller {\n\n    private PetStoreFacade petStore;\n\n    public void setPetStore(PetStoreFacade petStore) {\n        this.petStore = petStore;\n    }\n\n    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String itemId = request.getParameter(\"itemId\");\n        Item item = this.petStore.getItem(itemId);\n        Map model = new HashMap();\n        model.put(\"item\", item);\n        model.put(\"product\", item.getProduct());\n        return new ModelAndView(\"Item\", model);\n    }\n}"
    },
    "AccountDao": {
        "methods": [
            "getAccount",
            "getAccount",
            "insertAccount",
            "updateAccount",
            "getUsernameList"
        ],
        "method_calls": [],
        "words": [
            "AccountDao",
            "getAccount",
            "getAccount",
            "insertAccount",
            "updateAccount",
            "getUsernameList",
            "username",
            "username",
            "password",
            "account",
            "account"
        ],
        "source": "public interface AccountDao {\n\n    Account getAccount(String username) throws DataAccessException;\n\n    Account getAccount(String username, String password) throws DataAccessException;\n\n    void insertAccount(Account account) throws DataAccessException;\n\n    void updateAccount(Account account) throws DataAccessException;\n\n    List getUsernameList() throws DataAccessException;\n}"
    },
    "SqlMapCategoryDao": {
        "methods": [
            "getCategoryList",
            "getCategory"
        ],
        "method_calls": [
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForList",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForObject",
                "class_name": "getSqlMapClientTemplate()"
            }
        ],
        "words": [
            "SqlMapCategoryDao",
            "getCategoryList",
            "getCategory",
            "categoryId"
        ],
        "source": "public class SqlMapCategoryDao extends SqlMapClientDaoSupport implements CategoryDao {\n\n    public List getCategoryList() throws DataAccessException {\n        return getSqlMapClientTemplate().queryForList(\"getCategoryList\", null);\n    }\n\n    public Category getCategory(String categoryId) throws DataAccessException {\n        return (Category) getSqlMapClientTemplate().queryForObject(\"getCategory\", categoryId);\n    }\n}"
    },
    "OrderActionForm": {
        "methods": [
            "isConfirmed",
            "setConfirmed",
            "getOrder",
            "setOrder",
            "isShippingAddressRequired",
            "setShippingAddressRequired",
            "getCreditCardTypes",
            "doValidate",
            "reset"
        ],
        "method_calls": [
            {
                "method_name": "add",
                "class_name": "CARD_TYPE_LIST"
            },
            {
                "method_name": "add",
                "class_name": "CARD_TYPE_LIST"
            },
            {
                "method_name": "add",
                "class_name": "CARD_TYPE_LIST"
            },
            {
                "method_name": "isShippingAddressRequired",
                "class_name": "this"
            },
            {
                "method_name": "getCreditCard",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getExpiryDate",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getCardType",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getShipToFirstName",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getShipToLastName",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getShipAddress1",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getShipCity",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getShipState",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getShipZip",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getShipCountry",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getBillToFirstName",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getBillToLastName",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getBillAddress1",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getBillCity",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getBillState",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getBillZip",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getBillCountry",
                "class_name": "order"
            },
            {
                "method_name": "addErrorIfStringEmpty",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "size",
                "class_name": "errors"
            },
            {
                "method_name": "getShipAddress1",
                "class_name": "order"
            },
            {
                "method_name": "setBillAddress1",
                "class_name": "order"
            },
            {
                "method_name": "getShipAddress2",
                "class_name": "order"
            },
            {
                "method_name": "setBillAddress2",
                "class_name": "order"
            },
            {
                "method_name": "getShipToFirstName",
                "class_name": "order"
            },
            {
                "method_name": "setBillToFirstName",
                "class_name": "order"
            },
            {
                "method_name": "getShipToLastName",
                "class_name": "order"
            },
            {
                "method_name": "setBillToLastName",
                "class_name": "order"
            },
            {
                "method_name": "getShipCity",
                "class_name": "order"
            },
            {
                "method_name": "setBillCity",
                "class_name": "order"
            },
            {
                "method_name": "getShipCountry",
                "class_name": "order"
            },
            {
                "method_name": "setBillCountry",
                "class_name": "order"
            },
            {
                "method_name": "getShipState",
                "class_name": "order"
            },
            {
                "method_name": "setBillState",
                "class_name": "order"
            },
            {
                "method_name": "getShipZip",
                "class_name": "order"
            },
            {
                "method_name": "setBillZip",
                "class_name": "order"
            },
            {
                "method_name": "reset",
                "class_name": "super"
            }
        ],
        "words": [
            "OrderActionForm",
            "isConfirmed",
            "setConfirmed",
            "getOrder",
            "setOrder",
            "isShippingAddressRequired",
            "setShippingAddressRequired",
            "getCreditCardTypes",
            "doValidate",
            "reset",
            "CARD_TYPE_LIST",
            "order",
            "shippingAddressRequired",
            "confirmed",
            "cardTypeList",
            "confirmed",
            "order",
            "shippingAddressRequired",
            "mapping",
            "request",
            "errors",
            "mapping",
            "request",
            "Constants",
            "Private",
            "Fields",
            "Static",
            "Initializer",
            "Constructors",
            "JavaBeans",
            "Properties",
            "Public",
            "Methods"
        ],
        "source": "public class OrderActionForm extends BaseActionForm {\n\n    /* Constants */\n    private static final List CARD_TYPE_LIST = new ArrayList();\n\n    /* Private Fields */\n    private Order order;\n\n    private boolean shippingAddressRequired;\n\n    private boolean confirmed;\n\n    private List cardTypeList;\n\n    /* Static Initializer */\n    static {\n        CARD_TYPE_LIST.add(\"Visa\");\n        CARD_TYPE_LIST.add(\"MasterCard\");\n        CARD_TYPE_LIST.add(\"American Express\");\n    }\n\n    /* Constructors */\n    public OrderActionForm() {\n        this.order = new Order();\n        this.shippingAddressRequired = false;\n        this.cardTypeList = CARD_TYPE_LIST;\n        this.confirmed = false;\n    }\n\n    /* JavaBeans Properties */\n    public boolean isConfirmed() {\n        return confirmed;\n    }\n\n    public void setConfirmed(boolean confirmed) {\n        this.confirmed = confirmed;\n    }\n\n    public Order getOrder() {\n        return order;\n    }\n\n    public void setOrder(Order order) {\n        this.order = order;\n    }\n\n    public boolean isShippingAddressRequired() {\n        return shippingAddressRequired;\n    }\n\n    public void setShippingAddressRequired(boolean shippingAddressRequired) {\n        this.shippingAddressRequired = shippingAddressRequired;\n    }\n\n    public List getCreditCardTypes() {\n        return cardTypeList;\n    }\n\n    /* Public Methods */\n    public void doValidate(ActionMapping mapping, HttpServletRequest request, List errors) {\n        if (!this.isShippingAddressRequired()) {\n            addErrorIfStringEmpty(errors, \"FAKE (!) credit card number required.\", order.getCreditCard());\n            addErrorIfStringEmpty(errors, \"Expiry date is required.\", order.getExpiryDate());\n            addErrorIfStringEmpty(errors, \"Card type is required.\", order.getCardType());\n            addErrorIfStringEmpty(errors, \"Shipping Info: first name is required.\", order.getShipToFirstName());\n            addErrorIfStringEmpty(errors, \"Shipping Info: last name is required.\", order.getShipToLastName());\n            addErrorIfStringEmpty(errors, \"Shipping Info: address is required.\", order.getShipAddress1());\n            addErrorIfStringEmpty(errors, \"Shipping Info: city is required.\", order.getShipCity());\n            addErrorIfStringEmpty(errors, \"Shipping Info: state is required.\", order.getShipState());\n            addErrorIfStringEmpty(errors, \"Shipping Info: zip/postal code is required.\", order.getShipZip());\n            addErrorIfStringEmpty(errors, \"Shipping Info: country is required.\", order.getShipCountry());\n            addErrorIfStringEmpty(errors, \"Billing Info: first name is required.\", order.getBillToFirstName());\n            addErrorIfStringEmpty(errors, \"Billing Info: last name is required.\", order.getBillToLastName());\n            addErrorIfStringEmpty(errors, \"Billing Info: address is required.\", order.getBillAddress1());\n            addErrorIfStringEmpty(errors, \"Billing Info: city is required.\", order.getBillCity());\n            addErrorIfStringEmpty(errors, \"Billing Info: state is required.\", order.getBillState());\n            addErrorIfStringEmpty(errors, \"Billing Info: zip/postal code is required.\", order.getBillZip());\n            addErrorIfStringEmpty(errors, \"Billing Info: country is required.\", order.getBillCountry());\n        }\n        if (errors.size() > 0) {\n            order.setBillAddress1(order.getShipAddress1());\n            order.setBillAddress2(order.getShipAddress2());\n            order.setBillToFirstName(order.getShipToFirstName());\n            order.setBillToLastName(order.getShipToLastName());\n            order.setBillCity(order.getShipCity());\n            order.setBillCountry(order.getShipCountry());\n            order.setBillState(order.getShipState());\n            order.setBillZip(order.getShipZip());\n        }\n    }\n\n    public void reset(ActionMapping mapping, HttpServletRequest request) {\n        super.reset(mapping, request);\n        shippingAddressRequired = false;\n    }\n}"
    },
    "Sequence": {
        "methods": [
            "getName",
            "setName",
            "getNextId",
            "setNextId"
        ],
        "method_calls": [],
        "words": [
            "Sequence",
            "getName",
            "setName",
            "getNextId",
            "setNextId",
            "name",
            "nextId",
            "name",
            "nextId",
            "name",
            "nextId",
            "Private",
            "Fields",
            "Constructors",
            "JavaBeans",
            "Properties"
        ],
        "source": "public class Sequence implements Serializable {\n\n    /* Private Fields */\n    private String name;\n\n    private int nextId;\n\n    /* Constructors */\n    public Sequence() {\n    }\n\n    public Sequence(String name, int nextId) {\n        this.name = name;\n        this.nextId = nextId;\n    }\n\n    /* JavaBeans Properties */\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getNextId() {\n        return nextId;\n    }\n\n    public void setNextId(int nextId) {\n        this.nextId = nextId;\n    }\n}"
    },
    "SignonAction": {
        "methods": ["execute"],
        "method_calls": [
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "removeAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "removeAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getUsername",
                "class_name": "acctForm"
            },
            {
                "method_name": "getPassword",
                "class_name": "acctForm"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getAccount",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "getForwardAction",
                "class_name": "acctForm"
            },
            {
                "method_name": "setForwardAction",
                "class_name": "acctForm"
            },
            {
                "method_name": "setAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "setPassword",
                "class_name": "acctForm.getAccount()"
            },
            {
                "method_name": "getFavouriteCategoryId",
                "class_name": "account"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getProductListByCategory",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "setPageSize",
                "class_name": "myList"
            },
            {
                "method_name": "setMyList",
                "class_name": "acctForm"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getForwardAction",
                "class_name": "acctForm"
            },
            {
                "method_name": "getForwardAction",
                "class_name": "acctForm"
            },
            {
                "method_name": "length",
                "class_name": "acctForm.getForwardAction()"
            },
            {
                "method_name": "getForwardAction",
                "class_name": "acctForm"
            },
            {
                "method_name": "sendRedirect",
                "class_name": "response"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "invalidate",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "SignonAction",
            "execute",
            "acctForm",
            "username",
            "password",
            "account",
            "forwardAction",
            "myList",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class SignonAction extends BaseAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        request.getSession().removeAttribute(\"workingAccountForm\");\n        request.getSession().removeAttribute(\"accountForm\");\n        if (request.getParameter(\"signoff\") != null) {\n            request.getSession().invalidate();\n            return mapping.findForward(\"success\");\n        } else {\n            AccountActionForm acctForm = (AccountActionForm) form;\n            String username = acctForm.getUsername();\n            String password = acctForm.getPassword();\n            Account account = getPetStore().getAccount(username, password);\n            if (account == null) {\n                request.setAttribute(\"message\", \"Invalid username or password.  Signon failed.\");\n                return mapping.findForward(\"failure\");\n            } else {\n                String forwardAction = acctForm.getForwardAction();\n                acctForm = new AccountActionForm();\n                acctForm.setForwardAction(forwardAction);\n                acctForm.setAccount(account);\n                acctForm.getAccount().setPassword(null);\n                PagedListHolder myList = new PagedListHolder(getPetStore().getProductListByCategory(account.getFavouriteCategoryId()));\n                myList.setPageSize(4);\n                acctForm.setMyList(myList);\n                request.getSession().setAttribute(\"accountForm\", acctForm);\n                if (acctForm.getForwardAction() == null || acctForm.getForwardAction().length() < 1) {\n                    return mapping.findForward(\"success\");\n                } else {\n                    response.sendRedirect(acctForm.getForwardAction());\n                    return null;\n                }\n            }\n        }\n    }\n}"
    },
    "SignoffController": {
        "methods": ["handleRequest"],
        "method_calls": [
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "removeAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "invalidate",
                "class_name": "request.getSession()"
            }
        ],
        "words": [
            "SignoffController",
            "handleRequest",
            "request",
            "response"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 30.11.2003\n */\npublic class SignoffController implements Controller {\n\n    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        request.getSession().removeAttribute(\"userSession\");\n        request.getSession().invalidate();\n        return new ModelAndView(\"index\");\n    }\n}"
    },
    "OrderValidator": {
        "methods": [
            "supports",
            "validate",
            "validateCreditCard",
            "validateBillingAddress",
            "validateShippingAddress"
        ],
        "method_calls": [
            {
                "method_name": "isAssignableFrom",
                "class_name": "Order.class"
            },
            {
                "method_name": "validateCreditCard",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "validateBillingAddress",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "validateShippingAddress",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            }
        ],
        "words": [
            "OrderValidator",
            "supports",
            "validate",
            "validateCreditCard",
            "validateBillingAddress",
            "validateShippingAddress",
            "clazz",
            "obj",
            "errors",
            "order",
            "errors",
            "order",
            "errors",
            "order",
            "errors"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 01.12.2003\n */\npublic class OrderValidator implements Validator {\n\n    public boolean supports(Class clazz) {\n        return Order.class.isAssignableFrom(clazz);\n    }\n\n    public void validate(Object obj, Errors errors) {\n        validateCreditCard((Order) obj, errors);\n        validateBillingAddress((Order) obj, errors);\n        validateShippingAddress((Order) obj, errors);\n    }\n\n    public void validateCreditCard(Order order, Errors errors) {\n        ValidationUtils.rejectIfEmpty(errors, \"creditCard\", \"CCN_REQUIRED\", \"FAKE (!) credit card number required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"expiryDate\", \"EXPIRY_DATE_REQUIRED\", \"Expiry date is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"cardType\", \"CARD_TYPE_REQUIRED\", \"Card type is required.\");\n    }\n\n    public void validateBillingAddress(Order order, Errors errors) {\n        ValidationUtils.rejectIfEmpty(errors, \"billToFirstName\", \"FIRST_NAME_REQUIRED\", \"Billing Info: first name is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"billToLastName\", \"LAST_NAME_REQUIRED\", \"Billing Info: last name is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"billAddress1\", \"ADDRESS_REQUIRED\", \"Billing Info: address is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"billCity\", \"CITY_REQUIRED\", \"Billing Info: city is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"billState\", \"STATE_REQUIRED\", \"Billing Info: state is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"billZip\", \"ZIP_REQUIRED\", \"Billing Info: zip/postal code is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"billCountry\", \"COUNTRY_REQUIRED\", \"Billing Info: country is required.\");\n    }\n\n    public void validateShippingAddress(Order order, Errors errors) {\n        ValidationUtils.rejectIfEmpty(errors, \"shipToFirstName\", \"FIRST_NAME_REQUIRED\", \"Shipping Info: first name is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"shipToLastName\", \"LAST_NAME_REQUIRED\", \"Shipping Info: last name is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"shipAddress1\", \"ADDRESS_REQUIRED\", \"Shipping Info: address is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"shipCity\", \"CITY_REQUIRED\", \"Shipping Info: city is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"shipState\", \"STATE_REQUIRED\", \"Shipping Info: state is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"shipZip\", \"ZIP_REQUIRED\", \"Shipping Info: zip/postal code is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"shipCountry\", \"COUNTRY_REQUIRED\", \"Shipping Info: country is required.\");\n    }\n}"
    },
    "PetStoreImpl": {
        "methods": [
            "setAccountDao",
            "setCategoryDao",
            "setProductDao",
            "setItemDao",
            "setOrderDao",
            "getAccount",
            "getAccount",
            "insertAccount",
            "updateAccount",
            "getUsernameList",
            "getCategoryList",
            "getCategory",
            "getProductListByCategory",
            "searchProductList",
            "getProduct",
            "getItemListByProduct",
            "getItem",
            "isItemInStock",
            "insertOrder",
            "getOrder",
            "getOrdersByUsername"
        ],
        "method_calls": [
            {
                "method_name": "getAccount",
                "class_name": "this.accountDao"
            },
            {
                "method_name": "getAccount",
                "class_name": "this.accountDao"
            },
            {
                "method_name": "insertAccount",
                "class_name": "this.accountDao"
            },
            {
                "method_name": "updateAccount",
                "class_name": "this.accountDao"
            },
            {
                "method_name": "getUsernameList",
                "class_name": "this.accountDao"
            },
            {
                "method_name": "getCategoryList",
                "class_name": "this.categoryDao"
            },
            {
                "method_name": "getCategory",
                "class_name": "this.categoryDao"
            },
            {
                "method_name": "getProductListByCategory",
                "class_name": "this.productDao"
            },
            {
                "method_name": "searchProductList",
                "class_name": "this.productDao"
            },
            {
                "method_name": "getProduct",
                "class_name": "this.productDao"
            },
            {
                "method_name": "getItemListByProduct",
                "class_name": "this.itemDao"
            },
            {
                "method_name": "getItem",
                "class_name": "this.itemDao"
            },
            {
                "method_name": "isItemInStock",
                "class_name": "this.itemDao"
            },
            {
                "method_name": "insertOrder",
                "class_name": "this.orderDao"
            },
            {
                "method_name": "updateQuantity",
                "class_name": "this.itemDao"
            },
            {
                "method_name": "getOrder",
                "class_name": "this.orderDao"
            },
            {
                "method_name": "getOrdersByUsername",
                "class_name": "this.orderDao"
            }
        ],
        "words": [
            "PetStoreImpl",
            "setAccountDao",
            "setCategoryDao",
            "setProductDao",
            "setItemDao",
            "setOrderDao",
            "getAccount",
            "getAccount",
            "insertAccount",
            "updateAccount",
            "getUsernameList",
            "getCategoryList",
            "getCategory",
            "getProductListByCategory",
            "searchProductList",
            "getProduct",
            "getItemListByProduct",
            "getItem",
            "isItemInStock",
            "insertOrder",
            "getOrder",
            "getOrdersByUsername",
            "accountDao",
            "categoryDao",
            "productDao",
            "itemDao",
            "orderDao",
            "accountDao",
            "categoryDao",
            "productDao",
            "itemDao",
            "orderDao",
            "username",
            "username",
            "password",
            "account",
            "account",
            "categoryId",
            "categoryId",
            "keywords",
            "productId",
            "productId",
            "itemId",
            "itemId",
            "order",
            "orderId",
            "username",
            "-------------------------------------------------------------------------",
            "Setter",
            "methods",
            "for",
            "dependency",
            "injection",
            "-------------------------------------------------------------------------",
            "-------------------------------------------------------------------------",
            "Operation",
            "methods,",
            "implementing",
            "the",
            "PetStoreFacade",
            "interface",
            "-------------------------------------------------------------------------"
        ],
        "source": "/**\n * JPetStore primary business object.\n *\n * <p>This object makes use of five DAO objects, decoupling it\n * from the details of working with persistence APIs. So\n * although this application uses iBATIS for data access,\n * a different persistence tool could be dropped in without\n * breaking this class.\n *\n * <p>The DAOs are made available to the instance of this object\n * using Dependency Injection. (The DAOs are in turn configured using\n * Dependency Injection themselves.) We use Setter Injection here,\n * exposing JavaBean setter methods for each DAO. This means there is\n * a JavaBean property for each DAO. In the present case, the properties\n * are write-only: there are no corresponding getter methods. Getter\n * methods for configuration properties are optional: Implement them\n * only if you want to expose those properties to other business objects.\n *\n * <p>There is one instance of this class in the JPetStore application.\n * In Spring terminology, it is a \"singleton\", referring to a\n * per-Application Context singleton. The factory creates a single\n * instance; there is no need for a private constructor, static\n * factory method etc as in the traditional implementation of\n * the Singleton Design Pattern.\n *\n * <p>This is a POJO. It does not depend on any Spring APIs.\n * It's usable outside a Spring container, and can be instantiated\n * using new in a JUnit test. However, we can still apply declarative\n * transaction management to it using Spring AOP.\n *\n * <p>This class defines a default transaction annotation for all methods.\n *\n * @author Juergen Hoeller\n * @since 30.11.2003\n */\n@Transactional\npublic class PetStoreImpl implements PetStoreFacade, OrderService {\n\n    private AccountDao accountDao;\n\n    private CategoryDao categoryDao;\n\n    private ProductDao productDao;\n\n    private ItemDao itemDao;\n\n    private OrderDao orderDao;\n\n    //-------------------------------------------------------------------------\n    // Setter methods for dependency injection\n    //-------------------------------------------------------------------------\n    public void setAccountDao(AccountDao accountDao) {\n        this.accountDao = accountDao;\n    }\n\n    public void setCategoryDao(CategoryDao categoryDao) {\n        this.categoryDao = categoryDao;\n    }\n\n    public void setProductDao(ProductDao productDao) {\n        this.productDao = productDao;\n    }\n\n    public void setItemDao(ItemDao itemDao) {\n        this.itemDao = itemDao;\n    }\n\n    public void setOrderDao(OrderDao orderDao) {\n        this.orderDao = orderDao;\n    }\n\n    //-------------------------------------------------------------------------\n    // Operation methods, implementing the PetStoreFacade interface\n    //-------------------------------------------------------------------------\n    public Account getAccount(String username) {\n        return this.accountDao.getAccount(username);\n    }\n\n    public Account getAccount(String username, String password) {\n        return this.accountDao.getAccount(username, password);\n    }\n\n    public void insertAccount(Account account) {\n        this.accountDao.insertAccount(account);\n    }\n\n    public void updateAccount(Account account) {\n        this.accountDao.updateAccount(account);\n    }\n\n    public List getUsernameList() {\n        return this.accountDao.getUsernameList();\n    }\n\n    public List getCategoryList() {\n        return this.categoryDao.getCategoryList();\n    }\n\n    public Category getCategory(String categoryId) {\n        return this.categoryDao.getCategory(categoryId);\n    }\n\n    public List getProductListByCategory(String categoryId) {\n        return this.productDao.getProductListByCategory(categoryId);\n    }\n\n    public List searchProductList(String keywords) {\n        return this.productDao.searchProductList(keywords);\n    }\n\n    public Product getProduct(String productId) {\n        return this.productDao.getProduct(productId);\n    }\n\n    public List getItemListByProduct(String productId) {\n        return this.itemDao.getItemListByProduct(productId);\n    }\n\n    public Item getItem(String itemId) {\n        return this.itemDao.getItem(itemId);\n    }\n\n    public boolean isItemInStock(String itemId) {\n        return this.itemDao.isItemInStock(itemId);\n    }\n\n    public void insertOrder(Order order) {\n        this.orderDao.insertOrder(order);\n        this.itemDao.updateQuantity(order);\n    }\n\n    public Order getOrder(int orderId) {\n        return this.orderDao.getOrder(orderId);\n    }\n\n    public List getOrdersByUsername(String username) {\n        return this.orderDao.getOrdersByUsername(username);\n    }\n}"
    },
    "ListOrdersAction": {
        "methods": ["doExecute"],
        "method_calls": [
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "getUsername",
                "class_name": "acctForm.getAccount()"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getOrdersByUsername",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "ListOrdersAction",
            "doExecute",
            "acctForm",
            "username",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class ListOrdersAction extends SecureBaseAction {\n\n    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        AccountActionForm acctForm = (AccountActionForm) form;\n        String username = acctForm.getAccount().getUsername();\n        request.setAttribute(\"orderList\", getPetStore().getOrdersByUsername(username));\n        return mapping.findForward(\"success\");\n    }\n}"
    },
    "OrderService": {
        "methods": ["getOrder"],
        "method_calls": [],
        "words": [
            "OrderService",
            "getOrder",
            "orderId"
        ],
        "source": "/**\n * Separate OrderService interface, implemented by PetStoreImpl\n * in addition to PetStoreFacade.\n *\n * <p>Mainly targeted at usage as remote service interface,\n * just exposing the <code>getOrder<\/code> method.\n *\n * @author Juergen Hoeller\n * @since 26.12.2003\n * @see PetStoreFacade\n * @see PetStoreImpl\n * @see org.springframework.samples.jpetstore.service.JaxRpcOrderService\n */\npublic interface OrderService {\n\n    Order getOrder(int orderId);\n}"
    },
    "MsSqlOrderDao": {
        "methods": ["insertOrder"],
        "method_calls": [
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForObject",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "intValue",
                "class_name": "orderId"
            },
            {
                "method_name": "setOrderId",
                "class_name": "order"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "insert",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getLineItems",
                "class_name": "order"
            },
            {
                "method_name": "get",
                "class_name": "order.getLineItems()"
            },
            {
                "method_name": "getOrderId",
                "class_name": "order"
            },
            {
                "method_name": "setOrderId",
                "class_name": "lineItem"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "insert",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getLineItems",
                "class_name": "order"
            },
            {
                "method_name": "size",
                "class_name": "order.getLineItems()"
            }
        ],
        "words": [
            "MsSqlOrderDao",
            "insertOrder",
            "orderId",
            "lineItem",
            "i",
            "order",
            "*",
            "*",
            "Special",
            "MS",
            "SQL",
            "Server",
            "version",
            "to",
            "allow",
            "the",
            "Item",
            "ID",
            "*",
            "to",
            "be",
            "retrieved",
            "from",
            "an",
            "identity",
            "column."
        ],
        "source": "public class MsSqlOrderDao extends SqlMapOrderDao {\n\n    /**\n     * Special MS SQL Server version to allow the Item ID\n     * to be retrieved from an identity column.\n     */\n    public void insertOrder(Order order) throws DataAccessException {\n        Integer orderId = (Integer) getSqlMapClientTemplate().queryForObject(\"msSqlServerInsertOrder\", order);\n        order.setOrderId(orderId.intValue());\n        getSqlMapClientTemplate().insert(\"insertOrderStatus\", order);\n        for (int i = 0; i < order.getLineItems().size(); i++) {\n            LineItem lineItem = (LineItem) order.getLineItems().get(i);\n            lineItem.setOrderId(order.getOrderId());\n            getSqlMapClientTemplate().insert(\"insertLineItem\", lineItem);\n        }\n    }\n}"
    },
    "Category": {
        "methods": [
            "getCategoryId",
            "setCategoryId",
            "getName",
            "setName",
            "getDescription",
            "setDescription",
            "toString"
        ],
        "method_calls": [
            {
                "method_name": "trim",
                "class_name": "categoryId"
            },
            {
                "method_name": "getCategoryId",
                "class_name": "Optional.empty"
            }
        ],
        "words": [
            "Category",
            "getCategoryId",
            "setCategoryId",
            "getName",
            "setName",
            "getDescription",
            "setDescription",
            "toString",
            "categoryId",
            "name",
            "description",
            "categoryId",
            "name",
            "description",
            "Private",
            "Fields",
            "JavaBeans",
            "Properties",
            "Public",
            "Methods"
        ],
        "source": "public class Category implements Serializable {\n\n    /* Private Fields */\n    private String categoryId;\n\n    private String name;\n\n    private String description;\n\n    /* JavaBeans Properties */\n    public String getCategoryId() {\n        return categoryId;\n    }\n\n    public void setCategoryId(String categoryId) {\n        this.categoryId = categoryId.trim();\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    /* Public Methods */\n    public String toString() {\n        return getCategoryId();\n    }\n}"
    },
    "AccountValidator": {
        "methods": [
            "supports",
            "validate"
        ],
        "method_calls": [
            {
                "method_name": "isAssignableFrom",
                "class_name": "Account.class"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            }
        ],
        "words": [
            "AccountValidator",
            "supports",
            "validate",
            "clazz",
            "obj",
            "errors"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 01.12.2003\n */\npublic class AccountValidator implements Validator {\n\n    public boolean supports(Class clazz) {\n        return Account.class.isAssignableFrom(clazz);\n    }\n\n    public void validate(Object obj, Errors errors) {\n        ValidationUtils.rejectIfEmpty(errors, \"firstName\", \"FIRST_NAME_REQUIRED\", \"First name is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"lastName\", \"LAST_NAME_REQUIRED\", \"Last name is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"email\", \"EMAIL_REQUIRED\", \"Email address is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"phone\", \"PHONE_REQUIRED\", \"Phone number is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"address1\", \"ADDRESS_REQUIRED\", \"Address (1) is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"city\", \"CITY_REQUIRED\", \"City is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"state\", \"STATE_REQUIRED\", \"State is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"zip\", \"ZIP_REQUIRED\", \"ZIP is required.\");\n        ValidationUtils.rejectIfEmpty(errors, \"country\", \"COUNTRY_REQUIRED\", \"Country is required.\");\n    }\n}"
    },
    "ViewItemAction": {
        "methods": ["execute"],
        "method_calls": [
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getItem",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "getProduct",
                "class_name": "item"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "ViewItemAction",
            "execute",
            "itemId",
            "item",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class ViewItemAction extends BaseAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String itemId = request.getParameter(\"itemId\");\n        Item item = getPetStore().getItem(itemId);\n        request.setAttribute(\"item\", item);\n        request.setAttribute(\"product\", item.getProduct());\n        return mapping.findForward(\"success\");\n    }\n}"
    },
    "EditAccountAction": {
        "methods": ["doExecute"],
        "method_calls": [
            {
                "method_name": "getValidate",
                "class_name": "acctForm"
            },
            {
                "method_name": "equals",
                "class_name": "AccountActionForm.VALIDATE_EDIT_ACCOUNT"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "setListOption",
                "class_name": "acctForm.getAccount()"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "setBannerOption",
                "class_name": "acctForm.getAccount()"
            },
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "updateAccount",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "getUsername",
                "class_name": "account"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getAccount",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "setAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "getFavouriteCategoryId",
                "class_name": "account"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getProductListByCategory",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "setPageSize",
                "class_name": "myList"
            },
            {
                "method_name": "setMyList",
                "class_name": "acctForm"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "removeAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "EditAccountAction",
            "doExecute",
            "acctForm",
            "account",
            "myList",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class EditAccountAction extends SecureBaseAction {\n\n    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        AccountActionForm acctForm = (AccountActionForm) form;\n        if (AccountActionForm.VALIDATE_EDIT_ACCOUNT.equals(acctForm.getValidate())) {\n            acctForm.getAccount().setListOption(request.getParameter(\"account.listOption\") != null);\n            acctForm.getAccount().setBannerOption(request.getParameter(\"account.bannerOption\") != null);\n            Account account = acctForm.getAccount();\n            getPetStore().updateAccount(account);\n            acctForm.setAccount(getPetStore().getAccount(account.getUsername()));\n            PagedListHolder myList = new PagedListHolder(getPetStore().getProductListByCategory(account.getFavouriteCategoryId()));\n            myList.setPageSize(4);\n            acctForm.setMyList(myList);\n            request.getSession().setAttribute(\"accountForm\", acctForm);\n            request.getSession().removeAttribute(\"workingAccountForm\");\n            return mapping.findForward(\"success\");\n        } else {\n            request.setAttribute(\"message\", \"Your account was not updated because the submitted information was not validated.\");\n            return mapping.findForward(\"failure\");\n        }\n    }\n}"
    },
    "NewOrderAction": {
        "methods": ["doExecute"],
        "method_calls": [
            {
                "method_name": "isShippingAddressRequired",
                "class_name": "orderForm"
            },
            {
                "method_name": "isConfirmed",
                "class_name": "orderForm"
            },
            {
                "method_name": "getOrder",
                "class_name": "orderForm"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            },
            {
                "method_name": "getOrder",
                "class_name": "orderForm"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "insertOrder",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "removeAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "removeAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "NewOrderAction",
            "doExecute",
            "orderForm",
            "order",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class NewOrderAction extends SecureBaseAction {\n\n    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        OrderActionForm orderForm = (OrderActionForm) form;\n        if (orderForm.isShippingAddressRequired()) {\n            return mapping.findForward(\"shipping\");\n        } else if (!orderForm.isConfirmed()) {\n            return mapping.findForward(\"confirm\");\n        } else if (orderForm.getOrder() != null) {\n            Order order = orderForm.getOrder();\n            getPetStore().insertOrder(order);\n            request.getSession().removeAttribute(\"workingOrderForm\");\n            request.getSession().removeAttribute(\"cartForm\");\n            request.setAttribute(\"order\", order);\n            request.setAttribute(\"message\", \"Thank you, your order has been submitted.\");\n            return mapping.findForward(\"success\");\n        } else {\n            request.setAttribute(\"message\", \"An error occurred processing your order (order was null).\");\n            return mapping.findForward(\"failure\");\n        }\n    }\n}"
    },
    "CartItem": {
        "methods": [
            "isInStock",
            "setInStock",
            "getItem",
            "setItem",
            "getQuantity",
            "setQuantity",
            "getTotalPrice",
            "incrementQuantity"
        ],
        "method_calls": [{
            "method_name": "getListPrice",
            "class_name": "item"
        }],
        "words": [
            "CartItem",
            "isInStock",
            "setInStock",
            "getItem",
            "setItem",
            "getQuantity",
            "setQuantity",
            "getTotalPrice",
            "incrementQuantity",
            "item",
            "quantity",
            "inStock",
            "inStock",
            "item",
            "quantity",
            "Private",
            "Fields",
            "JavaBeans",
            "Properties",
            "Public",
            "methods"
        ],
        "source": "public class CartItem implements Serializable {\n\n    /* Private Fields */\n    private Item item;\n\n    private int quantity;\n\n    private boolean inStock;\n\n    /* JavaBeans Properties */\n    public boolean isInStock() {\n        return inStock;\n    }\n\n    public void setInStock(boolean inStock) {\n        this.inStock = inStock;\n    }\n\n    public Item getItem() {\n        return item;\n    }\n\n    public void setItem(Item item) {\n        this.item = item;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n\n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n\n    public double getTotalPrice() {\n        if (item != null) {\n            return item.getListPrice() * quantity;\n        } else {\n            return 0;\n        }\n    }\n\n    /* Public methods */\n    public void incrementQuantity() {\n        quantity++;\n    }\n}"
    },
    "JaxRpcOrderService": {
        "methods": [
            "onInit",
            "getOrder"
        ],
        "method_calls": [
            {
                "method_name": "getWebApplicationContext",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getBean",
                "class_name": "getWebApplicationContext()"
            },
            {
                "method_name": "getOrder",
                "class_name": "this.orderService"
            }
        ],
        "words": [
            "JaxRpcOrderService",
            "onInit",
            "getOrder",
            "orderService",
            "orderId"
        ],
        "source": "/**\n * JAX-RPC OrderService endpoint that simply delegates to the OrderService\n * implementation in the root web application context. Implements the plain\n * OrderService interface as service interface, just like the target bean does.\n *\n * <p>This proxy class is necessary because JAX-RPC/Axis requires a dedicated\n * endpoint class to instantiate. If an existing service needs to be exported,\n * a wrapper that extends ServletEndpointSupport for simple application context\n * access is the simplest JAX-RPC compliant way.\n *\n * <p>This is the class registered with the server-side JAX-RPC implementation.\n * In the case of Axis, this happens in \"server-config.wsdd\" respectively via\n * deployment calls. The Web Service tool manages the lifecycle of instances\n * of this class: A Spring application context can just be accessed here.\n *\n * <p>Note that this class does <i>not<\/i> implement an RMI port interface,\n * despite the JAX-RPC spec requiring this for service endpoints. Axis and\n * other JAX-RPC implementations are known to accept non-RMI endpoint classes\n * too, so there's no need to maintain an RMI port interface in addition to\n * the existing non-RMI service interface (OrderService).\n *\n * <p>If your JAX-RPC implementation imposes a strict requirement on a service\n * endpoint class to implement an RMI port interface, then let your endpoint\n * class implement both the non-RMI service interface and the RMI port interface.\n * This will work as long as the methods in both interfaces just differ in the\n * declared RemoteException. Of course, this unfortunately involves double\n * maintenance: one interface for your business logic, one for JAX-RPC.\n * Therefore, it is usually preferable to avoid this if not absolutely necessary.\n *\n * @author Juergen Hoeller\n * @since 26.12.2003\n */\npublic class JaxRpcOrderService extends ServletEndpointSupport implements OrderService {\n\n    private OrderService orderService;\n\n    protected void onInit() {\n        this.orderService = (OrderService) getWebApplicationContext().getBean(\"petStore\");\n    }\n\n    public Order getOrder(int orderId) {\n        return this.orderService.getOrder(orderId);\n    }\n}"
    },
    "ViewOrderController": {
        "methods": [
            "setPetStore",
            "handleRequest"
        ],
        "method_calls": [
            {
                "method_name": "getRequiredSessionAttribute",
                "class_name": "WebUtils"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "parseInt",
                "class_name": "Integer"
            },
            {
                "method_name": "getOrder",
                "class_name": "this.petStore"
            },
            {
                "method_name": "getUsername",
                "class_name": "order"
            },
            {
                "method_name": "getAccount",
                "class_name": "userSession"
            },
            {
                "method_name": "getUsername",
                "class_name": "userSession.getAccount()"
            },
            {
                "method_name": "equals",
                "class_name": "userSession.getAccount().getUsername()"
            }
        ],
        "words": [
            "ViewOrderController",
            "setPetStore",
            "handleRequest",
            "petStore",
            "userSession",
            "orderId",
            "order",
            "petStore",
            "request",
            "response"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 01.12.2003\n */\npublic class ViewOrderController implements Controller {\n\n    private PetStoreFacade petStore;\n\n    public void setPetStore(PetStoreFacade petStore) {\n        this.petStore = petStore;\n    }\n\n    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        UserSession userSession = (UserSession) WebUtils.getRequiredSessionAttribute(request, \"userSession\");\n        int orderId = Integer.parseInt(request.getParameter(\"orderId\"));\n        Order order = this.petStore.getOrder(orderId);\n        if (userSession.getAccount().getUsername().equals(order.getUsername())) {\n            return new ModelAndView(\"ViewOrder\", \"order\", order);\n        } else {\n            return new ModelAndView(\"Error\", \"message\", \"You may only view your own orders.\");\n        }\n    }\n}"
    },
    "SignonController": {
        "methods": [
            "setPetStore",
            "handleRequest"
        ],
        "method_calls": [
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getAccount",
                "class_name": "this.petStore"
            },
            {
                "method_name": "getFavouriteCategoryId",
                "class_name": "account"
            },
            {
                "method_name": "getProductListByCategory",
                "class_name": "this.petStore"
            },
            {
                "method_name": "setPageSize",
                "class_name": "myList"
            },
            {
                "method_name": "setMyList",
                "class_name": "userSession"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "sendRedirect",
                "class_name": "response"
            }
        ],
        "words": [
            "SignonController",
            "setPetStore",
            "handleRequest",
            "petStore",
            "username",
            "password",
            "account",
            "userSession",
            "myList",
            "forwardAction",
            "petStore",
            "request",
            "response"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 30.11.2003\n */\npublic class SignonController implements Controller {\n\n    private PetStoreFacade petStore;\n\n    public void setPetStore(PetStoreFacade petStore) {\n        this.petStore = petStore;\n    }\n\n    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String username = request.getParameter(\"username\");\n        String password = request.getParameter(\"password\");\n        Account account = this.petStore.getAccount(username, password);\n        if (account == null) {\n            return new ModelAndView(\"Error\", \"message\", \"Invalid username or password.  Signon failed.\");\n        } else {\n            UserSession userSession = new UserSession(account);\n            PagedListHolder myList = new PagedListHolder(this.petStore.getProductListByCategory(account.getFavouriteCategoryId()));\n            myList.setPageSize(4);\n            userSession.setMyList(myList);\n            request.getSession().setAttribute(\"userSession\", userSession);\n            String forwardAction = request.getParameter(\"forwardAction\");\n            if (forwardAction != null) {\n                response.sendRedirect(forwardAction);\n                return null;\n            } else {\n                return new ModelAndView(\"index\");\n            }\n        }\n    }\n}"
    },
    "SqlMapProductDao": {
        "methods": [
            "getProductListByCategory",
            "getProduct",
            "searchProductList",
            "getKeywordList"
        ],
        "method_calls": [
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForList",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForObject",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForList",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "nextToken",
                "class_name": "splitter"
            },
            {
                "method_name": "add",
                "class_name": "this.keywordList"
            },
            {
                "method_name": "hasMoreTokens",
                "class_name": "splitter"
            }
        ],
        "words": [
            "SqlMapProductDao",
            "getProductListByCategory",
            "getProduct",
            "searchProductList",
            "getKeywordList",
            "parameterObject",
            "keywordList",
            "splitter",
            "categoryId",
            "productId",
            "keywords",
            "keywords",
            "Inner",
            "Classes"
        ],
        "source": "public class SqlMapProductDao extends SqlMapClientDaoSupport implements ProductDao {\n\n    public List getProductListByCategory(String categoryId) throws DataAccessException {\n        return getSqlMapClientTemplate().queryForList(\"getProductListByCategory\", categoryId);\n    }\n\n    public Product getProduct(String productId) throws DataAccessException {\n        return (Product) getSqlMapClientTemplate().queryForObject(\"getProduct\", productId);\n    }\n\n    public List searchProductList(String keywords) throws DataAccessException {\n        Object parameterObject = new ProductSearch(keywords);\n        return getSqlMapClientTemplate().queryForList(\"searchProductList\", parameterObject);\n    }\n\n    /* Inner Classes */\n    public static class ProductSearch {\n\n        private List keywordList = new ArrayList();\n\n        public ProductSearch(String keywords) {\n            StringTokenizer splitter = new StringTokenizer(keywords, \" \", false);\n            while (splitter.hasMoreTokens()) {\n                this.keywordList.add(\"%\" + splitter.nextToken() + \"%\");\n            }\n        }\n\n        public List getKeywordList() {\n            return keywordList;\n        }\n    }\n}"
    },
    "Cart": {
        "methods": [
            "getAllCartItems",
            "getCartItemList",
            "getNumberOfItems",
            "containsItemId",
            "addItem",
            "removeItemById",
            "incrementQuantityByItemId",
            "setQuantityByItemId",
            "getSubTotal"
        ],
        "method_calls": [
            {
                "method_name": "synchronizedMap",
                "class_name": "Collections"
            },
            {
                "method_name": "setPageSize",
                "class_name": "this.itemList"
            },
            {
                "method_name": "getSource",
                "class_name": "itemList"
            },
            {
                "method_name": "iterator",
                "class_name": "itemList.getSource()"
            },
            {
                "method_name": "getSource",
                "class_name": "itemList"
            },
            {
                "method_name": "size",
                "class_name": "itemList.getSource()"
            },
            {
                "method_name": "containsKey",
                "class_name": "itemMap"
            },
            {
                "method_name": "getItemId",
                "class_name": "item"
            },
            {
                "method_name": "get",
                "class_name": "itemMap"
            },
            {
                "method_name": "setItem",
                "class_name": "cartItem"
            },
            {
                "method_name": "setQuantity",
                "class_name": "cartItem"
            },
            {
                "method_name": "setInStock",
                "class_name": "cartItem"
            },
            {
                "method_name": "getItemId",
                "class_name": "item"
            },
            {
                "method_name": "put",
                "class_name": "itemMap"
            },
            {
                "method_name": "getSource",
                "class_name": "itemList"
            },
            {
                "method_name": "add",
                "class_name": "itemList.getSource()"
            },
            {
                "method_name": "incrementQuantity",
                "class_name": "cartItem"
            },
            {
                "method_name": "remove",
                "class_name": "itemMap"
            },
            {
                "method_name": "getSource",
                "class_name": "itemList"
            },
            {
                "method_name": "remove",
                "class_name": "itemList.getSource()"
            },
            {
                "method_name": "getItem",
                "class_name": "cartItem"
            },
            {
                "method_name": "get",
                "class_name": "itemMap"
            },
            {
                "method_name": "incrementQuantity",
                "class_name": "cartItem"
            },
            {
                "method_name": "get",
                "class_name": "itemMap"
            },
            {
                "method_name": "setQuantity",
                "class_name": "cartItem"
            },
            {
                "method_name": "getAllCartItems",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "next",
                "class_name": "items"
            },
            {
                "method_name": "getItem",
                "class_name": "cartItem"
            },
            {
                "method_name": "getListPrice",
                "class_name": "item"
            },
            {
                "method_name": "getQuantity",
                "class_name": "cartItem"
            },
            {
                "method_name": "hasNext",
                "class_name": "items"
            }
        ],
        "words": [
            "Cart",
            "getAllCartItems",
            "getCartItemList",
            "getNumberOfItems",
            "containsItemId",
            "addItem",
            "removeItemById",
            "incrementQuantityByItemId",
            "setQuantityByItemId",
            "getSubTotal",
            "itemMap",
            "itemList",
            "cartItem",
            "cartItem",
            "cartItem",
            "cartItem",
            "subTotal",
            "items",
            "cartItem",
            "item",
            "listPrice",
            "quantity",
            "itemId",
            "item",
            "isInStock",
            "itemId",
            "itemId",
            "itemId",
            "quantity",
            "Private",
            "Fields",
            "JavaBeans",
            "Properties",
            "Public",
            "Methods"
        ],
        "source": "public class Cart implements Serializable {\n\n    /* Private Fields */\n    private final Map itemMap = Collections.synchronizedMap(new HashMap());\n\n    private final PagedListHolder itemList = new PagedListHolder();\n\n    /* JavaBeans Properties */\n    public Cart() {\n        this.itemList.setPageSize(4);\n    }\n\n    public Iterator getAllCartItems() {\n        return itemList.getSource().iterator();\n    }\n\n    public PagedListHolder getCartItemList() {\n        return itemList;\n    }\n\n    public int getNumberOfItems() {\n        return itemList.getSource().size();\n    }\n\n    /* Public Methods */\n    public boolean containsItemId(String itemId) {\n        return itemMap.containsKey(itemId);\n    }\n\n    public void addItem(Item item, boolean isInStock) {\n        CartItem cartItem = (CartItem) itemMap.get(item.getItemId());\n        if (cartItem == null) {\n            cartItem = new CartItem();\n            cartItem.setItem(item);\n            cartItem.setQuantity(0);\n            cartItem.setInStock(isInStock);\n            itemMap.put(item.getItemId(), cartItem);\n            itemList.getSource().add(cartItem);\n        }\n        cartItem.incrementQuantity();\n    }\n\n    public Item removeItemById(String itemId) {\n        CartItem cartItem = (CartItem) itemMap.remove(itemId);\n        if (cartItem == null) {\n            return null;\n        } else {\n            itemList.getSource().remove(cartItem);\n            return cartItem.getItem();\n        }\n    }\n\n    public void incrementQuantityByItemId(String itemId) {\n        CartItem cartItem = (CartItem) itemMap.get(itemId);\n        cartItem.incrementQuantity();\n    }\n\n    public void setQuantityByItemId(String itemId, int quantity) {\n        CartItem cartItem = (CartItem) itemMap.get(itemId);\n        cartItem.setQuantity(quantity);\n    }\n\n    public double getSubTotal() {\n        double subTotal = 0;\n        Iterator items = getAllCartItems();\n        while (items.hasNext()) {\n            CartItem cartItem = (CartItem) items.next();\n            Item item = cartItem.getItem();\n            double listPrice = item.getListPrice();\n            int quantity = cartItem.getQuantity();\n            subTotal += listPrice * quantity;\n        }\n        return subTotal;\n    }\n}"
    },
    "CartActionForm": {
        "methods": [
            "getCart",
            "setCart",
            "getWorkingItemId",
            "setWorkingItemId",
            "reset"
        ],
        "method_calls": [{
            "method_name": "reset",
            "class_name": "super"
        }],
        "words": [
            "CartActionForm",
            "getCart",
            "setCart",
            "getWorkingItemId",
            "setWorkingItemId",
            "reset",
            "cart",
            "workingItemId",
            "cart",
            "workingItemId",
            "mapping",
            "request",
            "Private",
            "Fields",
            "JavaBeans",
            "Properties",
            "Public",
            "Methods"
        ],
        "source": "public class CartActionForm extends BaseActionForm {\n\n    /* Private Fields */\n    private Cart cart = new Cart();\n\n    private String workingItemId;\n\n    /* JavaBeans Properties */\n    public Cart getCart() {\n        return cart;\n    }\n\n    public void setCart(Cart cart) {\n        this.cart = cart;\n    }\n\n    public String getWorkingItemId() {\n        return workingItemId;\n    }\n\n    public void setWorkingItemId(String workingItemId) {\n        this.workingItemId = workingItemId;\n    }\n\n    /* Public Methods */\n    public void reset(ActionMapping mapping, HttpServletRequest request) {\n        super.reset(mapping, request);\n        workingItemId = null;\n    }\n}"
    },
    "AccountFormController": {
        "methods": [
            "setPetStore",
            "formBackingObject",
            "onBindAndValidate",
            "referenceData",
            "onSubmit"
        ],
        "method_calls": [
            {
                "method_name": "setSessionForm",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setValidateOnBinding",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setCommandName",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setFormView",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getSessionAttribute",
                "class_name": "WebUtils"
            },
            {
                "method_name": "getAccount",
                "class_name": "userSession"
            },
            {
                "method_name": "getUsername",
                "class_name": "userSession.getAccount()"
            },
            {
                "method_name": "getAccount",
                "class_name": "this.petStore"
            },
            {
                "method_name": "getAccount",
                "class_name": "accountForm"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "setListOption",
                "class_name": "account"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "setBannerOption",
                "class_name": "account"
            },
            {
                "method_name": "setNestedPath",
                "class_name": "errors"
            },
            {
                "method_name": "getValidator",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "validate",
                "class_name": "getValidator()"
            },
            {
                "method_name": "setNestedPath",
                "class_name": "errors"
            },
            {
                "method_name": "isNewAccount",
                "class_name": "accountForm"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "length",
                "class_name": "account.getPassword()"
            },
            {
                "method_name": "getRepeatedPassword",
                "class_name": "accountForm"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "equals",
                "class_name": "account.getPassword()"
            },
            {
                "method_name": "reject",
                "class_name": "errors"
            },
            {
                "method_name": "setStatus",
                "class_name": "account"
            },
            {
                "method_name": "rejectIfEmpty",
                "class_name": "ValidationUtils"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "length",
                "class_name": "account.getPassword()"
            },
            {
                "method_name": "getRepeatedPassword",
                "class_name": "accountForm"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "equals",
                "class_name": "account.getPassword()"
            },
            {
                "method_name": "reject",
                "class_name": "errors"
            },
            {
                "method_name": "put",
                "class_name": "model"
            },
            {
                "method_name": "getCategoryList",
                "class_name": "this.petStore"
            },
            {
                "method_name": "put",
                "class_name": "model"
            },
            {
                "method_name": "rejectValue",
                "class_name": "errors"
            },
            {
                "method_name": "showForm",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "isNewAccount",
                "class_name": "accountForm"
            },
            {
                "method_name": "getAccount",
                "class_name": "accountForm"
            },
            {
                "method_name": "updateAccount",
                "class_name": "this.petStore"
            },
            {
                "method_name": "getAccount",
                "class_name": "accountForm"
            },
            {
                "method_name": "insertAccount",
                "class_name": "this.petStore"
            },
            {
                "method_name": "getAccount",
                "class_name": "accountForm"
            },
            {
                "method_name": "getUsername",
                "class_name": "accountForm.getAccount()"
            },
            {
                "method_name": "getAccount",
                "class_name": "this.petStore"
            },
            {
                "method_name": "getAccount",
                "class_name": "accountForm"
            },
            {
                "method_name": "getFavouriteCategoryId",
                "class_name": "accountForm.getAccount()"
            },
            {
                "method_name": "getProductListByCategory",
                "class_name": "this.petStore"
            },
            {
                "method_name": "setPageSize",
                "class_name": "myList"
            },
            {
                "method_name": "setMyList",
                "class_name": "userSession"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "onSubmit",
                "class_name": "super"
            }
        ],
        "words": [
            "AccountFormController",
            "setPetStore",
            "formBackingObject",
            "onBindAndValidate",
            "referenceData",
            "onSubmit",
            "LANGUAGES",
            "petStore",
            "userSession",
            "accountForm",
            "account",
            "model",
            "accountForm",
            "userSession",
            "myList",
            "petStore",
            "request",
            "request",
            "command",
            "errors",
            "request",
            "ex",
            "request",
            "response",
            "command",
            "errors"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 01.12.2003\n */\npublic class AccountFormController extends SimpleFormController {\n\n    public static final String[] LANGUAGES = { \"english\", \"japanese\" };\n\n    private PetStoreFacade petStore;\n\n    public AccountFormController() {\n        setSessionForm(true);\n        setValidateOnBinding(false);\n        setCommandName(\"accountForm\");\n        setFormView(\"EditAccountForm\");\n    }\n\n    public void setPetStore(PetStoreFacade petStore) {\n        this.petStore = petStore;\n    }\n\n    protected Object formBackingObject(HttpServletRequest request) throws Exception {\n        UserSession userSession = (UserSession) WebUtils.getSessionAttribute(request, \"userSession\");\n        if (userSession != null) {\n            return new AccountForm(this.petStore.getAccount(userSession.getAccount().getUsername()));\n        } else {\n            return new AccountForm();\n        }\n    }\n\n    protected void onBindAndValidate(HttpServletRequest request, Object command, BindException errors) throws Exception {\n        AccountForm accountForm = (AccountForm) command;\n        Account account = accountForm.getAccount();\n        if (request.getParameter(\"account.listOption\") == null) {\n            account.setListOption(false);\n        }\n        if (request.getParameter(\"account.bannerOption\") == null) {\n            account.setBannerOption(false);\n        }\n        errors.setNestedPath(\"account\");\n        getValidator().validate(account, errors);\n        errors.setNestedPath(\"\");\n        if (accountForm.isNewAccount()) {\n            account.setStatus(\"OK\");\n            ValidationUtils.rejectIfEmpty(errors, \"account.username\", \"USER_ID_REQUIRED\", \"User ID is required.\");\n            if (account.getPassword() == null || account.getPassword().length() < 1 || !account.getPassword().equals(accountForm.getRepeatedPassword())) {\n                errors.reject(\"PASSWORD_MISMATCH\", \"Passwords did not match or were not provided. Matching passwords are required.\");\n            }\n        } else if (account.getPassword() != null && account.getPassword().length() > 0) {\n            if (!account.getPassword().equals(accountForm.getRepeatedPassword())) {\n                errors.reject(\"PASSWORD_MISMATCH\", \"Passwords did not match. Matching passwords are required.\");\n            }\n        }\n    }\n\n    protected Map referenceData(HttpServletRequest request) throws Exception {\n        Map model = new HashMap();\n        model.put(\"languages\", LANGUAGES);\n        model.put(\"categories\", this.petStore.getCategoryList());\n        return model;\n    }\n\n    protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception {\n        AccountForm accountForm = (AccountForm) command;\n        try {\n            if (accountForm.isNewAccount()) {\n                this.petStore.insertAccount(accountForm.getAccount());\n            } else {\n                this.petStore.updateAccount(accountForm.getAccount());\n            }\n        } catch (DataIntegrityViolationException ex) {\n            errors.rejectValue(\"account.username\", \"USER_ID_ALREADY_EXISTS\", \"User ID already exists: choose a different ID.\");\n            return showForm(request, response, errors);\n        }\n        UserSession userSession = new UserSession(this.petStore.getAccount(accountForm.getAccount().getUsername()));\n        PagedListHolder myList = new PagedListHolder(this.petStore.getProductListByCategory(accountForm.getAccount().getFavouriteCategoryId()));\n        myList.setPageSize(4);\n        userSession.setMyList(myList);\n        request.getSession().setAttribute(\"userSession\", userSession);\n        return super.onSubmit(request, response, command, errors);\n    }\n}"
    },
    "BaseActionForm": {
        "methods": [
            "validate",
            "doValidate",
            "addErrorIfStringEmpty"
        ],
        "method_calls": [
            {
                "method_name": "doValidate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "isEmpty",
                "class_name": "errorList"
            },
            {
                "method_name": "add",
                "class_name": "actionErrors"
            },
            {
                "method_name": "trim",
                "class_name": "value"
            },
            {
                "method_name": "length",
                "class_name": "value.trim()"
            },
            {
                "method_name": "add",
                "class_name": "errors"
            }
        ],
        "words": [
            "BaseActionForm",
            "validate",
            "doValidate",
            "addErrorIfStringEmpty",
            "actionErrors",
            "errorList",
            "mapping",
            "request",
            "mapping",
            "request",
            "errors",
            "errors",
            "message",
            "value",
            "Public",
            "Methods",
            "Protected",
            "Methods"
        ],
        "source": "public class BaseActionForm extends ActionForm {\n\n    /* Public Methods */\n    public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {\n        ActionErrors actionErrors = null;\n        ArrayList errorList = new ArrayList();\n        doValidate(mapping, request, errorList);\n        request.setAttribute(\"errors\", errorList);\n        if (!errorList.isEmpty()) {\n            actionErrors = new ActionErrors();\n            actionErrors.add(ActionErrors.GLOBAL_ERROR, new ActionError(\"global.error\"));\n        }\n        return actionErrors;\n    }\n\n    public void doValidate(ActionMapping mapping, HttpServletRequest request, List errors) {\n    }\n\n    /* Protected Methods */\n    protected void addErrorIfStringEmpty(List errors, String message, String value) {\n        if (value == null || value.trim().length() < 1) {\n            errors.add(message);\n        }\n    }\n}"
    },
    "ViewCartAction": {
        "methods": ["execute"],
        "method_calls": [
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "equals",
                "class_name": "\"next\""
            },
            {
                "method_name": "equals",
                "class_name": "\"previous\""
            },
            {
                "method_name": "getMyList",
                "class_name": "acctForm"
            },
            {
                "method_name": "previousPage",
                "class_name": "acctForm.getMyList()"
            },
            {
                "method_name": "getMyList",
                "class_name": "acctForm"
            },
            {
                "method_name": "nextPage",
                "class_name": "acctForm.getMyList()"
            },
            {
                "method_name": "equals",
                "class_name": "\"nextCart\""
            },
            {
                "method_name": "equals",
                "class_name": "\"previousCart\""
            },
            {
                "method_name": "getCart",
                "class_name": "cartForm"
            },
            {
                "method_name": "getCartItemList",
                "class_name": "cartForm.getCart()"
            },
            {
                "method_name": "previousPage",
                "class_name": "cartForm.getCart().getCartItemList()"
            },
            {
                "method_name": "getCart",
                "class_name": "cartForm"
            },
            {
                "method_name": "getCartItemList",
                "class_name": "cartForm.getCart()"
            },
            {
                "method_name": "nextPage",
                "class_name": "cartForm.getCart().getCartItemList()"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "ViewCartAction",
            "execute",
            "cartForm",
            "acctForm",
            "page",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class ViewCartAction extends BaseAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        CartActionForm cartForm = (CartActionForm) form;\n        AccountActionForm acctForm = (AccountActionForm) request.getSession().getAttribute(\"accountForm\");\n        String page = request.getParameter(\"page\");\n        if (acctForm != null && acctForm.getAccount() != null) {\n            if (\"next\".equals(page)) {\n                acctForm.getMyList().nextPage();\n            } else if (\"previous\".equals(page)) {\n                acctForm.getMyList().previousPage();\n            }\n        }\n        if (\"nextCart\".equals(page)) {\n            cartForm.getCart().getCartItemList().nextPage();\n        } else if (\"previousCart\".equals(page)) {\n            cartForm.getCart().getCartItemList().previousPage();\n        }\n        return mapping.findForward(\"success\");\n    }\n}"
    },
    "SearchProductsController": {
        "methods": [
            "setPetStore",
            "handleRequest"
        ],
        "method_calls": [
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "equals",
                "class_name": "\"next\""
            },
            {
                "method_name": "equals",
                "class_name": "\"previous\""
            },
            {
                "method_name": "previousPage",
                "class_name": "productList"
            },
            {
                "method_name": "nextPage",
                "class_name": "productList"
            },
            {
                "method_name": "hasLength",
                "class_name": "StringUtils"
            },
            {
                "method_name": "toLowerCase",
                "class_name": "keyword"
            },
            {
                "method_name": "searchProductList",
                "class_name": "this.petStore"
            },
            {
                "method_name": "setPageSize",
                "class_name": "productList"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            }
        ],
        "words": [
            "SearchProductsController",
            "setPetStore",
            "handleRequest",
            "petStore",
            "keyword",
            "page",
            "productList",
            "productList",
            "petStore",
            "request",
            "response"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 30.11.2003\n */\npublic class SearchProductsController implements Controller {\n\n    private PetStoreFacade petStore;\n\n    public void setPetStore(PetStoreFacade petStore) {\n        this.petStore = petStore;\n    }\n\n    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String keyword = request.getParameter(\"keyword\");\n        if (keyword != null) {\n            if (!StringUtils.hasLength(keyword)) {\n                return new ModelAndView(\"Error\", \"message\", \"Please enter a keyword to search for, then press the search button.\");\n            }\n            PagedListHolder productList = new PagedListHolder(this.petStore.searchProductList(keyword.toLowerCase()));\n            productList.setPageSize(4);\n            request.getSession().setAttribute(\"SearchProductsController_productList\", productList);\n            return new ModelAndView(\"SearchProducts\", \"productList\", productList);\n        } else {\n            String page = request.getParameter(\"page\");\n            PagedListHolder productList = (PagedListHolder) request.getSession().getAttribute(\"SearchProductsController_productList\");\n            if (productList == null) {\n                return new ModelAndView(\"Error\", \"message\", \"Your session has timed out. Please start over again.\");\n            }\n            if (\"next\".equals(page)) {\n                productList.nextPage();\n            } else if (\"previous\".equals(page)) {\n                productList.previousPage();\n            }\n            return new ModelAndView(\"SearchProducts\", \"productList\", productList);\n        }\n    }\n}"
    },
    "SendOrderConfirmationEmailAdvice": {
        "methods": [
            "setMailSender",
            "setMailFrom",
            "setSubject",
            "afterPropertiesSet",
            "afterReturning"
        ],
        "method_calls": [
            {
                "method_name": "getClass",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getLog",
                "class_name": "LogFactory"
            },
            {
                "method_name": "getUsername",
                "class_name": "order"
            },
            {
                "method_name": "getAccount",
                "class_name": "((PetStoreFacade) target)"
            },
            {
                "method_name": "getEmail",
                "class_name": "account"
            },
            {
                "method_name": "getEmail",
                "class_name": "account"
            },
            {
                "method_name": "length",
                "class_name": "account.getEmail()"
            },
            {
                "method_name": "getLastName",
                "class_name": "account"
            },
            {
                "method_name": "getFirstName",
                "class_name": "account"
            },
            {
                "method_name": "append",
                "class_name": "text"
            },
            {
                "method_name": "append",
                "class_name": "text.append(\"Dear \")"
            },
            {
                "method_name": "append",
                "class_name": "text.append(\"Dear \").append(account.getFirstName())"
            },
            {
                "method_name": "append",
                "class_name": "text.append(\"Dear \").append(account.getFirstName()).append(' ')"
            },
            {
                "method_name": "append",
                "class_name": "text"
            },
            {
                "method_name": "getOrderId",
                "class_name": "order"
            },
            {
                "method_name": "append",
                "class_name": "text"
            },
            {
                "method_name": "getEmail",
                "class_name": "account"
            },
            {
                "method_name": "setTo",
                "class_name": "mailMessage"
            },
            {
                "method_name": "setFrom",
                "class_name": "mailMessage"
            },
            {
                "method_name": "setSubject",
                "class_name": "mailMessage"
            },
            {
                "method_name": "toString",
                "class_name": "text"
            },
            {
                "method_name": "setText",
                "class_name": "mailMessage"
            },
            {
                "method_name": "warn",
                "class_name": "logger"
            },
            {
                "method_name": "send",
                "class_name": "this.mailSender"
            }
        ],
        "words": [
            "SendOrderConfirmationEmailAdvice",
            "setMailSender",
            "setMailFrom",
            "setSubject",
            "afterPropertiesSet",
            "afterReturning",
            "DEFAULT_MAIL_FROM",
            "DEFAULT_SUBJECT",
            "logger",
            "mailSender",
            "mailFrom",
            "subject",
            "order",
            "account",
            "text",
            "mailMessage",
            "mailSender",
            "mailFrom",
            "subject",
            "ex",
            "returnValue",
            "m",
            "args",
            "target",
            "don't",
            "do",
            "anything",
            "if",
            "email",
            "address",
            "is",
            "not",
            "set",
            "just",
            "log",
            "it",
            "and",
            "go",
            "on"
        ],
        "source": "/**\n * AOP advice that sends confirmation email after order has been submitted\n * @author Dmitriy Kopylenko\n */\npublic class SendOrderConfirmationEmailAdvice implements AfterReturningAdvice, InitializingBean {\n\n    private static final String DEFAULT_MAIL_FROM = \"jpetstore@springframework.org\";\n\n    private static final String DEFAULT_SUBJECT = \"Thank you for your order!\";\n\n    private final Log logger = LogFactory.getLog(getClass());\n\n    private MailSender mailSender;\n\n    private String mailFrom = DEFAULT_MAIL_FROM;\n\n    private String subject = DEFAULT_SUBJECT;\n\n    public void setMailSender(MailSender mailSender) {\n        this.mailSender = mailSender;\n    }\n\n    public void setMailFrom(String mailFrom) {\n        this.mailFrom = mailFrom;\n    }\n\n    public void setSubject(String subject) {\n        this.subject = subject;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (this.mailSender == null) {\n            throw new IllegalStateException(\"mailSender is required\");\n        }\n    }\n\n    public void afterReturning(Object returnValue, Method m, Object[] args, Object target) throws Throwable {\n        Order order = (Order) args[0];\n        Account account = ((PetStoreFacade) target).getAccount(order.getUsername());\n        // don't do anything if email address is not set\n        if (account.getEmail() == null || account.getEmail().length() == 0) {\n            return;\n        }\n        StringBuffer text = new StringBuffer();\n        text.append(\"Dear \").append(account.getFirstName()).append(' ').append(account.getLastName());\n        text.append(\", thank your for your order from JPetStore. Please note that your order number is \");\n        text.append(order.getOrderId());\n        SimpleMailMessage mailMessage = new SimpleMailMessage();\n        mailMessage.setTo(account.getEmail());\n        mailMessage.setFrom(this.mailFrom);\n        mailMessage.setSubject(this.subject);\n        mailMessage.setText(text.toString());\n        try {\n            this.mailSender.send(mailMessage);\n        } catch (MailException ex) {\n            // just log it and go on\n            logger.warn(\"An exception occured when trying to send email\", ex);\n        }\n    }\n}"
    },
    "NewAccountFormAction": {
        "methods": ["execute"],
        "method_calls": [
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "removeAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getAccount",
                "class_name": "workingAcctForm"
            },
            {
                "method_name": "setAccount",
                "class_name": "workingAcctForm"
            },
            {
                "method_name": "getCategories",
                "class_name": "workingAcctForm"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getCategoryList",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "setCategories",
                "class_name": "workingAcctForm"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "NewAccountFormAction",
            "execute",
            "workingAcctForm",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class NewAccountFormAction extends BaseAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        AccountActionForm workingAcctForm = new AccountActionForm();\n        request.getSession().removeAttribute(\"workingAccountForm\");\n        request.getSession().setAttribute(\"workingAccountForm\", workingAcctForm);\n        if (workingAcctForm.getAccount() == null) {\n            workingAcctForm.setAccount(new Account());\n        }\n        if (workingAcctForm.getCategories() == null) {\n            workingAcctForm.setCategories(getPetStore().getCategoryList());\n        }\n        return mapping.findForward(\"success\");\n    }\n}"
    },
    "SqlMapSequenceDao": {
        "methods": ["getNextId"],
        "method_calls": [
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForObject",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getNextId",
                "class_name": "sequence"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "update",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getNextId",
                "class_name": "sequence"
            }
        ],
        "words": [
            "SqlMapSequenceDao",
            "getNextId",
            "sequence",
            "parameterObject",
            "name",
            "*",
            "*",
            "This",
            "is",
            "a",
            "generic",
            "sequence",
            "ID",
            "generator",
            "that",
            "is",
            "based",
            "on",
            "a",
            "database",
            "*",
            "table",
            "called",
            "'SEQUENCE',",
            "which",
            "contains",
            "two",
            "columns",
            "(NAME,",
            "NEXTID).",
            "*",
            "This",
            "approach",
            "should",
            "work",
            "with",
            "any",
            "database.",
            "*",
            "@param",
            "name",
            "the",
            "name",
            "of",
            "the",
            "sequence",
            "*",
            "@return",
            "the",
            "next",
            "ID"
        ],
        "source": "public class SqlMapSequenceDao extends SqlMapClientDaoSupport {\n\n    /**\n     * This is a generic sequence ID generator that is based on a database\n     * table called 'SEQUENCE', which contains two columns (NAME, NEXTID).\n     * This approach should work with any database.\n     * @param name the name of the sequence\n     * @return the next ID\n     */\n    public int getNextId(String name) throws DataAccessException {\n        Sequence sequence = new Sequence(name, -1);\n        sequence = (Sequence) getSqlMapClientTemplate().queryForObject(\"getSequence\", sequence);\n        if (sequence == null) {\n            throw new DataRetrievalFailureException(\"Could not get next value of sequence '\" + name + \"': sequence does not exist\");\n        }\n        Object parameterObject = new Sequence(name, sequence.getNextId() + 1);\n        getSqlMapClientTemplate().update(\"updateSequence\", parameterObject, 1);\n        return sequence.getNextId();\n    }\n}"
    },
    "NewAccountAction": {
        "methods": ["execute"],
        "method_calls": [
            {
                "method_name": "getValidate",
                "class_name": "acctForm"
            },
            {
                "method_name": "equals",
                "class_name": "AccountActionForm.VALIDATE_NEW_ACCOUNT"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "setListOption",
                "class_name": "acctForm.getAccount()"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "setBannerOption",
                "class_name": "acctForm.getAccount()"
            },
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "getUsername",
                "class_name": "acctForm.getAccount()"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "insertAccount",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getAccount",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "setAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "getFavouriteCategoryId",
                "class_name": "account"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getProductListByCategory",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "setPageSize",
                "class_name": "myList"
            },
            {
                "method_name": "setMyList",
                "class_name": "acctForm"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "removeAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "NewAccountAction",
            "execute",
            "acctForm",
            "account",
            "username",
            "myList",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class NewAccountAction extends BaseAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        AccountActionForm acctForm = (AccountActionForm) form;\n        if (AccountActionForm.VALIDATE_NEW_ACCOUNT.equals(acctForm.getValidate())) {\n            acctForm.getAccount().setListOption(request.getParameter(\"account.listOption\") != null);\n            acctForm.getAccount().setBannerOption(request.getParameter(\"account.bannerOption\") != null);\n            Account account = acctForm.getAccount();\n            String username = acctForm.getAccount().getUsername();\n            getPetStore().insertAccount(account);\n            acctForm.setAccount(getPetStore().getAccount(username));\n            PagedListHolder myList = new PagedListHolder(getPetStore().getProductListByCategory(account.getFavouriteCategoryId()));\n            myList.setPageSize(4);\n            acctForm.setMyList(myList);\n            request.getSession().setAttribute(\"accountForm\", acctForm);\n            request.getSession().removeAttribute(\"workingAccountForm\");\n            return mapping.findForward(\"success\");\n        } else {\n            request.setAttribute(\"message\", \"Your account was not created because the submitted information was not validated.\");\n            return mapping.findForward(\"failure\");\n        }\n    }\n}"
    },
    "LineItem": {
        "methods": [
            "getOrderId",
            "setOrderId",
            "getLineNumber",
            "setLineNumber",
            "getItemId",
            "setItemId",
            "getUnitPrice",
            "setUnitPrice",
            "getItem",
            "setItem",
            "getQuantity",
            "setQuantity",
            "getTotalPrice"
        ],
        "method_calls": [
            {
                "method_name": "getQuantity",
                "class_name": "cartItem"
            },
            {
                "method_name": "getItem",
                "class_name": "cartItem"
            },
            {
                "method_name": "getItemId",
                "class_name": "cartItem.getItem()"
            },
            {
                "method_name": "getItem",
                "class_name": "cartItem"
            },
            {
                "method_name": "getListPrice",
                "class_name": "cartItem.getItem()"
            },
            {
                "method_name": "getItem",
                "class_name": "cartItem"
            }
        ],
        "words": [
            "LineItem",
            "getOrderId",
            "setOrderId",
            "getLineNumber",
            "setLineNumber",
            "getItemId",
            "setItemId",
            "getUnitPrice",
            "setUnitPrice",
            "getItem",
            "setItem",
            "getQuantity",
            "setQuantity",
            "getTotalPrice",
            "orderId",
            "lineNumber",
            "quantity",
            "itemId",
            "unitPrice",
            "item",
            "lineNumber",
            "cartItem",
            "orderId",
            "lineNumber",
            "itemId",
            "unitprice",
            "item",
            "quantity",
            "Private",
            "Fields",
            "Constructors",
            "JavaBeans",
            "Properties"
        ],
        "source": "public class LineItem implements Serializable {\n\n    /* Private Fields */\n    private int orderId;\n\n    private int lineNumber;\n\n    private int quantity;\n\n    private String itemId;\n\n    private double unitPrice;\n\n    private Item item;\n\n    /* Constructors */\n    public LineItem() {\n    }\n\n    public LineItem(int lineNumber, CartItem cartItem) {\n        this.lineNumber = lineNumber;\n        this.quantity = cartItem.getQuantity();\n        this.itemId = cartItem.getItem().getItemId();\n        this.unitPrice = cartItem.getItem().getListPrice();\n        this.item = cartItem.getItem();\n    }\n\n    /* JavaBeans Properties */\n    public int getOrderId() {\n        return orderId;\n    }\n\n    public void setOrderId(int orderId) {\n        this.orderId = orderId;\n    }\n\n    public int getLineNumber() {\n        return lineNumber;\n    }\n\n    public void setLineNumber(int lineNumber) {\n        this.lineNumber = lineNumber;\n    }\n\n    public String getItemId() {\n        return itemId;\n    }\n\n    public void setItemId(String itemId) {\n        this.itemId = itemId;\n    }\n\n    public double getUnitPrice() {\n        return unitPrice;\n    }\n\n    public void setUnitPrice(double unitprice) {\n        this.unitPrice = unitprice;\n    }\n\n    public Item getItem() {\n        return item;\n    }\n\n    public void setItem(Item item) {\n        this.item = item;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n\n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n\n    public double getTotalPrice() {\n        return this.unitPrice * this.quantity;\n    }\n}"
    },
    "BaseAction": {
        "methods": [
            "setServlet",
            "getPetStore"
        ],
        "method_calls": [
            {
                "method_name": "setServlet",
                "class_name": "super"
            },
            {
                "method_name": "getServletContext",
                "class_name": "actionServlet"
            },
            {
                "method_name": "getRequiredWebApplicationContext",
                "class_name": "WebApplicationContextUtils"
            },
            {
                "method_name": "getBean",
                "class_name": "wac"
            }
        ],
        "words": [
            "BaseAction",
            "setServlet",
            "getPetStore",
            "petStore",
            "servletContext",
            "wac",
            "actionServlet"
        ],
        "source": "/**\n * Superclass for Struts actions in JPetStore's web tier.\n *\n * <p>Looks up the Spring WebApplicationContext via the ServletContext\n * and obtains the PetStoreFacade implementation from it, making it\n * available to subclasses via a protected getter method.\n *\n * <p>As alternative to such a base class, consider using Spring's\n * ActionSupport class for Struts, which pre-implements\n * WebApplicationContext lookup in a generic fashion.\n *\n * @author Juergen Hoeller\n * @since 30.11.2003\n * @see #getPetStore\n * @see org.springframework.web.context.support.WebApplicationContextUtils#getRequiredWebApplicationContext\n * @see org.springframework.web.struts.ActionSupport\n */\npublic abstract class BaseAction extends Action {\n\n    private PetStoreFacade petStore;\n\n    public void setServlet(ActionServlet actionServlet) {\n        super.setServlet(actionServlet);\n        if (actionServlet != null) {\n            ServletContext servletContext = actionServlet.getServletContext();\n            WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\n            this.petStore = (PetStoreFacade) wac.getBean(\"petStore\");\n        }\n    }\n\n    protected PetStoreFacade getPetStore() {\n        return petStore;\n    }\n}"
    },
    "EditAccountFormAction": {
        "methods": ["doExecute"],
        "method_calls": [
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "getUsername",
                "class_name": "acctForm.getAccount()"
            },
            {
                "method_name": "getAccount",
                "class_name": "workingAcctForm"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getAccount",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "setAccount",
                "class_name": "workingAcctForm"
            },
            {
                "method_name": "getCategories",
                "class_name": "workingAcctForm"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getCategoryList",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "setCategories",
                "class_name": "workingAcctForm"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "EditAccountFormAction",
            "doExecute",
            "workingAcctForm",
            "acctForm",
            "username",
            "account",
            "categories",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class EditAccountFormAction extends SecureBaseAction {\n\n    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        AccountActionForm workingAcctForm = (AccountActionForm) form;\n        AccountActionForm acctForm = (AccountActionForm) request.getSession().getAttribute(\"accountForm\");\n        String username = acctForm.getAccount().getUsername();\n        if (workingAcctForm.getAccount() == null) {\n            Account account = getPetStore().getAccount(username);\n            workingAcctForm.setAccount(account);\n        }\n        if (workingAcctForm.getCategories() == null) {\n            List categories = getPetStore().getCategoryList();\n            workingAcctForm.setCategories(categories);\n        }\n        return mapping.findForward(\"success\");\n    }\n}"
    },
    "OrderDao": {
        "methods": [
            "getOrdersByUsername",
            "getOrder",
            "insertOrder"
        ],
        "method_calls": [],
        "words": [
            "OrderDao",
            "getOrdersByUsername",
            "getOrder",
            "insertOrder",
            "username",
            "orderId",
            "order"
        ],
        "source": "public interface OrderDao {\n\n    List getOrdersByUsername(String username) throws DataAccessException;\n\n    Order getOrder(int orderId) throws DataAccessException;\n\n    void insertOrder(Order order) throws DataAccessException;\n}"
    },
    "PetStoreFacade": {
        "methods": [
            "getAccount",
            "getAccount",
            "insertAccount",
            "updateAccount",
            "getUsernameList",
            "getCategoryList",
            "getCategory",
            "getProductListByCategory",
            "searchProductList",
            "getProduct",
            "getItemListByProduct",
            "getItem",
            "isItemInStock",
            "insertOrder",
            "getOrder",
            "getOrdersByUsername"
        ],
        "method_calls": [],
        "words": [
            "PetStoreFacade",
            "getAccount",
            "getAccount",
            "insertAccount",
            "updateAccount",
            "getUsernameList",
            "getCategoryList",
            "getCategory",
            "getProductListByCategory",
            "searchProductList",
            "getProduct",
            "getItemListByProduct",
            "getItem",
            "isItemInStock",
            "insertOrder",
            "getOrder",
            "getOrdersByUsername",
            "username",
            "username",
            "password",
            "account",
            "account",
            "categoryId",
            "categoryId",
            "keywords",
            "productId",
            "productId",
            "itemId",
            "itemId",
            "order",
            "orderId",
            "username"
        ],
        "source": "/**\n * JPetStore's central business interface.\n *\n * @author Juergen Hoeller\n * @since 30.11.2003\n */\npublic interface PetStoreFacade {\n\n    Account getAccount(String username);\n\n    Account getAccount(String username, String password);\n\n    void insertAccount(Account account);\n\n    void updateAccount(Account account);\n\n    List getUsernameList();\n\n    List getCategoryList();\n\n    Category getCategory(String categoryId);\n\n    List getProductListByCategory(String categoryId);\n\n    List searchProductList(String keywords);\n\n    Product getProduct(String productId);\n\n    List getItemListByProduct(String productId);\n\n    Item getItem(String itemId);\n\n    boolean isItemInStock(String itemId);\n\n    void insertOrder(Order order);\n\n    Order getOrder(int orderId);\n\n    List getOrdersByUsername(String username);\n}"
    },
    "ViewCategoryAction": {
        "methods": ["execute"],
        "method_calls": [
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "equals",
                "class_name": "\"next\""
            },
            {
                "method_name": "equals",
                "class_name": "\"previous\""
            },
            {
                "method_name": "previousPage",
                "class_name": "productList"
            },
            {
                "method_name": "nextPage",
                "class_name": "productList"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getCategory",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getProductListByCategory",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "setPageSize",
                "class_name": "productList"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "ViewCategoryAction",
            "execute",
            "categoryId",
            "category",
            "productList",
            "page",
            "category",
            "productList",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class ViewCategoryAction extends BaseAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String categoryId = request.getParameter(\"categoryId\");\n        if (categoryId != null) {\n            Category category = getPetStore().getCategory(categoryId);\n            PagedListHolder productList = new PagedListHolder(getPetStore().getProductListByCategory(categoryId));\n            productList.setPageSize(4);\n            request.getSession().setAttribute(\"ViewProductAction_category\", category);\n            request.getSession().setAttribute(\"ViewProductAction_productList\", productList);\n            request.setAttribute(\"category\", category);\n            request.setAttribute(\"productList\", productList);\n        } else {\n            Category category = (Category) request.getSession().getAttribute(\"ViewProductAction_category\");\n            PagedListHolder productList = (PagedListHolder) request.getSession().getAttribute(\"ViewProductAction_productList\");\n            if (category == null || productList == null) {\n                throw new IllegalStateException(\"Cannot find pre-loaded category and product list\");\n            }\n            String page = request.getParameter(\"page\");\n            if (\"next\".equals(page)) {\n                productList.nextPage();\n            } else if (\"previous\".equals(page)) {\n                productList.previousPage();\n            }\n            request.setAttribute(\"category\", category);\n            request.setAttribute(\"productList\", productList);\n        }\n        return mapping.findForward(\"success\");\n    }\n}"
    },
    "SignonInterceptor": {
        "methods": ["preHandle"],
        "method_calls": [
            {
                "method_name": "getSessionAttribute",
                "class_name": "WebUtils"
            },
            {
                "method_name": "getServletPath",
                "class_name": "request"
            },
            {
                "method_name": "getQueryString",
                "class_name": "request"
            },
            {
                "method_name": "addObject",
                "class_name": "modelAndView"
            },
            {
                "method_name": "addObject",
                "class_name": "modelAndView"
            }
        ],
        "words": [
            "SignonInterceptor",
            "preHandle",
            "userSession",
            "url",
            "query",
            "modelAndView",
            "request",
            "response",
            "handler"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 01.12.2003\n */\npublic class SignonInterceptor extends HandlerInterceptorAdapter {\n\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        UserSession userSession = (UserSession) WebUtils.getSessionAttribute(request, \"userSession\");\n        if (userSession == null) {\n            String url = request.getServletPath();\n            String query = request.getQueryString();\n            ModelAndView modelAndView = new ModelAndView(\"SignonForm\");\n            if (query != null) {\n                modelAndView.addObject(\"signonForwardAction\", url + \"?\" + query);\n            } else {\n                modelAndView.addObject(\"signonForwardAction\", url);\n            }\n            throw new ModelAndViewDefiningException(modelAndView);\n        } else {\n            return true;\n        }\n    }\n}"
    },
    "AccountForm": {
        "methods": [
            "getAccount",
            "isNewAccount",
            "setRepeatedPassword",
            "getRepeatedPassword"
        ],
        "method_calls": [],
        "words": [
            "AccountForm",
            "getAccount",
            "isNewAccount",
            "setRepeatedPassword",
            "getRepeatedPassword",
            "account",
            "newAccount",
            "repeatedPassword",
            "account",
            "repeatedPassword"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 01.12.2003\n */\npublic class AccountForm implements Serializable {\n\n    private Account account;\n\n    private boolean newAccount;\n\n    private String repeatedPassword;\n\n    public AccountForm(Account account) {\n        this.account = account;\n        this.newAccount = false;\n    }\n\n    public AccountForm() {\n        this.account = new Account();\n        this.newAccount = true;\n    }\n\n    public Account getAccount() {\n        return account;\n    }\n\n    public boolean isNewAccount() {\n        return newAccount;\n    }\n\n    public void setRepeatedPassword(String repeatedPassword) {\n        this.repeatedPassword = repeatedPassword;\n    }\n\n    public String getRepeatedPassword() {\n        return repeatedPassword;\n    }\n}"
    },
    "UpdateCartQuantitiesAction": {
        "methods": ["execute"],
        "method_calls": [
            {
                "method_name": "getCart",
                "class_name": "cartForm"
            },
            {
                "method_name": "getAllCartItems",
                "class_name": "cartForm.getCart()"
            },
            {
                "method_name": "next",
                "class_name": "cartItems"
            },
            {
                "method_name": "getItem",
                "class_name": "cartItem"
            },
            {
                "method_name": "getItemId",
                "class_name": "cartItem.getItem()"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "parseInt",
                "class_name": "Integer"
            },
            {
                "method_name": "getCart",
                "class_name": "cartForm"
            },
            {
                "method_name": "setQuantityByItemId",
                "class_name": "cartForm.getCart()"
            },
            {
                "method_name": "remove",
                "class_name": "cartItems"
            },
            {
                "method_name": "hasNext",
                "class_name": "cartItems"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "UpdateCartQuantitiesAction",
            "execute",
            "cartForm",
            "cartItems",
            "cartItem",
            "itemId",
            "quantity",
            "e",
            "mapping",
            "form",
            "request",
            "response",
            "ignore",
            "on",
            "purpose"
        ],
        "source": "public class UpdateCartQuantitiesAction extends BaseAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        CartActionForm cartForm = (CartActionForm) form;\n        Iterator cartItems = cartForm.getCart().getAllCartItems();\n        while (cartItems.hasNext()) {\n            CartItem cartItem = (CartItem) cartItems.next();\n            String itemId = cartItem.getItem().getItemId();\n            try {\n                int quantity = Integer.parseInt(request.getParameter(itemId));\n                cartForm.getCart().setQuantityByItemId(itemId, quantity);\n                if (quantity < 1) {\n                    cartItems.remove();\n                }\n            } catch (NumberFormatException e) {\n                //ignore on purpose\n            }\n        }\n        return mapping.findForward(\"success\");\n    }\n}"
    },
    "ViewCartController": {
        "methods": [
            "setSuccessView",
            "handleRequest"
        ],
        "method_calls": [
            {
                "method_name": "getSessionAttribute",
                "class_name": "WebUtils"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getOrCreateSessionAttribute",
                "class_name": "WebUtils"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "equals",
                "class_name": "\"next\""
            },
            {
                "method_name": "equals",
                "class_name": "\"previous\""
            },
            {
                "method_name": "getMyList",
                "class_name": "userSession"
            },
            {
                "method_name": "previousPage",
                "class_name": "userSession.getMyList()"
            },
            {
                "method_name": "getMyList",
                "class_name": "userSession"
            },
            {
                "method_name": "nextPage",
                "class_name": "userSession.getMyList()"
            },
            {
                "method_name": "equals",
                "class_name": "\"nextCart\""
            },
            {
                "method_name": "equals",
                "class_name": "\"previousCart\""
            },
            {
                "method_name": "getCartItemList",
                "class_name": "cart"
            },
            {
                "method_name": "previousPage",
                "class_name": "cart.getCartItemList()"
            },
            {
                "method_name": "getCartItemList",
                "class_name": "cart"
            },
            {
                "method_name": "nextPage",
                "class_name": "cart.getCartItemList()"
            }
        ],
        "words": [
            "ViewCartController",
            "setSuccessView",
            "handleRequest",
            "successView",
            "userSession",
            "cart",
            "page",
            "successView",
            "request",
            "response"
        ],
        "source": "/**\n * @author Juergen Hoeller\n * @since 30.11.2003\n */\npublic class ViewCartController implements Controller {\n\n    private String successView;\n\n    public void setSuccessView(String successView) {\n        this.successView = successView;\n    }\n\n    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        UserSession userSession = (UserSession) WebUtils.getSessionAttribute(request, \"userSession\");\n        Cart cart = (Cart) WebUtils.getOrCreateSessionAttribute(request.getSession(), \"sessionCart\", Cart.class);\n        String page = request.getParameter(\"page\");\n        if (userSession != null) {\n            if (\"next\".equals(page)) {\n                userSession.getMyList().nextPage();\n            } else if (\"previous\".equals(page)) {\n                userSession.getMyList().previousPage();\n            }\n        }\n        if (\"nextCart\".equals(page)) {\n            cart.getCartItemList().nextPage();\n        } else if (\"previousCart\".equals(page)) {\n            cart.getCartItemList().previousPage();\n        }\n        return new ModelAndView(this.successView, \"cart\", cart);\n    }\n}"
    },
    "ViewProductAction": {
        "methods": ["execute"],
        "method_calls": [
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "getAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "equals",
                "class_name": "\"next\""
            },
            {
                "method_name": "equals",
                "class_name": "\"previous\""
            },
            {
                "method_name": "previousPage",
                "class_name": "itemList"
            },
            {
                "method_name": "nextPage",
                "class_name": "itemList"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getItemListByProduct",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "setPageSize",
                "class_name": "itemList"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getProduct",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "getSession",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request.getSession()"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "ViewProductAction",
            "execute",
            "productId",
            "itemList",
            "product",
            "page",
            "itemList",
            "product",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class ViewProductAction extends BaseAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String productId = request.getParameter(\"productId\");\n        if (productId != null) {\n            PagedListHolder itemList = new PagedListHolder(getPetStore().getItemListByProduct(productId));\n            itemList.setPageSize(4);\n            Product product = getPetStore().getProduct(productId);\n            request.getSession().setAttribute(\"ViewProductAction_itemList\", itemList);\n            request.getSession().setAttribute(\"ViewProductAction_product\", product);\n            request.setAttribute(\"itemList\", itemList);\n            request.setAttribute(\"product\", product);\n        } else {\n            PagedListHolder itemList = (PagedListHolder) request.getSession().getAttribute(\"ViewProductAction_itemList\");\n            Product product = (Product) request.getSession().getAttribute(\"ViewProductAction_product\");\n            String page = request.getParameter(\"page\");\n            if (\"next\".equals(page)) {\n                itemList.nextPage();\n            } else if (\"previous\".equals(page)) {\n                itemList.previousPage();\n            }\n            request.setAttribute(\"itemList\", itemList);\n            request.setAttribute(\"product\", product);\n        }\n        return mapping.findForward(\"success\");\n    }\n}"
    },
    "SqlMapOrderDao": {
        "methods": [
            "setSequenceDao",
            "getOrdersByUsername",
            "getOrder",
            "insertOrder"
        ],
        "method_calls": [
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForList",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForObject",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getOrderId",
                "class_name": "order"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForList",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "setLineItems",
                "class_name": "order"
            },
            {
                "method_name": "getNextId",
                "class_name": "this.sequenceDao"
            },
            {
                "method_name": "setOrderId",
                "class_name": "order"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "insert",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "insert",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getLineItems",
                "class_name": "order"
            },
            {
                "method_name": "get",
                "class_name": "order.getLineItems()"
            },
            {
                "method_name": "getOrderId",
                "class_name": "order"
            },
            {
                "method_name": "setOrderId",
                "class_name": "lineItem"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "insert",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getLineItems",
                "class_name": "order"
            },
            {
                "method_name": "size",
                "class_name": "order.getLineItems()"
            }
        ],
        "words": [
            "SqlMapOrderDao",
            "setSequenceDao",
            "getOrdersByUsername",
            "getOrder",
            "insertOrder",
            "sequenceDao",
            "parameterObject",
            "order",
            "lineItem",
            "i",
            "sequenceDao",
            "username",
            "orderId",
            "order"
        ],
        "source": "public class SqlMapOrderDao extends SqlMapClientDaoSupport implements OrderDao {\n\n    private SqlMapSequenceDao sequenceDao;\n\n    public void setSequenceDao(SqlMapSequenceDao sequenceDao) {\n        this.sequenceDao = sequenceDao;\n    }\n\n    public List getOrdersByUsername(String username) throws DataAccessException {\n        return getSqlMapClientTemplate().queryForList(\"getOrdersByUsername\", username);\n    }\n\n    public Order getOrder(int orderId) throws DataAccessException {\n        Object parameterObject = new Integer(orderId);\n        Order order = (Order) getSqlMapClientTemplate().queryForObject(\"getOrder\", parameterObject);\n        if (order != null) {\n            order.setLineItems(getSqlMapClientTemplate().queryForList(\"getLineItemsByOrderId\", new Integer(order.getOrderId())));\n        }\n        return order;\n    }\n\n    public void insertOrder(Order order) throws DataAccessException {\n        order.setOrderId(this.sequenceDao.getNextId(\"ordernum\"));\n        getSqlMapClientTemplate().insert(\"insertOrder\", order);\n        getSqlMapClientTemplate().insert(\"insertOrderStatus\", order);\n        for (int i = 0; i < order.getLineItems().size(); i++) {\n            LineItem lineItem = (LineItem) order.getLineItems().get(i);\n            lineItem.setOrderId(order.getOrderId());\n            getSqlMapClientTemplate().insert(\"insertLineItem\", lineItem);\n        }\n    }\n}"
    },
    "ViewOrderAction": {
        "methods": ["doExecute"],
        "method_calls": [
            {
                "method_name": "getParameter",
                "class_name": "request"
            },
            {
                "method_name": "parseInt",
                "class_name": "Integer"
            },
            {
                "method_name": "getPetStore",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "getOrder",
                "class_name": "getPetStore()"
            },
            {
                "method_name": "getUsername",
                "class_name": "order"
            },
            {
                "method_name": "getAccount",
                "class_name": "acctForm"
            },
            {
                "method_name": "getUsername",
                "class_name": "acctForm.getAccount()"
            },
            {
                "method_name": "equals",
                "class_name": "acctForm.getAccount().getUsername()"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            },
            {
                "method_name": "setAttribute",
                "class_name": "request"
            },
            {
                "method_name": "findForward",
                "class_name": "mapping"
            }
        ],
        "words": [
            "ViewOrderAction",
            "doExecute",
            "acctForm",
            "orderId",
            "order",
            "mapping",
            "form",
            "request",
            "response"
        ],
        "source": "public class ViewOrderAction extends SecureBaseAction {\n\n    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        AccountActionForm acctForm = (AccountActionForm) form;\n        int orderId = Integer.parseInt(request.getParameter(\"orderId\"));\n        Order order = getPetStore().getOrder(orderId);\n        if (acctForm.getAccount().getUsername().equals(order.getUsername())) {\n            request.setAttribute(\"order\", order);\n            return mapping.findForward(\"success\");\n        } else {\n            request.setAttribute(\"message\", \"You may only view your own orders.\");\n            return mapping.findForward(\"failure\");\n        }\n    }\n}"
    },
    "OrderServiceClient": {
        "methods": [
            "invokeOrderServices",
            "printOrder",
            "main"
        ],
        "method_calls": [
            {
                "method_name": "getBeansOfType",
                "class_name": "this.beanFactory"
            },
            {
                "method_name": "next",
                "class_name": "it"
            },
            {
                "method_name": "get",
                "class_name": "orderServices"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "start",
                "class_name": "stopWatch"
            },
            {
                "method_name": "getOrder",
                "class_name": "orderService"
            },
            {
                "method_name": "stop",
                "class_name": "stopWatch"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "printOrder",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "hasNext",
                "class_name": "it"
            },
            {
                "method_name": "keySet",
                "class_name": "orderServices"
            },
            {
                "method_name": "iterator",
                "class_name": "orderServices.keySet()"
            },
            {
                "method_name": "prettyPrint",
                "class_name": "stopWatch"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "getOrderId",
                "class_name": "order"
            },
            {
                "method_name": "getOrderDate",
                "class_name": "order"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "getShipAddress1",
                "class_name": "order"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "next",
                "class_name": "lineItems"
            },
            {
                "method_name": "getLineNumber",
                "class_name": "lineItem"
            },
            {
                "method_name": "getQuantity",
                "class_name": "lineItem"
            },
            {
                "method_name": "getItemId",
                "class_name": "lineItem"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            },
            {
                "method_name": "hasNext",
                "class_name": "lineItems"
            },
            {
                "method_name": "getLineItems",
                "class_name": "order"
            },
            {
                "method_name": "iterator",
                "class_name": "order.getLineItems()"
            },
            {
                "method_name": "equals",
                "class_name": "\"\""
            },
            {
                "method_name": "parseInt",
                "class_name": "Integer"
            },
            {
                "method_name": "equals",
                "class_name": "\"\""
            },
            {
                "method_name": "parseInt",
                "class_name": "Integer"
            },
            {
                "method_name": "invokeOrderServices",
                "class_name": "client"
            },
            {
                "method_name": "println",
                "class_name": "System.out"
            }
        ],
        "words": [
            "OrderServiceClient",
            "invokeOrderServices",
            "printOrder",
            "main",
            "CLIENT_CONTEXT_CONFIG_LOCATION",
            "beanFactory",
            "stopWatch",
            "orderServices",
            "beanName",
            "orderService",
            "order",
            "i",
            "it",
            "lineItem",
            "lineItems",
            "orderId",
            "nrOfCalls",
            "beanFactory",
            "client",
            "beanFactory",
            "orderId",
            "nrOfCalls",
            "order",
            "args"
        ],
        "source": "/**\n * Demo client class for remote OrderServices, to be invoked as standalone\n * program from the command line, e.g. via \"client.bat\" or \"run.xml\".\n *\n * <p>You need to specify an order ID and optionally a number of calls,\n * e.g. for order ID 1000: 'client 1000' for a single call per service or\n * 'client 1000 10' for 10 calls each\".\n *\n * <p>Reads in the application context from a \"clientContext.xml\" file in\n * the VM execution directory, calling all OrderService proxies defined in it.\n * See that file for details.\n *\n * @author Juergen Hoeller\n * @since 26.12.2003\n * @see org.springframework.samples.jpetstore.domain.logic.OrderService\n */\npublic class OrderServiceClient {\n\n    public static final String CLIENT_CONTEXT_CONFIG_LOCATION = \"client/clientContext.xml\";\n\n    private final ListableBeanFactory beanFactory;\n\n    public OrderServiceClient(ListableBeanFactory beanFactory) {\n        this.beanFactory = beanFactory;\n    }\n\n    public void invokeOrderServices(int orderId, int nrOfCalls) {\n        StopWatch stopWatch = new StopWatch(nrOfCalls + \" OrderService call(s)\");\n        Map orderServices = this.beanFactory.getBeansOfType(OrderService.class);\n        for (Iterator it = orderServices.keySet().iterator(); it.hasNext(); ) {\n            String beanName = (String) it.next();\n            OrderService orderService = (OrderService) orderServices.get(beanName);\n            System.out.println(\"Calling OrderService '\" + beanName + \"' with order ID \" + orderId);\n            stopWatch.start(beanName);\n            Order order = null;\n            for (int i = 0; i < nrOfCalls; i++) {\n                order = orderService.getOrder(orderId);\n            }\n            stopWatch.stop();\n            if (order != null) {\n                printOrder(order);\n            } else {\n                System.out.println(\"Order with ID \" + orderId + \" not found\");\n            }\n            System.out.println();\n        }\n        System.out.println(stopWatch.prettyPrint());\n    }\n\n    protected void printOrder(Order order) {\n        System.out.println(\"Got order with order ID \" + order.getOrderId() + \" and order date \" + order.getOrderDate());\n        System.out.println(\"Shipping address is: \" + order.getShipAddress1());\n        for (Iterator lineItems = order.getLineItems().iterator(); lineItems.hasNext(); ) {\n            LineItem lineItem = (LineItem) lineItems.next();\n            System.out.println(\"LineItem \" + lineItem.getLineNumber() + \": \" + lineItem.getQuantity() + \" piece(s) of item \" + lineItem.getItemId());\n        }\n    }\n\n    public static void main(String[] args) {\n        if (args.length == 0 || \"\".equals(args[0])) {\n            System.out.println(\"You need to specify an order ID and optionally a number of calls, e.g. for order ID 1000: \" + \"'client 1000' for a single call per service or 'client 1000 10' for 10 calls each\");\n        } else {\n            int orderId = Integer.parseInt(args[0]);\n            int nrOfCalls = 1;\n            if (args.length > 1 && !\"\".equals(args[1])) {\n                nrOfCalls = Integer.parseInt(args[1]);\n            }\n            ListableBeanFactory beanFactory = new ClassPathXmlApplicationContext(CLIENT_CONTEXT_CONFIG_LOCATION);\n            OrderServiceClient client = new OrderServiceClient(beanFactory);\n            client.invokeOrderServices(orderId, nrOfCalls);\n        }\n    }\n}"
    },
    "SqlMapAccountDao": {
        "methods": [
            "getAccount",
            "getAccount",
            "insertAccount",
            "updateAccount",
            "getUsernameList"
        ],
        "method_calls": [
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForObject",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "setUsername",
                "class_name": "account"
            },
            {
                "method_name": "setPassword",
                "class_name": "account"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForObject",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "insert",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "insert",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "insert",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "update",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "update",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "getPassword",
                "class_name": "account"
            },
            {
                "method_name": "length",
                "class_name": "account.getPassword()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "update",
                "class_name": "getSqlMapClientTemplate()"
            },
            {
                "method_name": "getSqlMapClientTemplate",
                "class_name": "Optional.empty"
            },
            {
                "method_name": "queryForList",
                "class_name": "getSqlMapClientTemplate()"
            }
        ],
        "words": [
            "SqlMapAccountDao",
            "getAccount",
            "getAccount",
            "insertAccount",
            "updateAccount",
            "getUsernameList",
            "account",
            "username",
            "username",
            "password",
            "account",
            "account"
        ],
        "source": "/**\n * In this and other DAOs in this package, a DataSource property\n * is inherited from the SqlMapClientDaoSupport convenience superclass\n * supplied by Spring. DAOs don't need to extend such superclasses,\n * but it saves coding in many cases. There are analogous superclasses\n * for JDBC (JdbcDaoSupport), Hibernate (HibernateDaoSupport),\n * JDO (JdoDaoSupport) etc.\n *\n * <p>This and other DAOs are configured using Dependency Injection.\n * This means, for example, that Spring can source the DataSource\n * from a local class, such as the Commons DBCP BasicDataSource,\n * or from JNDI, concealing the JNDI lookup from application code.\n *\n * @author Juergen Hoeller\n * @author Colin Sampaleanu\n */\npublic class SqlMapAccountDao extends SqlMapClientDaoSupport implements AccountDao {\n\n    public Account getAccount(String username) throws DataAccessException {\n        return (Account) getSqlMapClientTemplate().queryForObject(\"getAccountByUsername\", username);\n    }\n\n    public Account getAccount(String username, String password) throws DataAccessException {\n        Account account = new Account();\n        account.setUsername(username);\n        account.setPassword(password);\n        return (Account) getSqlMapClientTemplate().queryForObject(\"getAccountByUsernameAndPassword\", account);\n    }\n\n    public void insertAccount(Account account) throws DataAccessException {\n        getSqlMapClientTemplate().insert(\"insertAccount\", account);\n        getSqlMapClientTemplate().insert(\"insertProfile\", account);\n        getSqlMapClientTemplate().insert(\"insertSignon\", account);\n    }\n\n    public void updateAccount(Account account) throws DataAccessException {\n        getSqlMapClientTemplate().update(\"updateAccount\", account, 1);\n        getSqlMapClientTemplate().update(\"updateProfile\", account, 1);\n        if (account.getPassword() != null && account.getPassword().length() > 0) {\n            getSqlMapClientTemplate().update(\"updateSignon\", account, 1);\n        }\n    }\n\n    public List getUsernameList() throws DataAccessException {\n        return getSqlMapClientTemplate().queryForList(\"getUsernameList\", null);\n    }\n}"
    }
}